{"version":3,"file":"2156.a410b25b.iframe.bundle.js","mappings":";;;;;;;AAupBA;;AAEA;;;AAKA;AACA;;;;AAMA;AACA;;;;AAKA;AACA;;AAaA;;AAEA;;AAEA;AACA;;;AAGA;;AAIA;AACA;;AAEA;;AAIA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AAiIA;;AAGA;AACA;;;;;;AAMA;;;;;AAsXA;;AAEA;;AAbA;;;;;AAoBA;;AAEA;;;AAGA;AAGA;AACA;;AAQA;;AAEA;;AAEA;AACA;;AAIA;;AAEA;;;AAGA;;AAIA;;AAEA;;AAEA;;AAIA;AACA;;AAIA;;AAEA;;AAkbA;;;;;;;AAOA","sources":["webpack://geonetwork-ui/./node_modules/@ltd/j-toml/index.mjs"],"sourcesContent":["const version = '1.35.3';\n\nconst SyntaxError$1 = SyntaxError;\n\nconst RangeError$1 = RangeError;\n\nconst TypeError$1 = TypeError;\n\nconst Error$1 = {if:Error}.if;\n\nconst undefined$1 = void null;\n\nconst BigInt$1 = typeof BigInt==='undefined' ? undefined$1 : BigInt;\n\nconst RegExp$1 = RegExp;\n\nconst WeakMap$1 = WeakMap;\n\nconst get = WeakMap.prototype.get;\n\nconst set = WeakMap.prototype.set;\n\nconst create$1 = Object.create;\n\nconst isSafeInteger = Number.isSafeInteger;\n\nconst getOwnPropertyNames = Object.getOwnPropertyNames;\n\nconst freeze = Object.freeze;\n\nconst isPrototypeOf = Object.prototype.isPrototypeOf;\n\nconst NULL = (\n\t/* j-globals: null.prototype (internal) */\n\tObject.seal\n\t\t? /*#__PURE__*/Object.preventExtensions(Object.create(null))\n\t\t: null\n\t/* j-globals: null.prototype (internal) */\n);\n\nconst bind = Function.prototype.bind;\n\nconst test = RegExp.prototype.test;\n\nconst exec = RegExp.prototype.exec;\n\nconst apply$1 = Reflect.apply;\n\nconst Proxy$1 = Proxy;\n\nconst toStringTag = typeof Symbol==='undefined' ? undefined$1 : Symbol.toStringTag;\n\nconst Object_defineProperty = Object.defineProperty;\n\nconst assign$1 = Object.assign;\n\nconst Object$1 = Object;\n\nconst floor = Math.floor;\n\nconst isArray$1 = Array.isArray;\n\nconst Infinity = 1/0;\n\nconst fromCharCode = String.fromCharCode;\n\nconst Array$1 = Array;\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nconst propertyIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nconst apply = Function.prototype.apply;\n\nvar isEnum = /*#__PURE__*/propertyIsEnumerable.call.bind(propertyIsEnumerable);\nvar hasOwn = (\n\t/* j-globals: Object.hasOwn (polyfill) */\n\tObject$1.hasOwn || /*#__PURE__*/function () {\n\t\treturn hasOwnProperty.bind\n\t\t\t? hasOwnProperty.call.bind(hasOwnProperty)\n\t\t\t: function hasOwn (object, key) { return hasOwnProperty.call(object, key); };\n\t}()\n\t/* j-globals: Object.hasOwn (polyfill) */\n);\n\nvar create = Object$1.create;\nfunction Descriptor (source) {\n\tvar target = create(NULL);\n\tif ( hasOwn(source, 'value') ) { target.value = source.value; }\n\tif ( hasOwn(source, 'writable') ) { target.writable = source.writable; }\n\tif ( hasOwn(source, 'get') ) { target.get = source.get; }\n\tif ( hasOwn(source, 'set') ) { target.set = source.set; }\n\tif ( hasOwn(source, 'enumerable') ) { target.enumerable = source.enumerable; }\n\tif ( hasOwn(source, 'configurable') ) { target.configurable = source.configurable; }\n\treturn target;\n}\n\nconst Default = (\n\t/* j-globals: default (internal) */\n\tfunction Default (exports, addOnOrigin) {\n\t\tif ( !addOnOrigin ) { addOnOrigin = exports; exports = create$1(NULL); }\n\t\tif ( assign$1 ) { assign$1(exports, addOnOrigin); }\n\t\telse { for ( var key in addOnOrigin ) { if ( hasOwn(addOnOrigin, key) ) { exports[key] = addOnOrigin[key]; } } }\n\t\texports.default = exports;\n\t\tif ( toStringTag ) {\n\t\t\tvar descriptor = create$1(NULL);\n\t\t\tdescriptor.value = 'Module';\n\t\t\tObject_defineProperty(exports, toStringTag, descriptor);\n\t\t}\n\t\ttypeof exports==='function' && exports.prototype && freeze(exports.prototype);\n\t\treturn freeze(exports);\n\t}\n\t/* j-globals: default (internal) */\n);\n\n/*!@preserve@license\n * 模块名称：j-regexp\n * 模块功能：可读性更好的正则表达式创建方式。从属于“简计划”。\n   　　　　　More readable way for creating RegExp. Belong to \"Plan J\".\n * 模块版本：8.2.0\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-regexp/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-regexp/\n */\n\nvar Test                                           = bind\n\t? /*#__PURE__*/bind.bind(test       )       \n\t: function (re) {\n\t\treturn function (string) {\n\t\t\treturn test.call(re, string);\n\t\t};\n\t};\n\nvar Exec                                           = bind\n\t? /*#__PURE__*/bind.bind(exec       )       \n\t: function (re) {\n\t\treturn function (string) {\n\t\t\treturn exec.call(re, string);\n\t\t};\n\t};\n\nfunction __PURE__ (re        )         {\n\tvar test = re.test = Test(re);\n\tvar exec = re.exec = Exec(re);\n\tvar source = test.source = exec.source = re.source;\n\ttest.unicode = exec.unicode = re.unicode;\n\ttest.ignoreCase = exec.ignoreCase = re.ignoreCase;\n\ttest.multiline = exec.multiline = source.indexOf('^')<0 && source.indexOf('$')<0 ? null : re.multiline;\n\ttest.dotAll = exec.dotAll = source.indexOf('.')<0 ? null : re.dotAll;\n\treturn re;\n}\nfunction theRegExp (re        )         { return /*#__PURE__*/__PURE__(re); }\n\nvar NT = /[\\n\\t]+/g;\nvar ESCAPE = /\\\\./g;\nfunction graveAccentReplacer ($$        ) { return $$==='\\\\`' ? '`' : $$; }\n\nvar includes = ''.includes       \n\t? function (that        , searchString        ) { return that.includes(searchString); }\n\t: function (that        , searchString        ) { return that.indexOf(searchString)>-1; };\n\nfunction RE (               template                      ) {\n\tvar U = this.U;\n\tvar I = this.I;\n\tvar M = this.M;\n\tvar S = this.S;\n\tvar raw = template.raw;\n\tvar source = raw[0] .replace(NT, '');\n\tvar index = 1;\n\tvar length = arguments.length;\n\twhile ( index!==length ) {\n\t\tvar value            \n\t\t\t                       \n\t\t\t                          \n\t\t\t                             \n\t\t\t                            \n\t\t\t                         \n\t\t  = arguments[index];\n\t\tif ( typeof value==='string' ) { source += value; }\n\t\telse {\n\t\t\tvar value_source = value.source;\n\t\t\tif ( typeof value_source!=='string' ) { throw TypeError$1('source'); }\n\t\t\tif ( value.unicode===U ) { throw SyntaxError$1('unicode'); }\n\t\t\tif ( value.ignoreCase===I ) { throw SyntaxError$1('ignoreCase'); }\n\t\t\tif ( value.multiline===M && ( includes(value_source, '^') || includes(value_source, '$') ) ) { throw SyntaxError$1('multiline'); }\n\t\t\tif ( value.dotAll===S && includes(value_source, '.') ) { throw SyntaxError$1('dotAll'); }\n\t\t\tsource += value_source;\n\t\t}\n\t\tsource += raw[index++] .replace(NT, '');\n\t}\n\tvar re         = RegExp$1(U ? source = source.replace(ESCAPE, graveAccentReplacer) : source, this.flags);\n\tvar test = re.test = Test(re);\n\tvar exec = re.exec = Exec(re);\n\ttest.source = exec.source = source;\n\ttest.unicode = exec.unicode = !U;\n\ttest.ignoreCase = exec.ignoreCase = !I;\n\ttest.multiline = exec.multiline = includes(source, '^') || includes(source, '$') ? !M : null;\n\ttest.dotAll = exec.dotAll = includes(source, '.') ? !S : null;\n\treturn re;\n}\n\nvar RE_bind = bind && /*#__PURE__*/bind.bind(RE       );\n\nfunction Context (flags        )          {\n\treturn {\n\t\tU: !includes(flags, 'u'),\n\t\tI: !includes(flags, 'i'),\n\t\tM: !includes(flags, 'm'),\n\t\tS: !includes(flags, 's'),\n\t\tflags: flags\n\t};\n}\n\nvar CONTEXT          = /*#__PURE__*/Context('');\n\nvar newRegExp = Proxy$1\n\t? /*#__PURE__*/new Proxy$1(RE, {\n\t\tapply: function (RE, thisArg, args                                   ) { return apply$1(RE, CONTEXT, args); }\n\t\t,\n\t\tget: function (RE, flags        ) { return RE_bind(Context(flags)); }\n\t\t,\n\t\tdefineProperty: function () { return false; }\n\t\t,\n\t\tpreventExtensions: function () { return false; }\n\t})\n\t: /*#__PURE__*/function () {\n\t\tRE.apply = RE.apply;\n\t\tvar newRegExp = function () { return RE.apply(CONTEXT, arguments       ); }       ;\n\t\tvar d = 1;\n\t\tvar g = d*2;\n\t\tvar i = g*2;\n\t\tvar m = i*2;\n\t\tvar s = i*2;\n\t\tvar u = s*2;\n\t\tvar y = u*2;\n\t\tvar flags = y*2 - 1;\n\t\twhile ( flags-- ) {\n\t\t\t( function (context) {\n\t\t\t\tnewRegExp[context.flags] = function () { return RE.apply(context, arguments       ); };\n\t\t\t} )(Context(\n\t\t\t\t( flags & d ? '' : 'd' )\n\t\t\t\t+\n\t\t\t\t( flags & g ? '' : 'g' )\n\t\t\t\t+\n\t\t\t\t( flags & i ? '' : 'i' )\n\t\t\t\t+\n\t\t\t\t( flags & m ? '' : 'm' )\n\t\t\t\t+\n\t\t\t\t( flags & s ? '' : 's' )\n\t\t\t\t+\n\t\t\t\t( flags & u ? '' : 'u' )\n\t\t\t\t+\n\t\t\t\t( flags & y ? '' : 'y' )\n\t\t\t));\n\t\t}\n\t\treturn freeze ? freeze(newRegExp) : newRegExp;\n\t}();\n\nvar clearRegExp = '$_' in RegExp$1\n\t? /*#__PURE__*/function () {\n\t\tvar REGEXP = /^/;\n\t\tREGEXP.test = REGEXP.test;\n\t\treturn function clearRegExp                (value    )                {\n\t\t\tREGEXP.test('');\n\t\t\treturn value;\n\t\t};\n\t}()\n\t: function clearRegExp                (value    )                {\n\t\treturn value;\n\t};\n\nvar clearRegExp$1 = clearRegExp;\n\nvar NEED_TO_ESCAPE_IN_REGEXP = /^[$()*+\\-.?[\\\\\\]^{|]/;\nvar SURROGATE_PAIR = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nvar GROUP = /*#__PURE__*/create$1(NULL)         ;\n\nfunction groupify (branches                   , uFlag          , noEscape          )         {\n\tvar group = create$1(NULL)         ;\n\tvar appendBranch = uFlag ? appendPointBranch : appendCodeBranch;\n\tfor ( var length         = branches.length, index         = 0; index<length; ++index ) { appendBranch(group, branches[index] ); }\n\treturn sourcify(group, !noEscape);\n}\nfunction appendPointBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar character         = SURROGATE_PAIR.test(branch) ? branch.slice(0, 2) : branch.charAt(0);\n\t\tappendPointBranch(group[character] || ( group[character] = create$1(NULL)          ), branch.slice(character.length));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction appendCodeBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar character         = branch.charAt(0);\n\t\tappendCodeBranch(group[character] || ( group[character] = create$1(NULL)          ), branch.slice(1));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction sourcify (group       , needEscape         )         {\n\tvar branches           = [];\n\tvar singleCharactersBranch           = [];\n\tvar noEmptyBranch          = true;\n\tfor ( var character in group ) {\n\t\tif ( character ) {\n\t\t\tvar sub_branches         = sourcify(group[character] , needEscape);\n\t\t\tif ( needEscape && NEED_TO_ESCAPE_IN_REGEXP.test(character) ) { character = '\\\\' + character; }\n\t\t\tsub_branches ? branches.push(character + sub_branches) : singleCharactersBranch.push(character);\n\t\t}\n\t\telse { noEmptyBranch = false; }\n\t}\n\tsingleCharactersBranch.length && branches.unshift(singleCharactersBranch.length===1 ? singleCharactersBranch[0]  : '[' + singleCharactersBranch.join('') + ']');\n\treturn branches.length===0\n\t\t? ''\n\t\t: ( branches.length===1 && ( singleCharactersBranch.length || noEmptyBranch )\n\t\t\t? branches[0]\n\t\t\t: '(?:' + branches.join('|') + ')'\n\t\t)\n\t\t+ ( noEmptyBranch ? '' : '?' );\n}\n\n/*¡ j-regexp */\n\nconst WeakSet$1 = WeakSet;\n\nconst has = WeakSet.prototype.has;\n\nconst add = WeakSet.prototype.add;\n\nconst del = WeakSet.prototype['delete'];\n\nconst keys = Object.keys;\n\nconst getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\nconst Null$1 = (\n\t/* j-globals: null (internal) */\n\t/*#__PURE__*/function () {\n\t\tvar assign = Object.assign || function assign (target, source) {\n\t\t\tvar keys$1, index, key;\n\t\t\tfor ( keys$1 = keys(source), index = 0; index<keys$1.length;++index ) {\n\t\t\t\tkey = keys$1[index];\n\t\t\t\ttarget[key] = source[key];\n\t\t\t}\n\t\t\tif ( getOwnPropertySymbols ) {\n\t\t\t\tfor ( keys$1 = getOwnPropertySymbols(source), index = 0; index<keys$1.length;++index ) {\n\t\t\t\t\tkey = keys$1[index];\n\t\t\t\t\tif ( isEnum(source, key) ) { target[key] = source[key]; }\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn target;\n\t\t};\n\t\tfunction Nullify (constructor) {\n\t\t\tdelete constructor.prototype.constructor;\n\t\t\tfreeze(constructor.prototype);\n\t\t\treturn constructor;\n\t\t}\n\t\tfunction Null (origin) {\n\t\t\treturn origin===undefined$1\n\t\t\t\t? this\n\t\t\t\t: typeof origin==='function'\n\t\t\t\t\t? /*#__PURE__*/Nullify(origin)\n\t\t\t\t\t: /*#__PURE__*/assign(/*#__PURE__*/create(NULL), origin);\n\t\t}\n\t\tdelete Null.name;\n\t\t//try { delete Null.length; } catch (error) {}\n\t\tNull.prototype = null;\n\t\tfreeze(Null);\n\t\treturn Null;\n\t}()\n\t/* j-globals: null (internal) */\n);\n\nconst is = Object.is;\n\nconst Object_defineProperties = Object.defineProperties;\n\nconst fromEntries = Object.fromEntries;\n\nconst Reflect_construct = Reflect.construct;\n\nconst Reflect_defineProperty = Reflect.defineProperty;\n\nconst Reflect_deleteProperty = Reflect.deleteProperty;\n\nconst ownKeys = Reflect.ownKeys;\n\n/*!@preserve@license\n * 模块名称：j-orderify\n * 模块功能：返回一个能保证给定对象的属性按此后添加顺序排列的 proxy，即使键名是 symbol，或整数 string。从属于“简计划”。\n   　　　　　Return a proxy for given object, which can guarantee own keys are in setting order, even if the key name is symbol or int string. Belong to \"Plan J\".\n * 模块版本：7.0.1\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-orderify/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-orderify/\n */\n\nconst Keeper =     ()      => [];\n\nconst newWeakMap = () => {\n\tconst weakMap = new WeakMap$1;\n\tweakMap.has = weakMap.has;\n\tweakMap.get = weakMap.get;\n\tweakMap.set = weakMap.set;\n\treturn weakMap;\n};\nconst target2keeper = /*#__PURE__*/newWeakMap()     \n\t                                                                      \n\t                                                                         \n ;\nconst proxy2target = /*#__PURE__*/newWeakMap()     \n\t                             \n\t                                                 \n\t                                                   \n ;\nconst target2proxy = /*#__PURE__*/newWeakMap()     \n\t                                                  \n\t                                                   \n ;\n\nconst handlers                       = /*#__PURE__*/assign$1(create$1(NULL), {\n\tdefineProperty:                 (target                   , key   , descriptor                    )          => {\n\t\tif ( hasOwn(target, key) ) {\n\t\t\treturn Reflect_defineProperty(target, key, assign$1(create$1(NULL), descriptor));\n\t\t}\n\t\tif ( Reflect_defineProperty(target, key, assign$1(create$1(NULL), descriptor)) ) {\n\t\t\tconst keeper = target2keeper.get(target) ;\n\t\t\tkeeper[keeper.length] = key;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\tdeleteProperty:                 (target                   , key   )          => {\n\t\tif ( Reflect_deleteProperty(target, key) ) {\n\t\t\tconst keeper = target2keeper.get(target) ;\n\t\t\tconst index = keeper.indexOf(key);\n\t\t\tindex<0 || --keeper.copyWithin(index, index + 1).length;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\townKeys:                    (target   ) => target2keeper.get(target)                         ,\n\tconstruct:                                     (target                         , args   , newTarget     )    => orderify(Reflect_construct(target, args, newTarget)),\n\tapply:                                        (target                              , thisArg   , args   )    => orderify(apply$1(target, thisArg, args)),\n});\n\nconst newProxy =                                              (target   , keeper           )    => {\n\ttarget2keeper.set(target, keeper);\n\tconst proxy = new Proxy$1   (target, handlers);\n\tproxy2target.set(proxy, target);\n\treturn proxy;\n};\n\nconst orderify =                    (object   )    => {\n\tif ( proxy2target.has(object) ) { return object; }\n\tlet proxy = target2proxy.get(object)                 ;\n\tif ( proxy ) { return proxy; }\n\tproxy = newProxy(object, assign$1(Keeper          (), ownKeys(object)));\n\ttarget2proxy.set(object, proxy);\n\treturn proxy;\n};\n\nconst Null = /*#__PURE__*/function () {\n\tfunction throwConstructing ()        { throw TypeError$1(`Super constructor Null cannot be invoked with 'new'`); }\n\tfunction throwApplying ()        { throw TypeError$1(`Super constructor Null cannot be invoked without 'new'`); }\n\tconst Nullify = (constructor                             ) => {\n\t\tdelete constructor.prototype.constructor;\n\t\tfreeze(constructor.prototype);\n\t\treturn constructor;\n\t};\n\tfunction Null (           constructor                              ) {\n\t\treturn new.target\n\t\t\t? new.target===Null\n\t\t\t\t? /*#__PURE__*/throwConstructing()\n\t\t\t\t: /*#__PURE__*/newProxy(this, Keeper     ())\n\t\t\t: typeof constructor==='function'\n\t\t\t\t? /*#__PURE__*/Nullify(constructor)\n\t\t\t\t: /*#__PURE__*/throwApplying();\n\t}\n\t//@ts-ignore\n\tNull.prototype = null;\n\tObject_defineProperty(Null, 'name', assign$1(create$1(NULL), { value: '', configurable: false }));\n\t//delete Null.length;\n\tfreeze(Null);\n\treturn Null;\n}()                                           ;\n\n/*¡ j-orderify */\n\nconst map_has = WeakMap.prototype.has;\n\nconst map_del = WeakMap.prototype['delete'];\n\nconst INLINES = new WeakMap$1                                                                     ();\nconst SECTIONS = new WeakSet$1                ();\n\nconst deInline = /*#__PURE__*/map_del.bind(INLINES)                                                                              ;\nconst deSection = /*#__PURE__*/del.bind(SECTIONS)                                                  ;\n\nconst isInline = /*#__PURE__*/map_has.bind(INLINES)                                                  ;\nconst ofInline = /*#__PURE__*/get.bind(INLINES)     \n\t                                                                          \n\t                                                               \n\t                                       \n ;\nconst beInline = /*#__PURE__*/set.bind(INLINES)     \n\t                                                                                  \n\t                                                                       \n ;\nconst inline =                                                         (value   , mode                , looping         )    => {\n\tif ( isArray$1(value) ) {\n\t\tif ( looping ) { mode = 3; }\n\t\telse {\n\t\t\tif ( mode===undefined$1 ) { mode = 3; }\n\t\t\telse if ( mode!==0 && mode!==1 && mode!==2 && mode!==3 ) {\n\t\t\t\tthrow typeof mode==='number'\n\t\t\t\t\t? RangeError$1(`array inline mode must be 0 | 1 | 2 | 3, not including ${mode}`)\n\t\t\t\t\t: TypeError$1(`array inline mode must be \"number\" type, not including ${mode===null ? '\"null\"' : typeof mode}`);\n\t\t\t}\n\t\t}\n\t\tbeInline(value, mode);\n\t}\n\telse {\n\t\tbeInline(value, true);\n\t\tdeSection(value);\n\t}\n\treturn value;\n};\nconst multilineTable =                                  (value   )    => {\n\tbeInline(value, false);\n\tdeSection(value);\n\treturn value;\n};\nconst multilineArray =                                       (value   )    => {\n\tdeInline(value);\n\treturn value;\n};\n\nconst isSection = /*#__PURE__*/has.bind(SECTIONS)                                                                  ;\nconst beSection = /*#__PURE__*/add.bind(SECTIONS)                                                 ;\nconst Section =                            (table   )    => {\n\tif ( isArray$1(table) ) { throw TypeError$1(`array can not be section, maybe you want to use it on the tables in it`); }\n\tbeSection(table);\n\tdeInline(table);\n\treturn table;\n};\n\nconst INLINE = true;\n\nconst tables = new WeakSet$1       ();\nconst tables_add = /*#__PURE__*/add.bind(tables);\nconst isTable = /*#__PURE__*/has.bind(tables)                                              ;\n\nconst implicitTables = new WeakSet$1       ();\nconst implicitTables_add = /*#__PURE__*/add.bind(implicitTables);\nconst implicitTables_del = /*#__PURE__*/del.bind(implicitTables)                                         ;\nconst directlyIfNot = (table       )          => {\n\tif ( implicitTables_del(table) ) {\n\t\tbeSection(table);\n\t\treturn true;\n\t}\n\treturn false;\n};\nconst DIRECTLY = true;\nconst IMPLICITLY = false;\n\nconst pairs = new WeakSet$1       ();\nconst pairs_add = /*#__PURE__*/add.bind(pairs);\nconst fromPair = /*#__PURE__*/has.bind(pairs)                                         ;\nconst PAIR = true;\n\nconst PlainTable = /*#__PURE__*/Null$1(class Table extends Null$1      {\n\t                                \n\tconstructor (isDirect          , isInline$fromPair          ) {\n\t\tsuper();\n\t\ttables_add(this);\n\t\tisDirect\n\t\t\t? isInline$fromPair ? beInline(this, true) : beSection(this)\n\t\t\t: ( isInline$fromPair ? pairs_add : implicitTables_add )(this);\n\t\treturn this;\n\t}\n});\n\nconst OrderedTable = /*#__PURE__*/Null$1(class Table extends Null      {\n\t                                \n\tconstructor (isDirect          , isInline$fromPair          ) {\n\t\tsuper();\n\t\ttables_add(this);\n\t\tisDirect\n\t\t\t? isInline$fromPair ? beInline(this, true) : beSection(this)\n\t\t\t: ( isInline$fromPair ? pairs_add : implicitTables_add )(this);\n\t\treturn this;\n\t}\n});\n\n//import * as options from './options';\n\nconst NONE                    = [];\nlet sourcePath         = '';\nlet sourceLines                    = NONE;\nlet lastLineIndex         = -1;\nlet lineIndex         = -1;\n\nconst throws = (error       )        => {\n\t//if ( sourceLines!==NONE ) { done(); options.clear(); }\n\tthrow error;\n};\n\nconst EOL = /\\r?\\n/;\nconst todo = (source        , path        )       => {\n\tif ( typeof path!=='string' ) { throw TypeError$1(`TOML.parse({ path })`); }\n\tsourcePath = path;\n\tsourceLines = source.split(EOL);\n\tlastLineIndex = sourceLines.length - 1;\n\tlineIndex = -1;\n};\n\nconst next = ()         => sourceLines[++lineIndex] ;\n\nconst rest = ()          => lineIndex!==lastLineIndex;\n\nclass mark {\n\t                 lineIndex = lineIndex;\n\t                 type                                                                                           ;\n\t                 restColumn        ;\n\tconstructor (type                                                                                           , restColumn        ) {\n\t\tthis.type = type;\n\t\tthis.restColumn = restColumn;\n\t\treturn this;\n\t}\n\tmust (          )         {\n\t\tlineIndex===lastLineIndex && throws(SyntaxError$1(`${this.type} is not close until the end of the file` + where(', which started from ', this.lineIndex, sourceLines[this.lineIndex] .length - this.restColumn + 1)));\n\t\treturn sourceLines[++lineIndex] ;\n\t}\n\tnowrap (            argsMode                 )        {\n\t\tthrow throws(Error$1(`TOML.parse(${argsMode ? `${argsMode}multilineStringJoiner` : `,{ joiner }`}) must be passed, while the source including multi-line string` + where(', which started from ', this.lineIndex, sourceLines[this.lineIndex] .length - this.restColumn + 1)));\n\t}\n}\nconst where = (pre        , rowIndex         = lineIndex, columnNumber         = 0)         => sourceLines===NONE ? '' :\n\tsourcePath\n\t\t? `\\n    at (${sourcePath}:${rowIndex + 1}:${columnNumber})`\n\t\t: `${pre}line ${rowIndex + 1}: ${sourceLines[rowIndex]}`;\n\nconst done = ()       => {\n\tsourcePath = '';\n\tsourceLines = NONE;\n};\n\n/* nested (readable) */\n\nconst Whitespace = /[ \\t]/;\n\nconst PRE_WHITESPACE = /*#__PURE__*/newRegExp`\n\t^${Whitespace}+`.valueOf();\n\nconst { exec: VALUE_REST_exec } = /*#__PURE__*/newRegExp.s       `\n\t^\n\t(\n\t\t(?:\\d\\d\\d\\d-\\d\\d-\\d\\d \\d)?\n\t\t[\\w\\-+.:]+\n\t)\n\t${Whitespace}*\n\t(.*)\n\t$`.valueOf();\n\nconst { exec: LITERAL_STRING_exec } = /*#__PURE__*/newRegExp.s       `\n\t^\n\t'([^']*)'\n\t${Whitespace}*\n\t(.*)`.valueOf();\n\nconst { exec: MULTI_LINE_LITERAL_STRING_0_1_2 } = /*#__PURE__*/newRegExp.s           `\n\t^\n\t(.*?)\n\t'''('{0,2})\n\t${Whitespace}*\n\t(.*)`.valueOf();\nconst { exec: MULTI_LINE_LITERAL_STRING_0 } = /*#__PURE__*/newRegExp.s           `\n\t^\n\t(.*?)\n\t'''()\n\t${Whitespace}*\n\t(.*)`.valueOf();\nlet __MULTI_LINE_LITERAL_STRING_exec = MULTI_LINE_LITERAL_STRING_0;\n\nconst SYM_WHITESPACE = /*#__PURE__*/newRegExp.s`\n\t^\n\t.\n\t${Whitespace}*`.valueOf();\n\n\nconst Tag = /[^\\x00-\\x1F\"#'()<>[\\\\\\]`{}\\x7F]+/;\n\nconst { exec: KEY_VALUE_PAIR_exec } = /*#__PURE__*/newRegExp.s   `\n\t^\n\t${Whitespace}*\n\t=\n\t${Whitespace}*\n\t(?:\n\t\t<(${Tag})>\n\t\t${Whitespace}*\n\t)?\n\t(.*)\n\t$`.valueOf();\n\nconst { exec: _VALUE_PAIR_exec } = /*#__PURE__*/newRegExp.s       `\n\t^\n\t<(${Tag})>\n\t${Whitespace}*\n\t(.*)\n\t$`.valueOf();\n\nconst { exec: TAG_REST_exec } = /*#__PURE__*/newRegExp.s       `\n\t^\n\t<(${Tag})>\n\t${Whitespace}*\n\t(.*)\n\t$`.valueOf();\n\n/* optimized (avoid overflow or lost) */\n\nconst MULTI_LINE_BASIC_STRING = theRegExp(/[^\\\\\"]+|\\\\.?|\"(?!\"\")\"?/sy);\nconst MULTI_LINE_BASIC_STRING_exec_0_length = (_        )         => {\n\tlet lastIndex         = /*MULTI_LINE_BASIC_STRING.lastIndex = */0;\n\twhile ( MULTI_LINE_BASIC_STRING.test(_) ) { lastIndex = MULTI_LINE_BASIC_STRING.lastIndex; }\n\treturn lastIndex;\n};\n\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER_TAB______ = /[^\\\\\\x00-\\x08\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|[\\t ]*\\n[\\t\\n ]*|u[\\dA-Fa-f]{4}|U[\\dA-Fa-f]{8})/g;\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER__________ = /[^\\\\\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|[\\t ]*\\n[\\t\\n ]*|u[\\dA-Fa-f]{4}|U[\\dA-Fa-f]{8})/g;/// Tab\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER_DEL______ = /[^\\\\\\x00-\\x09\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\]|[\\t ]*\\n[\\t\\n ]*|u[\\dA-Fa-f]{4}|U[\\dA-Fa-f]{8})/g;/// Tab \\<ws>newline\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER_DEL_SLASH = /[^\\\\\\x00-\\x09\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\/]|[\\t ]*\\n[\\t\\n ]*|u[\\dA-Fa-f]{4}|U[\\dA-Fa-f]{8})/g;/// not \\<ws>newline\nlet __ESCAPED_EXCLUDE_CONTROL_CHARACTER = ESCAPED_EXCLUDE_CONTROL_CHARACTER_TAB______;\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER_test = (_        )          => !_.replace(__ESCAPED_EXCLUDE_CONTROL_CHARACTER, '');/// op?\n\nconst BASIC_STRING_TAB______ = theRegExp(/[^\\\\\"\\x00-\\x08\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[\\dA-Fa-f]{4}|U[\\dA-Fa-f]{8})/y);\nconst BASIC_STRING__________ = theRegExp(/[^\\\\\"\\x00-\\x08\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[\\dA-Fa-f]{4}|U[\\dA-Fa-f]{8})/y);/// Tab\nconst BASIC_STRING_DEL______ = theRegExp(/[^\\\\\"\\x00-\\x08\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\]|u[\\dA-Fa-f]{4}|U[\\dA-Fa-f]{8})/y);/// Tab\nconst BASIC_STRING_DEL_SLASH = theRegExp(/[^\\\\\"\\x00-\\x08\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\/]|u[\\dA-Fa-f]{4}|U[\\dA-Fa-f]{8})/y);/// Tab\nlet __BASIC_STRING = BASIC_STRING_DEL_SLASH;\nconst BASIC_STRING_exec_1_endIndex = (line        )         => {\n\tlet lastIndex         = __BASIC_STRING.lastIndex = 1;\n\twhile ( __BASIC_STRING.test(line) ) { lastIndex = __BASIC_STRING.lastIndex; }\n\tlastIndex!==line.length && line[lastIndex]==='\"' || throws(SyntaxError$1(`Bad basic string` + where(' at ')));\n\treturn lastIndex;\n};\n\nconst { test: IS_DOT_KEY } = theRegExp(/^[ \\t]*\\./);\nconst DOT_KEY = /^[ \\t]*\\.[ \\t]*/;\nconst { exec: BARE_KEY_STRICT } = theRegExp(/^[\\w-]+/);\nconst { exec: BARE_KEY_FREE } = theRegExp(/^[^ \\t#=[\\]'\".]+(?:[ \\t]+[^ \\t#=[\\]'\".]+)*/);\nlet __BARE_KEY_exec = BARE_KEY_FREE;\nconst { exec: LITERAL_KEY____ } = theRegExp(/^'[^'\\x00-\\x08\\x0B-\\x1F\\x7F]*'/);\nconst { exec: LITERAL_KEY_DEL } = theRegExp(/^'[^'\\x00-\\x08\\x0B-\\x1F]*'/);\nlet __LITERAL_KEY_exec = LITERAL_KEY_DEL;\nlet supportArrayOfTables = true;\n\nconst TABLE_DEFINITION_exec_groups = (lineRest        , parseKeys                                                                                                 )                                                                                                   => {\n\tconst asArrayItem          = lineRest[1]==='[';\n\tif ( asArrayItem ) {\n\t\tsupportArrayOfTables || throws(SyntaxError$1(`Array of Tables is not allowed before TOML v0.2` + where(', which at ')));\n\t\tlineRest = lineRest.slice(2);\n\t}\n\telse { lineRest = lineRest.slice(1); }\n\tlineRest = lineRest.replace(PRE_WHITESPACE, '');\n\tconst { leadingKeys, finalKey } = { lineRest } = parseKeys(lineRest);\n\tlineRest = lineRest.replace(PRE_WHITESPACE, '');\n\tlineRest && lineRest[0]===']' || throws(SyntaxError$1(`Table header is not closed` + where(', which is found at ')));\n\t( lineRest.length>1 ? lineRest[1]===']'===asArrayItem : !asArrayItem ) || throws(SyntaxError$1(`Square brackets of Table definition statement not match` + where(' at ')));\n\tlineRest = lineRest.slice(asArrayItem ? 2 : 1).replace(PRE_WHITESPACE, '');\n\tlet tag        ;\n\tif ( lineRest && lineRest[0]==='<' ) { ( { 1: tag, 2: lineRest } = TAG_REST_exec(lineRest) || throws(SyntaxError$1(`Bad tag` + where(' at '))) ); }\n\telse { tag = ''; }\n\treturn { leadingKeys, finalKey, asArrayItem, tag, lineRest };\n};\n\nconst KEY_VALUE_PAIR_exec_groups = ({ leadingKeys, finalKey, lineRest }                                                               )                                                                             => {\n\tconst { 1: tag = '' } = { 2: lineRest } = KEY_VALUE_PAIR_exec(lineRest) || throws(SyntaxError$1(`Keys must equal something` + where(', but missing at ')));\n\ttag || lineRest && lineRest[0]!=='#' || throws(SyntaxError$1(`Value can not be missing after euqal sign` + where(', which is found at ')));\n\treturn { leadingKeys, finalKey, tag, lineRest };\n};\n\nconst { test: CONTROL_CHARACTER_EXCLUDE_TAB____ } = theRegExp(/[\\x00-\\x08\\x0B-\\x1F\\x7F]/);\nconst { test: CONTROL_CHARACTER_EXCLUDE_TAB_DEL } = theRegExp(/[\\x00-\\x08\\x0B-\\x1F]/);\nlet __CONTROL_CHARACTER_EXCLUDE_test = CONTROL_CHARACTER_EXCLUDE_TAB____;\n\nconst switchRegExp = (specificationVersion        )       => {\n\tswitch ( specificationVersion ) {\n\t\tcase 1.0:\n\t\t\t__MULTI_LINE_LITERAL_STRING_exec = MULTI_LINE_LITERAL_STRING_0_1_2;\n\t\t\t__LITERAL_KEY_exec = LITERAL_KEY____;\n\t\t\t__CONTROL_CHARACTER_EXCLUDE_test = CONTROL_CHARACTER_EXCLUDE_TAB____;\n\t\t\t__ESCAPED_EXCLUDE_CONTROL_CHARACTER = ESCAPED_EXCLUDE_CONTROL_CHARACTER_TAB______;\n\t\t\t__BASIC_STRING = BASIC_STRING_TAB______;\n\t\t\t__BARE_KEY_exec = BARE_KEY_STRICT;\n\t\t\tsupportArrayOfTables = true;\n\t\t\tbreak;\n\t\tcase 0.5:\n\t\t\t__MULTI_LINE_LITERAL_STRING_exec = MULTI_LINE_LITERAL_STRING_0;\n\t\t\t__LITERAL_KEY_exec = LITERAL_KEY____;\n\t\t\t__CONTROL_CHARACTER_EXCLUDE_test = CONTROL_CHARACTER_EXCLUDE_TAB____;\n\t\t\t__ESCAPED_EXCLUDE_CONTROL_CHARACTER = ESCAPED_EXCLUDE_CONTROL_CHARACTER__________;\n\t\t\t__BASIC_STRING = BASIC_STRING__________;\n\t\t\t__BARE_KEY_exec = BARE_KEY_STRICT;\n\t\t\tsupportArrayOfTables = true;\n\t\t\tbreak;\n\t\tcase 0.4:\n\t\t\t__MULTI_LINE_LITERAL_STRING_exec = MULTI_LINE_LITERAL_STRING_0;\n\t\t\t__LITERAL_KEY_exec = LITERAL_KEY_DEL;\n\t\t\t__CONTROL_CHARACTER_EXCLUDE_test = CONTROL_CHARACTER_EXCLUDE_TAB_DEL;\n\t\t\t__ESCAPED_EXCLUDE_CONTROL_CHARACTER = ESCAPED_EXCLUDE_CONTROL_CHARACTER_DEL______;\n\t\t\t__BASIC_STRING = BASIC_STRING_DEL______;\n\t\t\t__BARE_KEY_exec = BARE_KEY_STRICT;\n\t\t\tsupportArrayOfTables = true;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t__MULTI_LINE_LITERAL_STRING_exec = MULTI_LINE_LITERAL_STRING_0;\n\t\t\t__LITERAL_KEY_exec = LITERAL_KEY_DEL;\n\t\t\t__CONTROL_CHARACTER_EXCLUDE_test = CONTROL_CHARACTER_EXCLUDE_TAB_DEL;\n\t\t\t__ESCAPED_EXCLUDE_CONTROL_CHARACTER = ESCAPED_EXCLUDE_CONTROL_CHARACTER_DEL_SLASH;\n\t\t\t__BASIC_STRING = BASIC_STRING_DEL_SLASH;\n\t\t\t__BARE_KEY_exec = BARE_KEY_FREE;\n\t\t\tsupportArrayOfTables = false;\n\t}\n};\n\nconst NUM = /*#__PURE__*/newRegExp`\n\t(?:\n\t\t0\n\t\t(?:\n\t\t\tb[01][_01]*\n\t\t|\n\t\t\to[0-7][_0-7]*\n\t\t|\n\t\t\tx[\\dA-Fa-f][_\\dA-Fa-f]*\n\t\t|\n\t\t\t(?:\\.\\d[_\\d]*)?(?:[Ee]-?\\d[_\\d]*)?\n\t\t)\n\t|\n\t\t[1-9][_\\d]*\n\t\t(?:\\.\\d[_\\d]*)?(?:[Ee]-?\\d[_\\d]*)?\n\t|\n\t\tinf\n\t|\n\t\tnan\n\t)\n`.valueOf();\nconst { test: IS_AMAZING } = /*#__PURE__*/newRegExp`\n\t^(?:\n\t\t-?${NUM}\n\t\t(?:-${NUM})*\n\t|\n\t\ttrue\n\t|\n\t\tfalse\n\t)$\n`.valueOf();\nconst { test: BAD_DXOB } = /*#__PURE__*/newRegExp`_(?![\\dA-Fa-f])`.valueOf();\nconst isAmazing = (keys        )          => IS_AMAZING(keys) && !BAD_DXOB(keys);\n\nlet mustScalar          = true;\n\nlet ARGS_MODE                  = '';\n\n/* options */\n\nlet useWhatToJoinMultilineString                = null;\nlet usingBigInt                 = true;\nlet IntegerMinNumber         = 0;\nlet IntegerMaxNumber         = 0;\n\n              \n\n                                           \n\t                 \n\t                \n\t                 \n\t                \n\t               \n\t                \n\t                  \n\t                 \n\t                  \n\t                   \n  \nconst ANY       = {\n\ttest: () => true,\n};\n                       \n\t                                                    \n \nconst Keys = class KeysRegExp extends RegExp$1                 {\n\t                                   \n\tconstructor (keys                   ) {\n\t\tsuper(`^${groupify(keys)}$`);\n\t\tlet maxLength = -1;\n\t\tfor ( let index = keys.length; index; ) {\n\t\t\tconst { length } = keys[--index] ;\n\t\t\tif ( length>maxLength ) { maxLength = length; }\n\t\t}\n\t\tthis.lastIndex = maxLength+1;\n\t\treturn this;\n\t}\n\t         test (                  key        )          {\n\t\treturn key.length<this.lastIndex && super.test(key);\n\t}\n};\nconst isKeys = /*#__PURE__*/isPrototypeOf.bind(/*#__PURE__*/freeze(Keys.prototype))                                               ;\nlet KEYS$1       = ANY;\nlet preserveLiteral         ;\nlet zeroDatetime         ;\nlet inlineTable         ;\nlet moreDatetime         ;\nlet disallowEmptyKey         ;\n//export const xob :boolean = true;\nlet sError         ;\nlet sFloat         ;\n                               \nlet Table                  ;\nlet allowLonger         ;\nlet enableNull         ;\nlet allowInlineTableMultilineAndTrailingCommaEvenNoComma         ;\nlet preserveComment         ;\nlet disableDigit         ;\nconst arrayTypes = new WeakMap$1           ();\nconst arrayTypes_get = /*#__PURE__*/get.bind(arrayTypes)                                  ;\nconst arrayTypes_set = /*#__PURE__*/set.bind(arrayTypes)                                     ;\n                                  \nconst As = ()     => {\n\tconst as = (array       )        => {\n\t\tconst got = arrayTypes_get(array);\n\t\tgot\n\t\t\t? got===as || throws(TypeError$1(`Types in Array must be same` + where('. Check ')))\n\t\t\t: arrayTypes_set(array, as);\n\t\treturn array;\n\t};\n\treturn as;\n};\nconst AS_TYPED = {\n\tasNulls: As(),\n\tasStrings: As(),\n\tasTables: As(),\n\tasArrays: As(),\n\tasBooleans: As(),\n\tasFloats: As(),\n\tasIntegers: As(),\n\tasOffsetDateTimes: As(),\n\tasLocalDateTimes: As(),\n\tasLocalDates: As(),\n\tasLocalTimes: As(),\n};\nconst asMixed     = (array       )        => array;\nlet\n\tasNulls    ,\n\tasStrings    ,\n\tasTables    ,\n\tasArrays    ,\n\tasBooleans    ,\n\tasFloats    ,\n\tasIntegers    ,\n\tasOffsetDateTimes    ,\n\tasLocalDateTimes    ,\n\tasLocalDates    ,\n\tasLocalTimes    ;\n\n                  \n\n                                            \nlet processor             = null;\nlet each              = null;\n           \n\t                                                                                                      \n\t                                                                                                      \n\t                                                                                                      \n \nconst collect_on = (tag        , array              , table              , key         )       => {\n\tconst _each = create$1(NULL)                                                                                                 ;\n\t_each._linked = each;\n\t_each.tag = tag;\n\tif ( table ) {\n\t\t_each.table = table;\n\t\t_each.key = key ;\n\t}\n\tif ( array ) {\n\t\t_each.array = array;\n\t\t_each.index = array.length;\n\t}\n\teach = _each;\n};\nconst collect_off = ()        => { throw throws(SyntaxError$1(`xOptions.tag is not enabled, but found tag syntax` + where(' at '))); };\nlet collect                                                                                                                          = collect_off;\n                                                      \nconst Process = ()          => {\n\tif ( each ) {\n\t\tconst _processor = processor ;\n\t\tlet _each              = each;\n\t\teach = null;\n\t\treturn ()       => {\n\t\t\tconst processor = _processor;\n\t\t\tlet each              = _each ;\n\t\t\t_each = null;\n\t\t\tdo { processor(each); }\n\t\t\twhile ( each = each._linked );\n\t\t};\n\t}\n\treturn null;\n};\n\n/* use & clear */\n\nconst clear = ()       => {\n\tKEYS$1 = ANY;\n\tuseWhatToJoinMultilineString = processor = each = null;\n\tzeroDatetime = false;\n};\n\nconst use = (specificationVersion         , multilineStringJoiner         , useBigInt         , keys         , xOptions          , argsMode                 )       => {\n\t\n\tARGS_MODE = argsMode;\n\t\n\tlet mixed         ;\n\tswitch ( specificationVersion ) {\n\t\tcase 1.0:\n\t\t\tmustScalar = mixed = moreDatetime = sFloat = inlineTable = true;\n\t\t\tzeroDatetime = disallowEmptyKey = false;\n\t\t\tbreak;\n\t\tcase 0.5:\n\t\t\tmustScalar = moreDatetime = sFloat = inlineTable = true;\n\t\t\tmixed = zeroDatetime = disallowEmptyKey = false;\n\t\t\tbreak;\n\t\tcase 0.4:\n\t\t\tmustScalar = disallowEmptyKey = inlineTable = true;\n\t\t\tmixed = zeroDatetime = moreDatetime = sFloat = false;\n\t\t\tbreak;\n\t\tcase 0.3:\n\t\t\tmustScalar = disallowEmptyKey = true;\n\t\t\tmixed = zeroDatetime = moreDatetime = sFloat = inlineTable = false;\n\t\t\tbreak;\n\t\tcase 0.2:\n\t\t\tzeroDatetime = disallowEmptyKey = true;\n\t\t\tmustScalar = mixed = moreDatetime = sFloat = inlineTable = false;\n\t\t\tbreak;\n\t\tcase 0.1:\n\t\t\tzeroDatetime = disallowEmptyKey = true;\n\t\t\tmustScalar = mixed = moreDatetime = sFloat = inlineTable = false;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow RangeError$1(`TOML.parse(,specificationVersion)`);\n\t}\n\tswitchRegExp(specificationVersion);\n\t\n\tif ( typeof multilineStringJoiner==='string' ) { useWhatToJoinMultilineString = multilineStringJoiner; }\n\telse if ( multilineStringJoiner===undefined$1 ) { useWhatToJoinMultilineString = null; }\n\telse { throw TypeError$1(`TOML.parse(${ARGS_MODE ? `${ARGS_MODE}multilineStringJoiner` : `,{ joiner }`})`); }\n\t\n\tif ( useBigInt===undefined$1 || useBigInt===true ) { usingBigInt = true; }\n\telse if ( useBigInt===false ) { usingBigInt = false; }\n\telse {\n\t\tif ( typeof useBigInt!=='number' ) { throw TypeError$1(`TOML.parse(${ARGS_MODE ? `${ARGS_MODE},useBigInt` : `,{ bigint }`})`); }\n\t\tif ( !isSafeInteger(useBigInt) ) { throw RangeError$1(`TOML.parse(${ARGS_MODE ? `${ARGS_MODE},useBigInt` : `,{ bigint }`})`); }\n\t\tusingBigInt = null;\n\t\tuseBigInt>=0\n\t\t\t? IntegerMinNumber = -( IntegerMaxNumber = useBigInt )\n\t\t\t: IntegerMaxNumber = -( IntegerMinNumber = useBigInt ) - 1;\n\t}\n\tif ( !BigInt$1 && usingBigInt!==false ) { throw Error$1(`Can't work without TOML.parse(${ARGS_MODE ? `${ARGS_MODE},useBigInt` : `,{ bigint }`}) being set to false, because the host doesn't have BigInt support`); }\n\t\n\tif ( keys==null ) { KEYS$1 = ANY; }\n\telse {\n\t\tif ( !isKeys(keys) ) { throw TypeError$1(`TOML.parse(,{ keys })`); }\n\t\tKEYS$1 = keys;\n\t}\n\t\n\tif ( xOptions==null ) {\n\t\tTable = PlainTable;\n\t\tsError = allowLonger = enableNull = allowInlineTableMultilineAndTrailingCommaEvenNoComma = false;\n\t\tcollect = collect_off;\n\t}\n\telse if ( typeof xOptions!=='object' ) {\n\t\tthrow TypeError$1(`TOML.parse(${ARGS_MODE ? `${ARGS_MODE},,xOptions` : `,{ x }`})`);\n\t}\n\telse {\n\t\tconst { order, longer, exact, null: _null, multi, comment, string, literal, tag, ...unknown } = xOptions;\n\t\tconst unknownNames = getOwnPropertyNames(unknown);\n\t\tif ( unknownNames.length ) { throw TypeError$1(`TOML.parse(${ARGS_MODE ? `${ARGS_MODE},,{ ${unknownNames.join(', ')} }` : `,{ x: { ${unknownNames.join(', ')} } }`})`); }\n\t\tTable = order ? OrderedTable : PlainTable;\n\t\tallowLonger = !longer;\n\t\tsError = !!exact;\n\t\tenableNull = !!_null;\n\t\tallowInlineTableMultilineAndTrailingCommaEvenNoComma = !!multi;\n\t\tpreserveComment = !!comment;\n\t\tdisableDigit = !!string;\n\t\tpreserveLiteral = !!literal;\n\t\tif ( tag ) {\n\t\t\tif ( typeof tag!=='function' ) { throw TypeError$1(`TOML.parse(${ARGS_MODE ? `${ARGS_MODE},,{ tag }` : `,{ x: { tag } }`})`); }\n\t\t\tif ( !mixed ) { throw TypeError$1(`TOML.parse(${ARGS_MODE ? `${ARGS_MODE},,xOptions` : `,{ x }`}) xOptions.tag needs at least TOML 1.0 to support mixed type array`); }\n\t\t\tprocessor = tag;\n\t\t\tcollect = collect_on;\n\t\t}\n\t\telse { collect = collect_off; }\n\t}\n\t\n\tmixed\n\t\t? asNulls = asStrings = asTables = asArrays = asBooleans = asFloats = asIntegers = asOffsetDateTimes = asLocalDateTimes = asLocalDates = asLocalTimes = asMixed\n\t\t: ( { asNulls, asStrings, asTables, asArrays, asBooleans, asFloats, asIntegers, asOffsetDateTimes, asLocalDateTimes, asLocalDates, asLocalTimes } = AS_TYPED );\n\t\n};\n\nconst isView = ArrayBuffer.isView;\n\nconst isArrayBuffer = (\n\t/* j-globals: class.isArrayBuffer (internal) */\n\t/*#__PURE__*/ function () {\n\t\tif ( typeof ArrayBuffer==='function' ) {\n\t\t\tvar byteLength_apply = apply.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);\n\t\t\treturn function isArrayBuffer (value) {\n\t\t\t\ttry { byteLength_apply(value); }\n\t\t\t\tcatch (error) { return false; }\n\t\t\t\treturn true;\n\t\t\t};\n\t\t}\n\t\treturn function isArrayBuffer () { return false; };\n\t}()\n\t/* j-globals: class.isArrayBuffer (internal) */\n);\n\nconst TextDecoder$1 = TextDecoder;\n\nconst Symbol$1 = Symbol;\n\nconst previous                = Symbol$1('previous')       ;\n\n              \n\t                                \n\t\t                                                  \n\t\t                                                  \n\t                  \n  \n\nconst x =     (rootStack      )    => {\n\tlet stack        = rootStack;\n\tlet result = stack.next();\n\tif ( !result.done ) {\n\t\tresult.value[previous] = stack;\n\t\tresult = ( stack = result.value ).next();\n\t\tfor ( ; ; ) {\n\t\t\tif ( result.done ) {\n\t\t\t\tif ( stack===rootStack ) { break; }\n\t\t\t\tstack = stack[previous] ;\n\t\t\t\tresult = stack.next(result.value);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.value[previous] = stack;\n\t\t\t\tresult = ( stack = result.value ).next();\n\t\t\t}\n\t\t}\n\t}\n\treturn result.value;\n};\n\nconst _literal                = Symbol$1('_literal')       ;\n\nconst LiteralObject =                                                             (literal         , value                                   ) => {\n\tconst object = Object$1(value)                           ;\n\tobject[_literal] = literal;\n\treturn object;\n};\n\nconst arrays = new WeakSet$1       ();\nconst arrays_add = /*#__PURE__*/add.bind(arrays);\nconst isArray = /*#__PURE__*/has.bind(arrays)                                  ;\n\nconst OF_TABLES = false;\nconst STATICALLY = true;\nconst staticalArrays = new WeakSet$1       ();\nconst staticalArrays_add = /*#__PURE__*/add.bind(staticalArrays);\nconst isStatic = /*#__PURE__*/has.bind(staticalArrays)                             ;\n\nconst newArray = (isStatic         )        => {\n\tconst array        = [];\n\tarrays_add(array);\n\tisStatic && staticalArrays_add(array);\n\treturn array;\n};\n\nconst NativeDate = Date;\n\nconst parse$2 = Date.parse;\n\nconst preventExtensions = Object.preventExtensions;\n\nconst getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors;\n\nconst defineProperties = (\n\t/* j-globals: null.defineProperties (internal) */\n\tfunction defineProperties (object, descriptorMap) {\n\t\tvar created = create$1(NULL);\n\t\tvar names = keys(descriptorMap);\n\t\tfor ( var length = names.length, index = 0; index<length; ++index ) {\n\t\t\tvar name = names[index];\n\t\t\tcreated[name] = Descriptor(descriptorMap[name]);\n\t\t}\n\t\tif ( getOwnPropertySymbols ) {\n\t\t\tvar symbols = getOwnPropertySymbols(descriptorMap);\n\t\t\tfor ( length = symbols.length, index = 0; index<length; ++index ) {\n\t\t\t\tvar symbol = symbols[index];\n\t\t\t\tif ( isEnum(descriptorMap, symbol) ) { created[symbol] = Descriptor(descriptorMap[symbol]); }\n\t\t\t}\n\t\t}\n\t\treturn Object_defineProperties(object, created);\n\t}\n\t/* j-globals: null.defineProperties (internal) */\n);\n\nconst fpc =                      (c   )    => {\n\tfreeze(freeze(c).prototype);\n\treturn c;\n};\n\nconst _29_ = /(?:0[1-9]|1\\d|2\\d)/;\nconst _30_ = /(?:0[1-9]|[12]\\d|30)/;\nconst _31_ = /(?:0[1-9]|[12]\\d|3[01])/;\nconst _23_ = /(?:[01]\\d|2[0-3])/;\nconst _59_ = /[0-5]\\d/;\n\nconst YMD = /*#__PURE__*/newRegExp`\n\t\\d\\d\\d\\d-\n\t(?:\n\t\t0\n\t\t(?:\n\t\t\t[13578]-${_31_}\n\t\t\t|\n\t\t\t[469]-${_30_}\n\t\t\t|\n\t\t\t2-${_29_}\n\t\t)\n\t\t|\n\t\t1\n\t\t(?:\n\t\t\t[02]-${_31_}\n\t\t\t|\n\t\t\t1-${_30_}\n\t\t)\n\t)\n`.valueOf();\n\nconst HMS = /*#__PURE__*/newRegExp`\n\t${_23_}:${_59_}:${_59_}\n`.valueOf();\n\nconst OFFSET$ = /(?:[Zz]|[+-]\\d\\d:\\d\\d)$/;\n\nconst { exec: Z_exec } = theRegExp           (/(([+-])\\d\\d):(\\d\\d)$/);\n\nconst { exec: OFFSET_DATETIME_exec } = /*#__PURE__*/newRegExp`\n\t^\n\t${YMD}\n\t[Tt ]\n\t${HMS}\n\t(?:\\.\\d{1,3}(\\d*?)0*)?\n\t(?:[Zz]|[+-]${_23_}:${_59_})\n\t$`.valueOf();\n\nconst { exec: OFFSET_DATETIME_ZERO_exec } = /*#__PURE__*/newRegExp`\n\t^\n\t${YMD}\n\t[Tt ]\n\t${HMS}\n\t()\n\t[Zz]\n\t$`.valueOf();\n\nconst { test: IS_LOCAL_DATETIME } = /*#__PURE__*/newRegExp`\n\t^\n\t${YMD}\n\t[Tt ]\n\t${HMS}\n\t(?:\\.\\d+)?\n\t$`.valueOf();\n\nconst { test: IS_LOCAL_DATE } = /*#__PURE__*/newRegExp`\n\t^\n\t${YMD}\n\t$`.valueOf();\n\nconst { test: IS_LOCAL_TIME } = /*#__PURE__*/newRegExp`\n\t^\n\t${HMS}\n\t(?:\\.\\d+)?\n\t$`.valueOf();\n\nconst T = /[ t]/;\nconst DELIMITER_DOT = /[-T:.]/g;\nconst DOT_ZERO = /\\.?0+$/;\nconst ZERO = /\\.(\\d*?)0+$/;\nconst zeroReplacer = (match        , p1        ) => p1;\n\nconst Datetime = /*#__PURE__*/( () => {\n\tconst Datetime = function (            ) {\n\t\treturn this;\n\t}                                 ;//expression? :undefined, literal? :undefined, dotValue? :undefined\n\t//                                > .setTime()\n\t//                                > .getTime() : Date.parse('T')\n\t// [Symbol.toPrimitive]('number') > .valueOf()\n\t//                                > .toISOString()\n\tconst descriptors = Null$1(null)                                         ;\n\t{\n\t\tconst descriptor = Null$1(null);\n\t\tfor ( const key of ownKeys(NativeDate.prototype                                         ) ) {\n\t\t\tkey==='constructor' ||\n\t\t\tkey==='toJSON' ||\n\t\t\t( descriptors[key] = descriptor );\n\t\t}\n\t}\n\tDatetime.prototype = preventExtensions(create$1(NativeDate.prototype, descriptors));\n\treturn freeze(Datetime);\n} )();\n\n                                        \n                                      \n                                      \n                                      \n                                      \n                                      \n                                       \n                                     \n                                            \n                             \n                             \n\nconst Value = (ISOString        )        => ISOString.replace(ZERO, zeroReplacer).replace(DELIMITER_DOT, '');\n\nconst d = /./gs;\nconst d2u = (d        ) => '\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009'[d                                                             ] ;\nconst ValueOFFSET = (time        , more        )        => time<0\n\t? ( '' + ( time + 62167305540000 ) ).replace(d, d2u).padStart(14, '\\u2000') + more.replace(d, d2u) + time\n\t: more\n\t\t? ( time + '.' ).padStart(16, '0') + more\n\t\t: ( '' + time ).padStart(15, '0');\n\nconst validateLeap = (literal        )          => {\n\tif ( literal.startsWith('02-29', 5) ) {\n\t\tconst year         = +literal.slice(0, 4);\n\t\treturn (\n\t\t\tyear & 0b11 ? false :\n\t\t\t\tyear%100 ? true :\n\t\t\t\t\tyear%400 ? false :\n\t\t\t\t\t\tyear%3200 ? true :\n\t\t\t\t\t\t\tfalse\n\t\t);\n\t}\n\treturn true;\n};\nconst { test: VALIDATE_LEAP } = /*#__PURE__*/newRegExp.s`^.....(?:06.30|12.31).23:59:59`.valueOf();\n\nconst DATE$1             = /*#__PURE__*/defineProperties(new NativeDate(0), /*#__PURE__*/getOwnPropertyDescriptors(NativeDate.prototype));\n\nconst OffsetDateTime_ISOString                = Symbol$1('OffsetDateTime_ISOString')       ;\nconst OffsetDateTime_value                = Symbol$1('OffsetDateTime_value')       ;\nconst OffsetDateTime_use = (that                                     , $         = 0) => {\n\tDATE$1.setTime(+that[OffsetDateTime_value] + $);\n\treturn DATE$1;\n};\n/*const OffsetDateTime_get = (that :InstanceType<typeof OffsetDateTime>, start :number, end :number) => +that[OffsetDateTime_ISOString].slice(start, end);\nconst OffsetDateTime_set = (that :InstanceType<typeof OffsetDateTime>, start :number, end :number, value :number, reserveMore :boolean) => {\n\tif ( end ) {\n\t\tconst string = '' + value;\n\t\tconst size = end - start;\n\t\tif ( string.length>size ) { throw RangeError(); }///\n\t\tthat[OffsetDateTime_ISOString] = that[OffsetDateTime_ISOString].slice(0, start) + string.padStart(size, '0') + that[OffsetDateTime_ISOString].slice(end);\n\t}\n\tconst time = parse(that[OffsetDateTime_ISOString]);\n\treturn that[OffsetDateTime_value] = ValueOFFSET(time, that[OffsetDateTime_value].includes('-')\n\t\t? that[OffsetDateTime_value].slice(14, that[OffsetDateTime_value].indexOf('-', 14))\n\t\t: that[OffsetDateTime_value].slice(15)\n\t);///time\n};*///\nconst OffsetDateTime = /*#__PURE__*/fpc(class OffsetDateTime extends Datetime {\n\t\n\t[OffsetDateTime_ISOString]        ;\n\t[OffsetDateTime_value]       ;\n\t\n\t         valueOf (                    )        { return this[OffsetDateTime_value]; }\n\ttoISOString (                    )         { return this[OffsetDateTime_ISOString]; }\n\t\n\tconstructor (literal        ) {\n\t\tvalidateLeap(literal) || throws(SyntaxError$1(`Invalid Offset Date-Time ${literal}` + where(' at ')));\n\t\tconst with60 = literal.startsWith('60', 17);\n\t\tlet without60 = with60 ? literal.slice(0, 17) + '59' + literal.slice(19) : literal;\n\t\tconst { 1: more = '' } = ( zeroDatetime ? OFFSET_DATETIME_ZERO_exec(without60) : OFFSET_DATETIME_exec(without60) ) || throws(SyntaxError$1(`Invalid Offset Date-Time ${literal}` + where(' at ')));\n\t\tconst time = parse$2(without60 = without60.replace(T, 'T').replace('z', 'Z'));\n\t\tif ( with60 ) {\n\t\t\tDATE$1.setTime(time);\n\t\t\tVALIDATE_LEAP(DATE$1.toISOString()) || throws(SyntaxError$1(`Invalid Offset Date-Time ${literal}` + where(' at ')));\n\t\t}\n\t\tsuper();\n\t\tthis[OffsetDateTime_ISOString] = without60;\n\t\tthis[OffsetDateTime_value] = ValueOFFSET(time, more);\n\t\treturn this;\n\t}\n\t\n\tgetUTCFullYear (                    )           { return OffsetDateTime_use(this).getUTCFullYear(); }\n\t///get year () :FullYear { return OffsetDateTime_get(this, 0, 4); }\n\t///set year (value :FullYear) { OffsetDateTime_set(this, 0, 4, value, true); }\n\tgetUTCMonth (                    )        { return OffsetDateTime_use(this).getUTCMonth(); }\n\t///get month () { return OffsetDateTime_get(this, 5, 7); }\n\t///set month (value) { OffsetDateTime_set(this, 5, 7, value, true); }\n\tgetUTCDate (                    )       { return OffsetDateTime_use(this).getUTCDate(); }\n\t///get day () :Date { return OffsetDateTime_get(this, 8, 10); }\n\t///set day (value :Date) { OffsetDateTime_set(this, 8, 10, value, true); }\n\t\n\tgetUTCHours (                    )        { return OffsetDateTime_use(this).getUTCHours(); }\n\t///get hour () :Hours { return OffsetDateTime_get(this, 11, 13); }\n\t///set hour (value :Hours) { OffsetDateTime_set(this, 11, 13, value, true); }\n\tgetUTCMinutes (                    )          { return OffsetDateTime_use(this).getUTCMinutes(); }\n\t///get minute () :Minutes { return OffsetDateTime_get(this, 14, 16); }\n\t///set minute (value :Minutes) { OffsetDateTime_set(this, 14, 16, value, true); }\n\tgetUTCSeconds (                    )          { return OffsetDateTime_use(this).getUTCSeconds(); }\n\t///get second () :Seconds { return OffsetDateTime_get(this, 17, 19); }\n\t///set second (value :Seconds) { OffsetDateTime_set(this, 17, 19, value, true); }\n\tgetUTCMilliseconds (                    )               { return OffsetDateTime_use(this).getUTCMilliseconds(); }///\n\t///get millisecond () :Milliseconds { return this[OffsetDateTime_value]%1000; }///\n\t/*set millisecond (value :Milliseconds) {\n\t\tthis[OffsetDateTime_ISOString] = this[OffsetDateTime_ISOString].slice(0, 19) + ( value ? ( '.' + ( '' + value ).padStart(3, '0') ).replace(DOT_ZERO, '') : '' ) + this[OffsetDateTime_ISOString].slice(this[OffsetDateTime_ISOString].search(OFFSET$));\n\t\tOffsetDateTime_set(this, 0, 0, 0, false);\n\t}*///\n\t///get microsecond () :Milliseconds\n\t///set microsecond (value :Milliseconds)\n\t///get nanosecond () :Milliseconds\n\t///set nanosecond (value :Milliseconds)\n\t\n\tgetUTCDay (                    )      { return OffsetDateTime_use(this).getUTCDay(); }\n\t///get dayOfWeek () { return OffsetDateTime_use(this, this.getTimezoneOffset()*60000).getUTCDay() || 7; }\n\tgetTimezoneOffset (                    )                 {\n\t\tconst z = Z_exec(this[OffsetDateTime_ISOString]);\n\t\treturn z ? +z[1]*60 + +( z[2] + z[3] ) : 0;\n\t}\n\t///get offset () { return this[OffsetDateTime_ISOString].endsWith('Z') ? 'Z' : this[OffsetDateTime_ISOString].slice(-6); }\n\t/*set offset (value) {\n\t\tthis[OffsetDateTime_ISOString] = this[OffsetDateTime_ISOString].slice(0, this[OffsetDateTime_ISOString].endsWith('Z') ? -1 : -6) + value;\n\t\tOffsetDateTime_set(this, 0, 0, 0, true);\n\t}*///\n\tgetTime (                    )       { return floor(+this[OffsetDateTime_value]); }///\n\t/*setTime (this :OffsetDateTime, value :Time) :void {\n\t\tvalue = DATE.setTime(value);\n\t\tconst z = Z_exec(this[OffsetDateTime_ISOString]);\n\t\tDATE.setTime(value + ( z ? +z[1]*60 + +( z[2] + z[3] ) : 0 )*60000);\n\t\tthis[OffsetDateTime_ISOString] = z ? DATE.toISOString().slice(0, -1) + z[0] : DATE.toISOString();\n\t\tthis[OffsetDateTime_value] = ValueOFFSET(value, '');\n\t\t///return value;\n\t}*/\n\t\n});\n\nconst LocalDateTime_ISOString                = Symbol$1('LocalDateTime_ISOString')       ;\nconst LocalDateTime_value                = Symbol$1('LocalDateTime_value')       ;\nconst LocalDateTime_get = (that                                    , start        , end        ) => +that[LocalDateTime_ISOString].slice(start, end);\nconst LocalDateTime_set = (that                                    , start        , end        , value        )       => {\n\tconst string = '' + value;\n\tconst size = end - start;\n\tif ( string.length>size ) { throw RangeError$1(); }///\n\tthat[LocalDateTime_value] = Value(\n\t\tthat[LocalDateTime_ISOString] = that[LocalDateTime_ISOString].slice(0, start) + string.padStart(size, '0') + that[LocalDateTime_ISOString].slice(end)\n\t);\n};\nconst LocalDateTime = /*#__PURE__*/fpc(class LocalDateTime extends Datetime {\n\t\n\t[LocalDateTime_ISOString]        ;\n\t[LocalDateTime_value]       ;\n\t\n\t         valueOf (                   )        { return this[LocalDateTime_value]; }\n\ttoISOString (                   )         { return this[LocalDateTime_ISOString]; }\n\t\n\tconstructor (literal        ) {\n\t\tIS_LOCAL_DATETIME(literal) && validateLeap(literal) || throws(SyntaxError$1(`Invalid Local Date-Time ${literal}` + where(' at ')));\n\t\tsuper();\n\t\tthis[LocalDateTime_value] = Value(\n\t\t\tthis[LocalDateTime_ISOString] = literal.replace(T, 'T')\n\t\t);\n\t\treturn this;\n\t}\n\t\n\tgetFullYear (                   )           { return LocalDateTime_get(this, 0, 4); }\n\tsetFullYear (                     value          )       { LocalDateTime_set(this, 0, 4, value); }\n\tgetMonth (                   )        { return LocalDateTime_get(this, 5, 7) - 1; }\n\tsetMonth (                     value       )       { LocalDateTime_set(this, 5, 7, value + 1); }\n\tgetDate (                   )       { return LocalDateTime_get(this, 8, 10); }\n\tsetDate (                     value      )       { LocalDateTime_set(this, 8, 10, value); }\n\t\n\tgetHours (                   )        { return LocalDateTime_get(this, 11, 13); }\n\tsetHours (                     value       )       { LocalDateTime_set(this, 11, 13, value); }\n\tgetMinutes (                   )          { return LocalDateTime_get(this, 14, 16); }\n\tsetMinutes (                     value         )       { LocalDateTime_set(this, 14, 16, value); }\n\tgetSeconds (                   )          { return LocalDateTime_get(this, 17, 19); }\n\tsetSeconds (                     value         )       { LocalDateTime_set(this, 17, 19, value); }\n\tgetMilliseconds (                   )               { return +this[LocalDateTime_value].slice(14, 17).padEnd(3, '0'); }///\n\tsetMilliseconds (                     value              )       {\n\t\tthis[LocalDateTime_value] = Value(\n\t\t\tthis[LocalDateTime_ISOString] = this[LocalDateTime_ISOString].slice(0, 19) + ( value ? ( '.' + ( '' + value ).padStart(3, '0') ).replace(DOT_ZERO, '') : '' )\n\t\t);\n\t}\n\t\n});\n\nconst LocalDate_ISOString                = Symbol$1('LocalDate_ISOString')       ;\nconst LocalDate_value                = Symbol$1('LocalDate_value')       ;\nconst LocalDate_get = (that                                , start        , end        ) => +that[LocalDate_ISOString].slice(start, end);\nconst LocalDate_set = (that                                , start        , end        , value        )       => {\n\tconst string = '' + value;\n\tconst size = end - start;\n\tif ( string.length>size ) { throw RangeError$1(); }///\n\tthat[LocalDate_value] = Value(\n\t\tthat[LocalDate_ISOString] = that[LocalDate_ISOString].slice(0, start) + string.padStart(size, '0') + that[LocalDate_ISOString].slice(end)\n\t);\n};\nconst LocalDate = /*#__PURE__*/fpc(class LocalDate extends Datetime {\n\t\n\t[LocalDate_ISOString]        ;\n\t[LocalDate_value]       ;\n\t\n\t         valueOf (               )        { return this[LocalDate_value]; }\n\ttoISOString (               )         { return this[LocalDate_ISOString]; }\n\t\n\tconstructor (literal        ) {\n\t\tIS_LOCAL_DATE(literal) && validateLeap(literal) || throws(SyntaxError$1(`Invalid Local Date ${literal}` + where(' at ')));\n\t\tsuper();\n\t\tthis[LocalDate_value] = Value(\n\t\t\tthis[LocalDate_ISOString] = literal\n\t\t);\n\t\treturn this;\n\t}\n\t\n\tgetFullYear (               )           { return LocalDate_get(this, 0, 4); }\n\tsetFullYear (                 value          )       { LocalDate_set(this, 0, 4, value); }\n\tgetMonth (               )        { return LocalDate_get(this, 5, 7) - 1; }\n\tsetMonth (                 value       )       { LocalDate_set(this, 5, 7, value + 1); }\n\tgetDate (               )       { return LocalDate_get(this, 8, 10); }\n\tsetDate (                 value      )       { LocalDate_set(this, 8, 10, value); }\n\t\n});\n\nconst LocalTime_ISOString                = Symbol$1('LocalTime_ISOString')       ;\nconst LocalTime_value                = Symbol$1('LocalTime_value')       ;\nconst LocalTime_get = (that                                , start        , end        ) => +that[LocalTime_ISOString].slice(start, end);\nconst LocalTime_set = (that                                , start        , end        , value        )       => {\n\tconst string = '' + value;\n\tconst size = end - start;\n\tif ( string.length>size ) { throw RangeError$1(); }///\n\tthat[LocalTime_value] = Value(\n\t\tthat[LocalTime_ISOString] = that[LocalTime_ISOString].slice(0, start) + string.padStart(2, '0') + that[LocalTime_ISOString].slice(end)\n\t);\n};\nconst LocalTime = /*#__PURE__*/fpc(class LocalTime extends Datetime {\n\t\n\t[LocalTime_ISOString]        ;\n\t[LocalTime_value]       ;\n\t\n\t         valueOf (               )        { return this[LocalTime_value]; }\n\ttoISOString (               )         { return this[LocalTime_ISOString]; }\n\t\n\tconstructor (literal        ) {\n\t\tIS_LOCAL_TIME(literal) || throws(SyntaxError$1(`Invalid Local Time ${literal}` + where(' at ')));\n\t\tsuper();\n\t\tthis[LocalTime_value] = Value(\n\t\t\tthis[LocalTime_ISOString] = literal\n\t\t);\n\t\treturn this;\n\t}\n\t\n\tgetHours (               )        { return LocalTime_get(this, 0, 2); }\n\tsetHours (                 value       )       { LocalTime_set(this, 0, 2, value); }\n\tgetMinutes (               )          { return LocalTime_get(this, 3, 5); }\n\tsetMinutes (                 value         )       { LocalTime_set(this, 3, 5, value); }\n\tgetSeconds (               )          { return LocalTime_get(this, 6, 8); }\n\tsetSeconds (                 value         )       { LocalTime_set(this, 6, 8, value); }\n\tgetMilliseconds (               )               { return +this[LocalTime_value].slice(6, 9).padEnd(3, '0'); }///\n\tsetMilliseconds (                 value              )       {\n\t\tthis[LocalTime_value] = Value(\n\t\t\tthis[LocalTime_ISOString] = this[LocalTime_ISOString].slice(0, 8) + ( value ? ( '.' + ( '' + value ).padStart(3, '0') ).replace(DOT_ZERO, '') : '' )\n\t\t);\n\t}\n\t\n});\n\nconst parseInt$1 = parseInt;\n\nconst fromCodePoint = String.fromCodePoint;\n\nconst ESCAPED_IN_SINGLE_LINE = /[^\\\\]+|\\\\(?:[\\\\\"btnfr/]|u.{4}|U.{8})/gs;\nconst ESCAPED_IN_MULTI_LINE = /[^\\n\\\\]+|\\n|\\\\(?:[\\t ]*\\n[\\t\\n ]*|[\\\\\"btnfr/]|u.{4}|U.{8})/gs;\n\nconst BasicString = (literal        )         => {\n\tif ( !literal ) { return ''; }\n\tconst parts = literal.match(ESCAPED_IN_SINGLE_LINE) ;\n\tconst { length } = parts;\n\tlet index = 0;\n\tdo {\n\t\tconst part = parts[index] ;\n\t\tif ( part[0]==='\\\\' ) {\n\t\t\tswitch ( part[1] ) {\n\t\t\t\tcase '\\\\': parts[index] = '\\\\'; break;\n\t\t\t\tcase '\"': parts[index] = '\"'; break;\n\t\t\t\tcase 'b': parts[index] = '\\b'; break;\n\t\t\t\tcase 't': parts[index] = '\\t'; break;\n\t\t\t\tcase 'n': parts[index] = '\\n'; break;\n\t\t\t\tcase 'f': parts[index] = '\\f'; break;\n\t\t\t\tcase 'r': parts[index] = '\\r'; break;\n\t\t\t\tcase 'u':\n\t\t\t\t\tconst charCode         = parseInt$1(part.slice(2), 16);\n\t\t\t\t\tmustScalar && 0xD7FF<charCode && charCode<0xE000\n\t\t\t\t\t&& throws(RangeError$1(`Invalid Unicode Scalar ${part}` + where(' at ')));\n\t\t\t\t\tparts[index] = fromCharCode(charCode);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'U':\n\t\t\t\t\tconst codePoint         = parseInt$1(part.slice(2), 16);\n\t\t\t\t\t( mustScalar && 0xD7FF<codePoint && codePoint<0xE000 || 0x10FFFF<codePoint )\n\t\t\t\t\t&& throws(RangeError$1(`Invalid Unicode Scalar ${part}` + where(' at ')));\n\t\t\t\t\tparts[index] = fromCodePoint(codePoint);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '/': parts[index] = '/'; break;\n\t\t\t}\n\t\t}\n\t}\n\twhile ( ++index!==length );\n\treturn parts.join('');\n};\n\nconst MultilineBasicString = (literal        , useWhatToJoinMultilineString        , n        )         => {\n\tif ( !literal ) { return ''; }\n\tconst parts = literal.match(ESCAPED_IN_MULTI_LINE) ;\n\tconst { length } = parts;\n\tlet index = 0;\n\tdo {\n\t\tconst part = parts[index] ;\n\t\tif ( part==='\\n' ) {\n\t\t\t++n;\n\t\t\tparts[index] = useWhatToJoinMultilineString;\n\t\t}\n\t\telse if ( part[0]==='\\\\' ) {\n\t\t\tswitch ( part[1] ) {\n\t\t\t\tcase '\\n':\n\t\t\t\tcase ' ':\n\t\t\t\tcase '\\t':\n\t\t\t\t\tfor ( let i = 0; i = part.indexOf('\\n', i) + 1; ) { ++n; }\n\t\t\t\t\tparts[index] = '';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\\\\': parts[index] = '\\\\'; break;\n\t\t\t\tcase '\"': parts[index] = '\"'; break;\n\t\t\t\tcase 'b': parts[index] = '\\b'; break;\n\t\t\t\tcase 't': parts[index] = '\\t'; break;\n\t\t\t\tcase 'n': parts[index] = '\\n'; break;\n\t\t\t\tcase 'f': parts[index] = '\\f'; break;\n\t\t\t\tcase 'r': parts[index] = '\\r'; break;\n\t\t\t\tcase 'u':\n\t\t\t\t\tconst charCode         = parseInt$1(part.slice(2), 16);\n\t\t\t\t\tmustScalar && 0xD7FF<charCode && charCode<0xE000\n\t\t\t\t\t&& throws(RangeError$1(`Invalid Unicode Scalar ${part}` + where(' at ', lineIndex + n)));\n\t\t\t\t\tparts[index] = fromCharCode(charCode);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'U':\n\t\t\t\t\tconst codePoint         = parseInt$1(part.slice(2), 16);\n\t\t\t\t\t( mustScalar && 0xD7FF<codePoint && codePoint<0xE000 || 0x10FFFF<codePoint )\n\t\t\t\t\t&& throws(RangeError$1(`Invalid Unicode Scalar ${part}` + where(' at ', lineIndex + n)));\n\t\t\t\t\tparts[index] = fromCodePoint(codePoint);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '/': parts[index] = '/'; break;\n\t\t\t}\n\t\t}\n\t}\n\twhile ( ++index!==length );\n\treturn parts.join('');\n};\n\nconst INTEGER_D = /[-+]?(?:0|[1-9][_\\d]*)/;\nconst { test: BAD_D } = /*#__PURE__*/newRegExp`_(?!\\d)`.valueOf();\nconst { test: IS_D_INTEGER } = /*#__PURE__*/newRegExp`^${INTEGER_D}$`.valueOf();\nconst { test: IS_XOB_INTEGER } = theRegExp(/^0(?:x[\\dA-Fa-f][_\\dA-Fa-f]*|o[0-7][_0-7]*|b[01][_01]*)$/);\nconst { test: BAD_XOB } = /*#__PURE__*/newRegExp`_(?![\\dA-Fa-f])`.valueOf();\nconst UNDERSCORES$1 = /_/g;\nconst UNDERSCORES_SIGN = /_|^[-+]/g;\n\nconst IS_INTEGER = (literal        )          => ( IS_D_INTEGER(literal) || /*options.xob && */IS_XOB_INTEGER(literal) ) && !BAD_XOB(literal);\n\nconst MIN         = BigInt$1 && -/*#__PURE__*/BigInt$1('0x8000000000000000');// -(2n**(64n-1n)) || -MAX-1n\nconst MAX         = BigInt$1 && /*#__PURE__*/BigInt$1('0x7FFFFFFFFFFFFFFF');// 2n**(64n-1n)-1n || -MIN-1n\n\nconst BigIntInteger = (literal        )         => {\n\tIS_INTEGER(literal) || throws(SyntaxError$1(`Invalid Integer ${literal}` + where(' at ')));\n\tconst bigInt         = literal[0]==='-'\n\t\t? -BigInt$1(literal.replace(UNDERSCORES_SIGN, ''))\n\t\t: BigInt$1(literal.replace(UNDERSCORES_SIGN, ''));\n\tallowLonger || MIN<=bigInt && bigInt<=MAX || throws(RangeError$1(`Integer expect 64 bit range (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807), not includes ${literal}` + where(' meet at ')));\n\treturn bigInt;\n};\n\nconst NumberInteger = (literal        )         => {\n\tIS_INTEGER(literal) || throws(SyntaxError$1(`Invalid Integer ${literal}` + where(' at ')));\n\tconst number = parseInt$1(literal.replace(UNDERSCORES$1, ''));\n\tisSafeInteger(number) || throws(RangeError$1(`Integer did not use BitInt must fit Number.isSafeInteger, not includes ${literal}` + where(' meet at ')));\n\treturn number;\n};\n\nconst Integer = (literal        )                  => {\n\tif ( usingBigInt===true ) { return BigIntInteger(literal); }\n\tif ( usingBigInt===false ) { return NumberInteger(literal); }\n\tIS_INTEGER(literal) || throws(SyntaxError$1(`Invalid Integer ${literal}` + where(' at ')));\n\tconst number         = parseInt$1(literal.replace(UNDERSCORES$1, ''));\n\tif ( IntegerMinNumber<=number && number<=IntegerMaxNumber ) { return number; }\n\tconst bigInt         = literal[0]==='-'\n\t\t? -BigInt$1(literal.replace(UNDERSCORES_SIGN, ''))\n\t\t: BigInt$1(literal.replace(UNDERSCORES_SIGN, ''));\n\tallowLonger || MIN<=bigInt && bigInt<=MAX || throws(RangeError$1(`Integer expect 64 bit range (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807), not includes ${literal}` + where(' meet at ')));\n\treturn bigInt;\n};\n\nconst isFinite$1 = isFinite;\n\nconst NaN$1 = 0/0;\n\nconst _NaN = -NaN$1;\nconst _Infinity$1 = -Infinity;\nconst { test: IS_FLOAT } = /*#__PURE__*/newRegExp`\n\t^\n\t${INTEGER_D}\n\t(?:\n\t\t\\.\\d[_\\d]*\n\t\t(?:[eE][-+]?\\d[_\\d]*)?\n\t|\n\t\t[eE][-+]?\\d[_\\d]*\n\t)\n\t$`.valueOf();\nconst UNDERSCORES = /_/g;\nconst { test: IS_ZERO } = theRegExp(/^[-+]?0(?:\\.0+)?(?:[eE][-+]?0+)?$/);\nconst { exec: NORMALIZED } = theRegExp   (/^[-0]?(\\d*)(?:\\.(\\d+))?(?:e\\+?(-?\\d+))?$/);\nconst { exec: ORIGINAL } = theRegExp   (/^[-+]?0?(\\d*)(?:\\.(\\d*?)0*)?(?:[eE]\\+?(-?\\d+))?$/);\n\nconst Float = (literal        )         => {\n\tif ( !IS_FLOAT(literal) || BAD_D(literal) ) {\n\t\tif ( sFloat ) {\n\t\t\tif ( literal==='inf' || literal==='+inf' ) { return Infinity; }\n\t\t\tif ( literal==='-inf' ) { return _Infinity$1; }\n\t\t\tif ( literal==='nan' || literal==='+nan' ) { return NaN$1; }\n\t\t\tif ( literal==='-nan' ) { return _NaN; }\n\t\t}\n\t\tthrow throws(SyntaxError$1(`Invalid Float ${literal}` + where(' at ')));\n\t}\n\tconst withoutUnderscores         = literal.replace(UNDERSCORES, '');\n\tconst number         = +withoutUnderscores;\n\tif ( sError ) {\n\t\tisFinite$1(number) || throws(RangeError$1(`Float ${literal} has been as big as inf` + where(' at ')));\n\t\tnumber || IS_ZERO(withoutUnderscores) || throws(RangeError$1(`Float ${literal} has been as little as ${literal[0]==='-' ? '-' : ''}0` + where(' at ')));\n\t\tconst { 1: normalized_integer, 2: normalized_fractional = '', 3: normalized_exponent = '' } = NORMALIZED(number       ) ;\n\t\tconst { 1: original_integer, 2: original_fractional = '', 3: original_exponent = '' } = ORIGINAL(withoutUnderscores) ;\n\t\toriginal_integer + original_fractional===normalized_integer + normalized_fractional\n\t\t&&\n\t\toriginal_exponent        - original_fractional.length===normalized_exponent        - normalized_fractional.length\n\t\t||\n\t\tthrows(RangeError$1(`Float ${literal} has lost its exact and been ${number}` + where(' at ')));\n\t}\n\treturn number;\n};\n\nconst prepareTable = (table       , keys               )        => {\n\tconst { length } = keys;\n\tlet index         = 0;\n\twhile ( index<length ) {\n\t\tconst key         = keys[index++] ;\n\t\tif ( key in table ) {\n\t\t\ttable = table[key];\n\t\t\tif ( isTable(table) ) {\n\t\t\t\tisInline(table) && throws(Error$1(`Trying to define Table under Inline Table` + where(' at ')));\n\t\t\t}\n\t\t\telse if ( isArray(table) ) {\n\t\t\t\tisStatic(table) && throws(Error$1(`Trying to append value to Static Array` + where(' at ')));\n\t\t\t\ttable = table[( table          ).length - 1];\n\t\t\t}\n\t\t\telse { throw throws(Error$1(`Trying to define Table under non-Table value` + where(' at '))); }\n\t\t}\n\t\telse {\n\t\t\ttable = table[key] = new Table(IMPLICITLY);\n\t\t\twhile ( index<length ) { table = table[keys[index++] ] = new Table(IMPLICITLY); }\n\t\t\treturn table;\n\t\t}\n\t}\n\treturn table;\n};\n\nconst appendTable = (table       , finalKey        , asArrayItem         , tag        )        => {\n\tlet lastTable       ;\n\tif ( asArrayItem ) {\n\t\tlet arrayOfTables              ;\n\t\tif ( finalKey in table ) { isArray(arrayOfTables = table[finalKey]) && !isStatic(arrayOfTables) || throws(Error$1(`Trying to push Table to non-ArrayOfTables value` + where(' at '))); }\n\t\telse { arrayOfTables = table[finalKey] = newArray(OF_TABLES); }\n\t\ttag && collect(tag, arrayOfTables, table, finalKey);\n\t\tarrayOfTables[arrayOfTables.length] = lastTable = new Table(DIRECTLY);\n\t}\n\telse {\n\t\tif ( finalKey in table ) {\n\t\t\tlastTable = table[finalKey];\n\t\t\tfromPair(lastTable) && throws(Error$1(`A table defined implicitly via key/value pair can not be accessed to via []` + where(', which at ')));\n\t\t\tdirectlyIfNot(lastTable) || throws(Error$1(`Duplicate Table definition` + where(' at ')));\n\t\t}\n\t\telse { table[finalKey] = lastTable = new Table(DIRECTLY); }\n\t\ttag && collect(tag, null, table, finalKey);\n\t}\n\treturn lastTable;\n};\n\nconst prepareInlineTable = (table       , keys          )        => {\n\tconst { length } = keys;\n\tlet index         = 0;\n\twhile ( index<length ) {\n\t\tconst key         = keys[index++] ;\n\t\tif ( key in table ) {\n\t\t\ttable = table[key];\n\t\t\tisTable(table) || throws(Error$1(`Trying to assign property through non-Table value` + where(' at ')));\n\t\t\tisInline(table) && throws(Error$1(`Trying to assign property through static Inline Table` + where(' at ')));\n\t\t\tfromPair(table) || throws(Error$1(`A table defined implicitly via [] can not be accessed to via key/value pair` + where(', which at ')));\n\t\t}\n\t\telse {\n\t\t\ttable = table[key] = new Table(IMPLICITLY, PAIR);\n\t\t\twhile ( index<length ) { table = table[keys[index++] ] = new Table(IMPLICITLY, PAIR); }\n\t\t\treturn table;\n\t\t}\n\t}\n\treturn table;\n};\n\nconst checkLiteralString = (literal        )         => {\n\t__CONTROL_CHARACTER_EXCLUDE_test(literal) && throws(SyntaxError$1(`Control characters other than Tab are not permitted in a Literal String` + where(', which was found at ')));\n\treturn literal;\n};\n\nconst assignLiteralString = ( (table       , finalKey        , literal        )         => {\n\tif ( !literal.startsWith(`'''`) ) {\n\t\tconst $ = LITERAL_STRING_exec(literal) || throws(SyntaxError$1(`Bad literal string` + where(' at ')));\n\t\tconst value = checkLiteralString($[1]);\n\t\ttable[finalKey] = preserveLiteral ? LiteralObject(literal.slice(0, value.length + 2), value) : value;\n\t\treturn $[2];\n\t}\n\tconst $ = __MULTI_LINE_LITERAL_STRING_exec(literal.slice(3));\n\tif ( $ ) {\n\t\tconst value = checkLiteralString($[1]) + $[2];\n\t\ttable[finalKey] = preserveLiteral ? LiteralObject(literal.slice(0, value.length + 6), value) : value;\n\t\treturn $[3];\n\t}\n\tconst start = new mark('Multi-line Literal String', literal.length);\n\tconst leadingNewline = !( literal = literal.slice(3) );\n\tif ( leadingNewline ) {\n\t\tliteral = start.must();\n\t\tconst $ = __MULTI_LINE_LITERAL_STRING_exec(literal);\n\t\tif ( $ ) {\n\t\t\tconst value = checkLiteralString($[1]) + $[2];\n\t\t\ttable[finalKey] = preserveLiteral ? LiteralObject([ `'''`, literal.slice(0, value.length + 3) ], value) : value;\n\t\t\treturn $[3];\n\t\t}\n\t}\n\tuseWhatToJoinMultilineString===null && start.nowrap(ARGS_MODE);\n\tfor ( const lines                          = [ checkLiteralString(literal) ]; ; ) {\n\t\tconst line         = start.must();\n\t\tconst $ = __MULTI_LINE_LITERAL_STRING_exec(line);\n\t\tif ( $ ) {\n\t\t\tlines[lines.length] = checkLiteralString($[1]) + $[2];\n\t\t\tconst value = lines.join(useWhatToJoinMultilineString );\n\t\t\tif ( preserveLiteral ) {\n\t\t\t\tlines[lines.length - 1] += `'''`;\n\t\t\t\tleadingNewline ? lines.unshift(`'''`) : lines[0] = `'''${literal}`;\n\t\t\t\ttable[finalKey] = LiteralObject(lines, value);\n\t\t\t}\n\t\t\telse { table[finalKey] = value; }\n\t\t\treturn $[3];\n\t\t}\n\t\tlines[lines.length] = checkLiteralString(line);\n\t}\n} )     \n\t                                                                       \n\t                                                                      \n ;\n\nconst assignBasicString = ( (table       , finalKey        , literal        )         => {\n\tif ( !literal.startsWith('\"\"\"') ) {\n\t\tconst index = BASIC_STRING_exec_1_endIndex(literal);\n\t\tconst value = BasicString(literal.slice(1, index));\n\t\ttable[finalKey] = preserveLiteral ? LiteralObject(literal.slice(0, index + 1), value) : value;\n\t\treturn literal.slice(index + 1).replace(PRE_WHITESPACE, '');\n\t}\n\tlet length = 3 + MULTI_LINE_BASIC_STRING_exec_0_length(literal.slice(3));\n\tif ( literal.length!==length ) {\n\t\tconst $ = literal.slice(3, length);\n\t\tESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || throws(SyntaxError$1(`Bad multi-line basic string` + where(' at ')));\n\t\tconst value = BasicString($) + ( literal.startsWith('\"', length += 3) ? literal.startsWith('\"', ++length) ? ( ++length, '\"\"' ) : '\"' : '' );\n\t\ttable[finalKey] = preserveLiteral ? LiteralObject(literal.slice(0, length), value) : value;\n\t\treturn literal.slice(length).replace(PRE_WHITESPACE, '');\n\t}\n\tconst start = new mark('Multi-line Basic String', length);\n\tconst skipped        = ( literal = literal.slice(3) ) ? 0 : 1;\n\tif ( skipped ) {\n\t\tliteral = start.must();\n\t\tlet length = MULTI_LINE_BASIC_STRING_exec_0_length(literal);\n\t\tif ( literal.length!==length ) {\n\t\t\tconst $ = literal.slice(0, length);\n\t\t\tESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || throws(SyntaxError$1(`Bad multi-line basic string` + where(' at ')));\n\t\t\tconst value = MultilineBasicString($, useWhatToJoinMultilineString , skipped) + ( literal.startsWith('\"', length += 3) ? literal.startsWith('\"', ++length) ? ( ++length, '\"\"' ) : '\"' : '' );\n\t\t\ttable[finalKey] = preserveLiteral ? LiteralObject([ '\"\"\"', literal.slice(0, length) ], value) : value;\n\t\t\treturn literal.slice(length).replace(PRE_WHITESPACE, '');\n\t\t}\n\t}\n\tuseWhatToJoinMultilineString===null && start.nowrap(ARGS_MODE);\n\tESCAPED_EXCLUDE_CONTROL_CHARACTER_test(literal + '\\n') || throws(SyntaxError$1(`Bad multi-line basic string` + where(' at ')));\n\tfor ( const lines                          = [ literal ]; ; ) {\n\t\tconst line         = start.must();\n\t\tlet length = MULTI_LINE_BASIC_STRING_exec_0_length(line);\n\t\tif ( line.length!==length ) {\n\t\t\tconst $ = line.slice(0, length);\n\t\t\tESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || throws(SyntaxError$1(`Bad multi-line basic string` + where(' at ')));\n\t\t\tconst value = MultilineBasicString(lines.join('\\n') + '\\n' + $, useWhatToJoinMultilineString , skipped) + ( line.startsWith('\"', length += 3) ? line.startsWith('\"', ++length) ? ( ++length, '\"\"' ) : '\"' : '' );\n\t\t\tif ( preserveLiteral ) {\n\t\t\t\tskipped ? lines.unshift('\"\"\"') : lines[0] = `\"\"\"${literal}`;\n\t\t\t\tlines[lines.length] = `${$}\"\"\"`;\n\t\t\t\ttable[finalKey] = LiteralObject(lines, value);\n\t\t\t}\n\t\t\telse { table[finalKey] = value; }\n\t\t\treturn line.slice(length).replace(PRE_WHITESPACE, '');\n\t\t}\n\t\tESCAPED_EXCLUDE_CONTROL_CHARACTER_test(line + '\\n') || throws(SyntaxError$1(`Bad multi-line basic string` + where(' at ')));\n\t\tlines[lines.length] = line;\n\t}\n} )     \n\t                                                                       \n\t                                                                      \n ;\n\nconst KEYS = /*#__PURE__*/Null$1        (null);\nconst commentFor = (key        )         => KEYS[key] || ( KEYS[key] = Symbol$1(key) );\nconst commentForThis                = Symbol$1('this')       ;\n\nconst { test: includesNewline } = theRegExp(/\\r?\\n/g);\nconst getCOMMENT = (table                                            , keyComment        )                     => {\n\tif ( keyComment in table ) {\n\t\tconst comment = table[keyComment];\n\t\tif ( typeof comment!=='string' ) { throw TypeError$1(`the value of comment must be a string, while \"${comment===null ? 'null' : typeof comment}\" type is found`); }\n\t\tif ( includesNewline(comment) ) { throw SyntaxError$1(`the value of comment must be a string and can not include newline`); }\n\t\treturn ` #${comment}`;///\n\t}\n\treturn '';\n};\nconst getComment =                    (table                                                                               , key   )                     => key in KEYS ? getCOMMENT(table, KEYS[key] ) : '';\n\nconst { test: IS_OFFSET$ } = theRegExp(OFFSET$);\nconst { test: IS_EMPTY } = theRegExp(/^\\[[\\t ]*]/);\n\nconst parseKeys = (rest        )                                                                => {\n\tlet lineRest         = rest;\n\tconst leadingKeys           = [];\n\tlet lastIndex         = -1;\n\tfor ( ; ; ) {\n\t\tlineRest || throws(SyntaxError$1(`Empty bare key` + where(' at ')));\n\t\tif ( lineRest[0]==='\"' ) {\n\t\t\tconst index         = BASIC_STRING_exec_1_endIndex(lineRest);\n\t\t\tKEYS$1.test(leadingKeys[++lastIndex] = BasicString(lineRest.slice(1, index))) || throws(Error$1(`Key not allowed` + where(' at ')));\n\t\t\tlineRest = lineRest.slice(index + 1);\n\t\t}\n\t\telse {\n\t\t\tconst isQuoted = lineRest[0]==='\\'';\n\t\t\tconst key         = ( ( isQuoted ? __LITERAL_KEY_exec : __BARE_KEY_exec )(lineRest) || throws(SyntaxError$1(`Bad ${isQuoted ? 'literal string' : 'bare'} key` + where(' at '))) )[0];\n\t\t\tlineRest = lineRest.slice(key.length);\n\t\t\tKEYS$1.test(leadingKeys[++lastIndex] = isQuoted ? key.slice(1, -1) : key) || throws(Error$1(`Key not allowed` + where(' at ')));\n\t\t}\n\t\tif ( IS_DOT_KEY(lineRest) ) { lineRest = lineRest.replace(DOT_KEY, ''); }\n\t\telse { break; }\n\t}\n\tif ( disableDigit ) {\n\t\tconst keys = rest.slice(0, -lineRest.length);\n\t\t( isAmazing(keys) || enableNull && keys==='null' ) && throws(SyntaxError$1(`Bad bare key disabled by xOptions.string` + where(' at ')));\n\t}\n\tif ( disallowEmptyKey ) {\n\t\tlet index         = lastIndex;\n\t\tdo { leadingKeys[index]  || throws(SyntaxError$1(`Empty key is not allowed before TOML v0.5` + where(', which at '))); }\n\t\twhile ( index-- );\n\t}\n\tconst finalKey         = leadingKeys[lastIndex] ;\n\tleadingKeys.length = lastIndex;\n\treturn { leadingKeys, finalKey, lineRest };\n};\n\nconst push = (lastArray       , lineRest        )             => {\n\tif ( lineRest[0]==='<' ) {\n\t\tconst { 1: tag } = { 2: lineRest } = _VALUE_PAIR_exec(lineRest) || throws(SyntaxError$1(`Bad tag ` + where(' at ')));\n\t\tcollect(tag, lastArray, null);\n\t\tswitch ( lineRest && lineRest[0] ) {\n\t\t\tcase ',':\n\t\t\tcase ']':\n\t\t\tcase '':\n\t\t\tcase '#':\n\t\t\t\tlastArray[lastArray.length] = undefined$1;\n\t\t\t\treturn lineRest;\n\t\t}\n\t}\n\tswitch ( lineRest[0] ) {\n\t\tcase '\\'':\n\t\t\treturn assignLiteralString(asStrings(lastArray), lastArray.length, lineRest);\n\t\tcase '\"':\n\t\t\treturn assignBasicString(asStrings(lastArray), lastArray.length, lineRest);\n\t\tcase '{':\n\t\t\tinlineTable || throws(SyntaxError$1(`Inline Table is not allowed before TOML v0.4` + where(', which at ')));\n\t\t\treturn equalInlineTable(asTables(lastArray), lastArray.length, lineRest);\n\t\tcase '[':\n\t\t\treturn equalStaticArray(asArrays(lastArray), lastArray.length, lineRest);\n\t}\n\tconst { 1: literal } = { 2: lineRest } = VALUE_REST_exec(lineRest) || throws(SyntaxError$1(`Bad atom value` + where(' at ')));\n\tif ( literal==='true' ) { asBooleans(lastArray)[lastArray.length] = true; }\n\telse if ( literal==='false' ) { asBooleans(lastArray)[lastArray.length] = false; }\n\telse if ( enableNull && literal==='null' ) { asNulls(lastArray)[lastArray.length] = null; }\n\telse if ( literal.includes(':') ) {\n\t\tif ( literal.includes('-') ) {\n\t\t\tif ( IS_OFFSET$(literal) ) {\n\t\t\t\tasOffsetDateTimes(lastArray)[lastArray.length] = new OffsetDateTime(literal);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmoreDatetime || throws(SyntaxError$1(`Local Date-Time is not allowed before TOML v0.5` + where(', which at ')));\n\t\t\t\tasLocalDateTimes(lastArray)[lastArray.length] = new LocalDateTime(literal);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tmoreDatetime || throws(SyntaxError$1(`Local Time is not allowed before TOML v0.5` + where(', which at ')));\n\t\t\tasLocalTimes(lastArray)[lastArray.length] = new LocalTime(literal);\n\t\t}\n\t}\n\telse if ( literal.indexOf('-')!==literal.lastIndexOf('-') && literal[0]!=='-' ) {\n\t\tmoreDatetime || throws(SyntaxError$1(`Local Date is not allowed before TOML v0.5` + where(', which at ')));\n\t\tasLocalDates(lastArray)[lastArray.length] = new LocalDate(literal);\n\t}\n\telse {\n\t\tliteral.includes('.') || literal.includes('n') || ( literal.includes('e') || literal.includes('E') ) && !literal.startsWith('0x')\n\t\t\t? asFloats(lastArray)[lastArray.length] = preserveLiteral ? LiteralObject(literal, Float(literal)) : Float(literal)\n\t\t\t: asIntegers(lastArray)[lastArray.length] = preserveLiteral ? LiteralObject(literal, Integer(literal)) : Integer(literal)\n\t\t;\n\t}\n\treturn lineRest;\n};\n\nconst equalStaticArray = function * (            table       , finalKey        , lineRest        )    {\n\tconst staticArray        = table[finalKey] = newArray(STATICALLY);\n\tif ( IS_EMPTY(lineRest) ) {\n\t\tbeInline(staticArray, lineRest[1]===']' ? 0 : 3);\n\t\treturn lineRest.slice(lineRest.indexOf(']')).replace(SYM_WHITESPACE, '');\n\t}\n\tconst start = new mark('Static Array', lineRest.length);\n\tlet inline               = lineRest.startsWith('[ ') || lineRest.startsWith('[\\t') ? 3 : 0;\n\tlineRest = lineRest.replace(SYM_WHITESPACE, '');\n\twhile ( !lineRest || lineRest[0]==='#' ) {\n\t\tinline = null;\n\t\tlineRest = start.must().replace(PRE_WHITESPACE, '');\n\t}\n\tif ( lineRest[0]===']' ) {\n\t\tinline===null || beInline(staticArray, inline);\n\t\treturn lineRest.replace(SYM_WHITESPACE, '');\n\t}\n\tfor ( ; ; ) {\n\t\tconst rest             = push(staticArray, lineRest);\n\t\tlineRest = typeof rest==='string' ? rest : yield rest;\n\t\twhile ( !lineRest || lineRest[0]==='#' ) {\n\t\t\tinline = null;\n\t\t\tlineRest = start.must().replace(PRE_WHITESPACE, '');\n\t\t}\n\t\tif ( lineRest[0]===',' ) {\n\t\t\tlineRest = lineRest.replace(SYM_WHITESPACE, '');\n\t\t\twhile ( !lineRest || lineRest[0]==='#' ) {\n\t\t\t\tinline = null;\n\t\t\t\tlineRest = start.must().replace(PRE_WHITESPACE, '');\n\t\t\t}\n\t\t\tif ( lineRest[0]===']' ) { break; }\n\t\t}\n\t\telse {\n\t\t\tif ( lineRest[0]===']' ) { break; }\n\t\t\tthrow throws(SyntaxError$1(`Unexpect character in static array item value` + where(', which is found at ')));\n\t\t}\n\t}\n\tinline===null || beInline(staticArray, inline);\n\treturn lineRest.replace(SYM_WHITESPACE, '');\n}     \n\t                                                                   \n\t                                                                  \n ;\n\nconst equalInlineTable = function * (            table       , finalKey        , lineRest        )    {\n\tconst inlineTable        = table[finalKey] = new Table(DIRECTLY, INLINE);\n\tif ( allowInlineTableMultilineAndTrailingCommaEvenNoComma ) {\n\t\tconst start = new mark('Inline Table', lineRest.length);\n\t\tlineRest = lineRest.replace(SYM_WHITESPACE, '');\n\t\tlet inline = true;\n\t\tfor ( ; ; ) {\n\t\t\twhile ( !lineRest || lineRest[0]==='#' ) {\n\t\t\t\tinline = false;\n\t\t\t\tlineRest = start.must().replace(PRE_WHITESPACE, '');\n\t\t\t}\n\t\t\tif ( lineRest[0]==='}' ) { break; }\n\t\t\tconst forComment             = ForComment(inlineTable, lineRest);\n\t\t\tconst rest             = assign(forComment);\n\t\t\tlineRest = typeof rest==='string' ? rest : yield rest;\n\t\t\tif ( lineRest ) {\n\t\t\t\tif ( lineRest[0]==='#' ) {\n\t\t\t\t\tif ( preserveComment ) { forComment.table[commentFor(forComment.finalKey)] = lineRest.slice(1); }\n\t\t\t\t\tinline = false;\n\t\t\t\t\tdo { lineRest = start.must().replace(PRE_WHITESPACE, ''); }\n\t\t\t\t\twhile ( !lineRest || lineRest[0]==='#' );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tinline = false;\n\t\t\t\tdo { lineRest = start.must().replace(PRE_WHITESPACE, ''); }\n\t\t\t\twhile ( !lineRest || lineRest[0]==='#' );\n\t\t\t}\n\t\t\tif ( lineRest[0]===',' ) { lineRest = lineRest.replace(SYM_WHITESPACE, ''); }\n\t\t}\n\t\tinline || beInline(inlineTable, false);\n\t}\n\telse {\n\t\tlineRest = lineRest.replace(SYM_WHITESPACE, '') || throws(SyntaxError$1(`Inline Table is intended to appear on a single line` + where(', which broken at ')));\n\t\tif ( lineRest[0]!=='}' ) {\n\t\t\tfor ( ; ; ) {\n\t\t\t\tlineRest[0]==='#' && throws(SyntaxError$1(`Inline Table is intended to appear on a single line` + where(', which broken at ')));\n\t\t\t\tconst rest             = assign(ForComment(inlineTable, lineRest));\n\t\t\t\tlineRest = ( typeof rest==='string' ? rest : yield rest ) || throws(SyntaxError$1(`Inline Table is intended to appear on a single line` + where(', which broken at ')));\n\t\t\t\tif ( lineRest[0]==='}' ) { break; }\n\t\t\t\tif ( lineRest[0]===',' ) {\n\t\t\t\t\tlineRest = lineRest.replace(SYM_WHITESPACE, '') || throws(SyntaxError$1(`Inline Table is intended to appear on a single line` + where(', which broken at ')));\n\t\t\t\t\tlineRest[0]==='}' && throws(SyntaxError$1(`The last property of an Inline Table can not have a trailing comma` + where(', which was found at ')));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn lineRest.replace(SYM_WHITESPACE, '');\n}     \n\t                                                                   \n\t                                                                  \n ;\n\n                                                                                              \nconst ForComment = (lastInlineTable       , lineRest        )             => {\n\tconst { leadingKeys, finalKey, tag } = { lineRest } = KEY_VALUE_PAIR_exec_groups(parseKeys(lineRest));\n\treturn { table: prepareInlineTable(lastInlineTable, leadingKeys), finalKey, tag, lineRest };\n};\nconst assign = ({ finalKey, tag, lineRest, table }            )             => {\n\tfinalKey in table && throws(Error$1(`Duplicate property definition` + where(' at ')));\n\tif ( tag ) {\n\t\tcollect(tag, null, table, finalKey);\n\t\tswitch ( lineRest && lineRest[0] ) {\n\t\t\tcase ',':\n\t\t\tcase '}':\n\t\t\tcase '':\n\t\t\tcase '#':\n\t\t\t\ttable[finalKey] = undefined$1;\n\t\t\t\treturn lineRest;\n\t\t}\n\t}\n\tswitch ( lineRest && lineRest[0] ) {\n\t\tcase '\\'':\n\t\t\treturn assignLiteralString(table, finalKey, lineRest);\n\t\tcase '\"':\n\t\t\treturn assignBasicString(table, finalKey, lineRest);\n\t\tcase '{':\n\t\t\tinlineTable || throws(SyntaxError$1(`Inline Table is not allowed before TOML v0.4` + where(', which at ')));\n\t\t\treturn equalInlineTable(table, finalKey, lineRest);\n\t\tcase '[':\n\t\t\treturn equalStaticArray(table, finalKey, lineRest);\n\t}\n\tconst { 1: literal } = { 2: lineRest } = VALUE_REST_exec(lineRest) || throws(SyntaxError$1(`Bad atom value` + where(' at ')));\n\tif ( literal==='true' ) { table[finalKey] = true; }\n\telse if ( literal==='false' ) { table[finalKey] = false; }\n\telse if ( enableNull && literal==='null' ) { table[finalKey] = null; }\n\telse if ( literal.includes(':') ) {\n\t\tif ( literal.includes('-') ) {\n\t\t\tif ( IS_OFFSET$(literal) ) {\n\t\t\t\ttable[finalKey] = new OffsetDateTime(literal);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmoreDatetime || throws(SyntaxError$1(`Local Date-Time is not allowed before TOML v0.5` + where(', which at ')));\n\t\t\t\ttable[finalKey] = new LocalDateTime(literal);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tmoreDatetime || throws(SyntaxError$1(`Local Time is not allowed before TOML v0.5` + where(', which at ')));\n\t\t\ttable[finalKey] = new LocalTime(literal);\n\t\t}\n\t}\n\telse if ( literal.indexOf('-')!==literal.lastIndexOf('-') && literal[0]!=='-' ) {\n\t\tmoreDatetime || throws(SyntaxError$1(`Local Date is not allowed before TOML v0.5` + where(', which at ')));\n\t\ttable[finalKey] = new LocalDate(literal);\n\t}\n\telse {\n\t\ttable[finalKey] = literal.includes('.') || literal.includes('n') || ( literal.includes('e') || literal.includes('E') ) && !literal.startsWith('0x')\n\t\t\t? preserveLiteral ? LiteralObject(literal, Float(literal)) : Float(literal)\n\t\t\t: preserveLiteral ? LiteralObject(literal, Integer(literal)) : Integer(literal)\n\t\t;\n\t}\n\treturn lineRest;\n};\n\nconst Root = ()        => {\n\tconst rootTable        = new Table;\n\tlet lastSectionTable        = rootTable;\n\twhile ( rest() ) {\n\t\tconst line         = next().replace(PRE_WHITESPACE, '');\n\t\tif ( line ) {\n\t\t\tif ( line[0]==='[' ) {\n\t\t\t\tconst { leadingKeys, finalKey, asArrayItem, tag, lineRest } = TABLE_DEFINITION_exec_groups(line, parseKeys);\n\t\t\t\tconst table        = prepareTable(rootTable, leadingKeys);\n\t\t\t\tif ( lineRest ) {\n\t\t\t\t\tlineRest[0]==='#' || throws(SyntaxError$1(`Unexpect charachtor after table header` + where(' at ')));\n\t\t\t\t}\n\t\t\t\tlastSectionTable = appendTable(table, finalKey, asArrayItem, tag);\n\t\t\t\tpreserveComment && lineRest && ( lastSectionTable[commentForThis] = asArrayItem ? lineRest.slice(1) : table[commentFor(finalKey)] = lineRest.slice(1) );\n\t\t\t}\n\t\t\telse if ( line[0]==='#' ) {\n\t\t\t\t__CONTROL_CHARACTER_EXCLUDE_test(line) && throws(SyntaxError$1(`Control characters other than Tab are not permitted in comments` + where(', which was found at ')));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst forComment             = ForComment(lastSectionTable, line);\n\t\t\t\tlet rest             = assign(forComment);\n\t\t\t\ttypeof rest==='string' || ( rest = x        (rest) );\n\t\t\t\tif ( rest ) {\n\t\t\t\t\trest[0]==='#' || throws(SyntaxError$1(`Unexpect charachtor after key/value pair` + where(' at ')));\n\t\t\t\t\tif ( preserveComment ) { forComment.table[commentFor(forComment.finalKey)] = rest.slice(1); }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn rootTable;\n};\n\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;\n\nconst DATE = Date.prototype;\n\nconst valueOf$2 = String.prototype.valueOf;\n\nconst isString = (\n\t/* j-globals: class.isString (internal) */\n\t/*#__PURE__*/ function () {\n\t\tif ( apply.bind ) {\n\t\t\tvar valueOf_apply = apply.bind(valueOf$2);\n\t\t\treturn function isString (value) {\n\t\t\t\ttry { valueOf_apply(value); }\n\t\t\t\tcatch (error) { return false; }\n\t\t\t\treturn true;\n\t\t\t};\n\t\t}\n\t\treturn function isString (value) {\n\t\t\ttry { valueOf$2.apply(value); }\n\t\t\tcatch (error) { return false; }\n\t\t\treturn true;\n\t\t};\n\t}()\n\t/* j-globals: class.isString (internal) */\n);\n\nconst valueOf$1 = Number.prototype.valueOf;\n\nconst isNumber = (\n\t/* j-globals: class.isNumber (internal) */\n\t/*#__PURE__*/ function () {\n\t\tif ( apply.bind ) {\n\t\t\tvar valueOf_apply = apply.bind(valueOf$1);\n\t\t\treturn function isNumber (value) {\n\t\t\t\ttry { valueOf_apply(value); }\n\t\t\t\tcatch (error) { return false; }\n\t\t\t\treturn true;\n\t\t\t};\n\t\t}\n\t\treturn function isNumber (value) {\n\t\t\ttry { valueOf$1.apply(value); }\n\t\t\tcatch (error) { return false; }\n\t\t\treturn true;\n\t\t};\n\t}()\n\t/* j-globals: class.isNumber (internal) */\n);\n\nconst isBigInt = (\n\t/* j-globals: class.isBigInt (internal) */\n\t/*#__PURE__*/ function () {\n\t\tif ( typeof BigInt==='function' ) {\n\t\t\tvar valueOf_apply = apply.bind(BigInt.prototype.valueOf);\n\t\t\treturn function isBigInt (value) {\n\t\t\t\ttry { valueOf_apply(value); }\n\t\t\t\tcatch (error) { return false; }\n\t\t\t\treturn true;\n\t\t\t};\n\t\t}\n\t\treturn function isBigInt () { return false; };\n\t}()\n\t/* j-globals: class.isBigInt (internal) */\n);\n\nconst valueOf = BigInt.prototype.valueOf;\n\nconst isBoolean = (\n\t/* j-globals: class.isBoolean (internal) */\n\t/*#__PURE__*/ function () {\n\t\tif ( apply.bind ) {\n\t\t\tvar valueOf_apply = apply.bind(valueOf);\n\t\t\treturn function isBoolean (value) {\n\t\t\t\ttry { valueOf_apply(value); }\n\t\t\t\tcatch (error) { return false; }\n\t\t\t\treturn true;\n\t\t\t};\n\t\t}\n\t\treturn function isBoolean (value) {\n\t\t\ttry { valueOf.apply(value); }\n\t\t\tcatch (error) { return false; }\n\t\t\treturn true;\n\t\t};\n\t}()\n\t/* j-globals: class.isBoolean (internal) */\n);\n\nconst ESCAPED = /*#__PURE__*/Null$1        ({\n\t.../*#__PURE__*/fromEntries(/*#__PURE__*/[ ...Array$1(0x20) ].map((_, charCode) => [ fromCharCode(charCode), '\\\\u' + charCode.toString(16).toUpperCase().padStart(4, '0') ])),\n\t'\\b': '\\\\b',\n\t'\\t': '\\\\t',\n\t'\\n': '\\\\n',\n\t'\\f': '\\\\f',\n\t'\\r': '\\\\r',\n\t'\"': '\\\\\"',\n\t'\"\"\"': '\"\"\\\\\"',\n\t'\\\\': '\\\\\\\\',\n\t'\\x7F': '\\\\u007F',\n});\n\nconst { test: NEED_BASIC } = theRegExp(/[\\x00-\\x08\\x0A-\\x1F'\\x7F]/);\nconst BY_ESCAPE = /[^\\x00-\\x08\\x0A-\\x1F\"\\\\\\x7F]+|./gs;\nconst { test: NEED_ESCAPE } = theRegExp(/^[\\x00-\\x08\\x0A-\\x1F\"\\\\\\x7F]/);\nconst singlelineString = (value        )                                => {\n\tif ( NEED_BASIC(value) ) {\n\t\tconst parts = value.match(BY_ESCAPE) ;\n\t\tlet index = parts.length;\n\t\tdo { if ( NEED_ESCAPE(parts[--index] ) ) { parts[index] = ESCAPED[parts[index] ] ; } }\n\t\twhile ( index );\n\t\treturn `\"${parts.join('')}\"`;\n\t}\n\treturn `'${value}'`;\n};\nconst singlelineBasicString = (value        )                => {\n\tif ( value ) {\n\t\tconst parts = value.match(BY_ESCAPE) ;\n\t\tlet index = parts.length;\n\t\tdo { if ( NEED_ESCAPE(parts[--index] ) ) { parts[index] = ESCAPED[parts[index] ] ; } }\n\t\twhile ( index );\n\t\treturn `\"${parts.join('')}\"`;\n\t}\n\treturn `\"\"`;\n};\n\nconst { test: NEED_MULTILINE_BASIC } = theRegExp(/[\\x00-\\x08\\x0A-\\x1F\\x7F]|'''/);\nconst { test: multilineNeedBasic } = theRegExp(/[\\x00-\\x08\\x0B-\\x1F\\x7F]|'''/);\nconst { test: REAL_MULTILINE_ESCAPE } = theRegExp(/[\\x00-\\x08\\x0A-\\x1F\\\\\\x7F]|\"\"\"/);\nconst BY_MULTILINE_ESCAPE = /[^\\x00-\\x08\\x0A-\\x1F\"\\\\\\x7F]+|\"\"\"|./gs;\nconst { test: NEED_MULTILINE_ESCAPE } = theRegExp(/^(?:[\\x00-\\x08\\x0A-\\x1F\\\\\\x7F]|\"\"\")/);\nconst escape_multiline = (lines          , lineIndex        ) => {\n\tconst line = lines[lineIndex] ;\n\tif ( REAL_MULTILINE_ESCAPE(line) ) {\n\t\tconst parts = line.match(BY_MULTILINE_ESCAPE) ;\n\t\tlet index = parts.length;\n\t\tdo { if ( NEED_MULTILINE_ESCAPE(parts[--index] ) ) { parts[index] = ESCAPED[parts[index] ] ; } }\n\t\twhile ( index );\n\t\tlines[lineIndex] = parts.join('');\n\t}\n};\n\n                                                    \nconst Lines = (lines                   )        => ( lines = [ '', ...lines ]          ).length===1 ? [ '', '' ] : lines         ;\n\nconst multilineString = (lines       )                                                                                  => {\n\tconst lastIndex = lines.length - 1;\n\tlet index = lastIndex;\n\tdo { if ( NEED_MULTILINE_BASIC(lines[index] ) ) { break; } }\n\twhile ( --index );\n\tif ( index ) {\n\t\tindex = lastIndex;\n\t\tescape_multiline(lines, index);\n\t\tlines[index] += lines[0] = '\"\"\"';\n\t\twhile ( --index ) { escape_multiline(lines, index); }\n\t}\n\telse { lines[lastIndex] += lines[0] = '\\'\\'\\''; }\n\treturn lines                                                                                   ;\n};\n\nconst multilineBasicString = (lines       )                                         => {\n\tlet index = lines.length - 1;\n\tescape_multiline(lines, index);\n\tlines[index] += lines[0] = '\"\"\"';\n\twhile ( --index ) { escape_multiline(lines, index); }\n\treturn lines                                          ;\n};\n\nconst multilineLiteralString = (lines       )                                         => {\n\tlines[lines.length - 1] += lines[0] = '\\'\\'\\'';\n\treturn lines                                          ;\n};\n\nconst Float64Array$1 = Float64Array;\n\nconst Uint8Array$1 = Uint8Array;\n\nconst _Infinity = -Infinity;\n\nconst { test: INTEGER_LIKE } = theRegExp(/^-?\\d+$/);\nconst ensureFloat = (literal        ) => INTEGER_LIKE(literal) ? literal + '.0' : literal;\n\nconst float64Array = new Float64Array$1([ NaN$1 ]);\nconst uint8Array = new Uint8Array$1(float64Array.buffer);\nconst NaN_7 = uint8Array[7] ;\n\nconst float = NaN_7===new Uint8Array$1(new Float64Array$1([ -NaN$1 ]).buffer)[7] \n\t? (value        ) => value\n\t\t? value===Infinity ? 'inf' : value===_Infinity ? '-inf' : ensureFloat('' + value)\n\t\t: value===value ? is(value, 0) ? '0.0' : '-0.0' : 'nan'\n\t: (value        ) => value\n\t\t? value===Infinity ? 'inf' : value===_Infinity ? '-inf' : ensureFloat('' + value)\n\t\t: value===value ? is(value, 0) ? '0.0' : '-0.0' : ( float64Array[0] = value, uint8Array[7] )===NaN_7 ? 'nan' : '-nan';\n\nconst isDate = /*#__PURE__*/isPrototypeOf.bind(DATE)                                                ;\n\nconst { test: BARE } = theRegExp(/^[\\w-]+$/);\nconst $Key$ = (key        )         => BARE(key) ? key : singlelineString(key);\n\nconst FIRST = /[^.]+/;\nconst literalString = (value        )                => `'${value}'`;\nconst $Keys = (keys        )         => isAmazing(keys) ? keys.replace(FIRST, literalString) : keys==='null' ? `'null'` : keys;\n\nclass TOMLSection extends Array$1         {\n\t\n\t                 document              ;\n\t\n\tconstructor (document              ) {\n\t\tsuper();\n\t\tthis.document = document;\n\t\treturn this;\n\t}\n\t\n\t[Symbol$1.toPrimitive] () { return this.join(this.document.newline); }\n\t\n\tappendNewline () { this[this.length] = ''; }\n\t        set appendLine (source        ) { this[this.length] = source; }\n\t        set appendInline (source        ) { this[this.length - 1] += source; }   \n\t        set appendInlineIf (source        ) { source && ( this[this.length - 1] += source ); }///\n\t\n\t* assignBlock                           (documentKeys_                   , sectionKeys_                  , table   , tableKeys                            )    {\n\t\tconst { document } = this;\n\t\tconst { newlineUnderHeader, newlineUnderSectionButPair } = document;\n\t\tconst newlineAfterDotted = sectionKeys_ ? document.newlineUnderPairButDotted : false;\n\t\tconst newlineAfterPair = sectionKeys_ ? document.newlineUnderDotted : document.newlineUnderPair;\n\t\tfor ( const tableKey of tableKeys ) {\n\t\t\tconst value                 = table[tableKey] ;\n\t\t\tconst $key$ = $Key$(tableKey);\n\t\t\tconst documentKeys = documentKeys_ + $key$;\n\t\t\tif ( isArray$1(value) ) {\n\t\t\t\tconst { length } = value;\n\t\t\t\tif ( length ) {\n\t\t\t\t\tlet firstItem = value[0];\n\t\t\t\t\tif ( isSection(firstItem) ) {\n\t\t\t\t\t\tconst tableHeader = `[[${documentKeys}]]`         ;\n\t\t\t\t\t\tconst documentKeys_ = documentKeys + '.'                ;\n\t\t\t\t\t\tlet index = 0;\n\t\t\t\t\t\tlet table                 = firstItem;\n\t\t\t\t\t\tfor ( ; ; ) {\n\t\t\t\t\t\t\tconst section = document.appendSection();\n\t\t\t\t\t\t\tsection[0] = tableHeader + getCOMMENT(table, commentForThis);\n\t\t\t\t\t\t\tif ( newlineUnderHeader ) {\n\t\t\t\t\t\t\t\tsection[1] = '';\n\t\t\t\t\t\t\t\tyield section.assignBlock(documentKeys_, ``, table, getOwnPropertyNames(table));\n\t\t\t\t\t\t\t\tnewlineUnderSectionButPair && section.length!==2 && section.appendNewline();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tyield section.assignBlock(documentKeys_, ``, table, getOwnPropertyNames(table));\n\t\t\t\t\t\t\t\tnewlineUnderSectionButPair && section.appendNewline();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( ++index===length ) { break; }\n\t\t\t\t\t\t\ttable = ( value                           )[index] ;\n\t\t\t\t\t\t\tif ( !isSection(table) ) { throw TypeError$1(`the first table item marked by Section() means the parent array is an array of tables, which can not include other types or table not marked by Section() any more in the rest items`); }\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse { let index = 1; while ( index!==length ) { if ( isSection(value[index++] ) ) { throw TypeError$1(`if an array is not array of tables, it can not include any table that marked by Section()`); } } }\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( isSection(value) ) {\n\t\t\t\t\tconst section = document.appendSection();\n\t\t\t\t\tsection[0] = `[${documentKeys}]${\n\t\t\t\t\t\tdocument.preferCommentForThis\n\t\t\t\t\t\t\t? getCOMMENT(value, commentForThis) || getComment(table, tableKey)\n\t\t\t\t\t\t\t: getComment(table, tableKey) || getCOMMENT(value, commentForThis)\n\t\t\t\t\t}`;\n\t\t\t\t\tif ( newlineUnderHeader ) {\n\t\t\t\t\t\tsection[1] = '';\n\t\t\t\t\t\tyield section.assignBlock(documentKeys + '.'                , ``, value, getOwnPropertyNames(value));\n\t\t\t\t\t\tnewlineUnderSectionButPair && section.length!==2 && section.appendNewline();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tyield section.assignBlock(documentKeys + '.'                , ``, value, getOwnPropertyNames(value));\n\t\t\t\t\t\tnewlineUnderSectionButPair && section.appendNewline();\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst sectionKeys = sectionKeys_ + $key$;\n\t\t\tthis.appendLine = $Keys(sectionKeys) + ' = ';\n\t\t\tconst valueKeysIfValueIsDottedTable = this.value('', value, true);\n\t\t\tif ( valueKeysIfValueIsDottedTable ) {\n\t\t\t\t--this.length;\n\t\t\t\tyield this.assignBlock(documentKeys + '.'                , sectionKeys + '.'                , value                                   , valueKeysIfValueIsDottedTable);\n\t\t\t\tnewlineAfterDotted && this.appendNewline();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.appendInlineIf = getComment(table, tableKey);\n\t\t\t\tnewlineAfterPair && this.appendNewline();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t        value (indent        , value                , returnValueKeysIfValueIsDottedTable         )                  {\n\t\tswitch ( typeof value ) {\n\t\t\tcase 'object':\n\t\t\t\tif ( value===null ) {\n\t\t\t\t\tif ( this.document.nullDisabled ) { throw TypeError$1(`toml can not stringify \"null\" type value without truthy options.xNull`); }\n\t\t\t\t\tthis.appendInline = 'null';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconst inlineMode = ofInline(value);\n\t\t\t\tif ( isArray$1(value) ) {\n\t\t\t\t\tif ( inlineMode===undefined$1 ) { this.staticArray(indent, value); }\n\t\t\t\t\telse {\n\t\t\t\t\t\tconst { $singlelineArray = inlineMode } = this.document;\n\t\t\t\t\t\tthis.singlelineArray(indent, value, $singlelineArray);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif ( inlineMode!==undefined$1 ) {\n\t\t\t\t\tinlineMode || this.document.multilineTableDisabled\n\t\t\t\t\t\t? this.inlineTable(indent, value                        )\n\t\t\t\t\t\t: this.multilineTable(indent, value                        , this.document.multilineTableComma);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif ( isDate(value) ) {\n\t\t\t\t\tthis.appendInline = value.toISOString().replace('T', this.document.T).replace('Z', this.document.Z);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif ( _literal in value ) {\n\t\t\t\t\tconst literal = ( value                                                                       )[_literal];\n\t\t\t\t\tif ( typeof literal==='string' ) { this.appendInline = literal; }\n\t\t\t\t\telse if ( isArray$1(literal) ) {\n\t\t\t\t\t\tconst { length } = literal;\n\t\t\t\t\t\tif ( length ) {\n\t\t\t\t\t\t\tthis.appendInline = literal[0];\n\t\t\t\t\t\t\tlet index = 1;\n\t\t\t\t\t\t\twhile ( index!==length ) { this.appendLine = literal[index++] ; }\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse { throw TypeError$1(`literal value is broken`); }\n\t\t\t\t\t}\n\t\t\t\t\telse { throw TypeError$1(`literal value is broken`); }\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif ( isString(value) ) { throw TypeError$1(`TOML.stringify refuse to handle [object String]`); }\n\t\t\t\tif ( isNumber(value) ) { throw TypeError$1(`TOML.stringify refuse to handle [object Number]`); }\n\t\t\t\tif ( isBigInt(value) ) { throw TypeError$1(`TOML.stringify refuse to handle [object BigInt]`); }\n\t\t\t\tif ( isBoolean(value) ) { throw TypeError$1(`TOML.stringify refuse to handle [object Boolean]`); }\n\t\t\t\tif ( returnValueKeysIfValueIsDottedTable ) {\n\t\t\t\t\tconst keys = getOwnPropertyNames(value                        );\n\t\t\t\t\tif ( keys.length ) { return keys; }\n\t\t\t\t\tthis.appendInline = '{ }';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.inlineTable(indent, value                        );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'bigint':\n\t\t\t\tthis.appendInline = '' + value;\n\t\t\t\tbreak;\n\t\t\tcase 'number':\n\t\t\t\tthis.appendInline = this.document.asInteger(value) ? is(value, -0) ? '-0' : '' + value : float(value);\n\t\t\t\tbreak;\n\t\t\tcase 'string':\n\t\t\t\tthis.appendInline = singlelineString(value);\n\t\t\t\tbreak;\n\t\t\tcase 'boolean':\n\t\t\t\tthis.appendInline = value ? 'true' : 'false';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow TypeError$1(`toml can not stringify \"${typeof value}\" type value`);\n\t\t}\n\t\treturn null;\n\t}\n\t\n\t        singlelineArray (indent        , staticArray                      , inlineMode               ) {\n\t\tconst { length } = staticArray;\n\t\tif ( length ) {\n\t\t\tthis.appendInline = inlineMode&0b10 ? '[ ' : '[';\n\t\t\tthis.value(indent, staticArray[0] , false);\n\t\t\tlet index = 1;\n\t\t\twhile ( index!==length ) {\n\t\t\t\tthis.appendInline = ', ';\n\t\t\t\tthis.value(indent, staticArray[index++] , false);\n\t\t\t}\n\t\t\tthis.appendInline = inlineMode&0b10 ? ' ]' : ']';\n\t\t}\n\t\telse { this.appendInline = inlineMode&0b01 ? '[ ]' : '[]'; }\n\t}\n\t        staticArray (indent        , staticArray                      ) {\n\t\tthis.appendInline = '[';\n\t\tconst indent_ = indent + this.document.indent;\n\t\tconst { length } = staticArray;\n\t\tlet index = 0;\n\t\twhile ( index!==length ) {\n\t\t\tthis.appendLine = indent_;\n\t\t\tthis.value(indent_, staticArray[index++] , false);\n\t\t\tthis.appendInline = ',';\n\t\t}\n\t\tthis.appendLine = indent + ']';\n\t}\n\t\n\t        inlineTable (indent        , inlineTable                      ) {\n\t\tconst keys = getOwnPropertyNames(inlineTable);\n\t\tif ( keys.length ) {\n\t\t\tthis.appendInline = '{ ';\n\t\t\tthis.assignInline(indent, inlineTable, ``, keys);\n\t\t\tthis[this.length - 1] = this[this.length - 1] .slice(0, -2) + ' }';\n\t\t}\n\t\telse { this.appendInline = '{ }'; }\n\t}\n\t        multilineTable (indent        , inlineTable                      , comma                     ) {\n\t\tthis.appendInline = '{';\n\t\tthis.assignMultiline(indent, inlineTable, ``, getOwnPropertyNames(inlineTable), comma);\n\t\tthis.appendLine = indent + '}';\n\t}\n\t        assignInline                                 (indent        , inlineTable   , keys_                   , keys                            ) {\n\t\tfor ( const key of keys ) {\n\t\t\tconst value                 = inlineTable[key] ;\n\t\t\tconst keys = keys_ + $Key$(key);\n\t\t\tconst before_value = this.appendInline = $Keys(keys) + ' = ';\n\t\t\tconst valueKeysIfValueIsDottedTable = this.value(indent, value, true);\n\t\t\tif ( valueKeysIfValueIsDottedTable ) {\n\t\t\t\tthis[this.length - 1] = this[this.length - 1] .slice(0, -before_value.length);\n\t\t\t\tthis.assignInline(indent, value                        , keys + '.'                , valueKeysIfValueIsDottedTable);\n\t\t\t}\n\t\t\telse { this.appendInline = ', '; }\n\t\t}\n\t}\n\t        assignMultiline                                 (indent        , inlineTable   , keys_                   , keys                            , comma                     ) {\n\t\tconst indent_ = indent + this.document.indent;\n\t\tfor ( const key of keys ) {\n\t\t\tconst value                 = inlineTable[key] ;\n\t\t\tconst keys = keys_ + $Key$(key);\n\t\t\tthis.appendLine = indent_ + $Keys(keys) + ' = ';\n\t\t\tconst valueKeysIfValueIsDottedTable = this.value(indent_, value, true);\n\t\t\tif ( valueKeysIfValueIsDottedTable ) {\n\t\t\t\t--this.length;\n\t\t\t\tthis.assignMultiline(indent, value                        , keys + '.'                , valueKeysIfValueIsDottedTable, comma);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcomma\n\t\t\t\t\t? this.appendInline = ',' + getComment(inlineTable, key)\n\t\t\t\t\t: this.appendInlineIf = getComment(inlineTable, key);\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n\nconst name2code = /*#__PURE__*/Null$1({\n\tdocument: 0,\n\tsection: 1,\n\theader: 2,\n\tpairs: 3,\n\tpair: 4,\n}         );\n\nconst { test: IS_INDENT } = theRegExp(/^[\\t ]*$/);\n\nconst return_false = () => false;\n\nclass TOMLDocument extends Array$1              {\n\t\n\t         get ['constructor'] () { return Array$1; }\n\t\n\t0 = new TOMLSection(this);\n\t\n\t         asInteger                                          = return_false;\n\t         newline                     = '';\n\t         newlineUnderSection          = true;\n\t         newlineUnderSectionButPair          = true;\n\t         newlineUnderHeader          = true;\n\t         newlineUnderPair          = false;\n\t         newlineUnderPairButDotted          = false;\n\t         newlineUnderDotted          = false;\n\t         indent         = '\\t';\n\t         T                  = 'T';\n\t         Z            = 'Z';\n\t         nullDisabled          = true;\n\t         multilineTableDisabled          = true;\n\t         multilineTableComma          ;\n\t         preferCommentForThis          = false;\n\t         $singlelineArray                ;\n\t\n\tconstructor (options                  ) {\n\t\t\n\t\tsuper();\n\t\t\n\t\tif ( options==null ) { return this; }\n\t\t\n\t\tconst { integer } = options;\n\t\tif ( integer===undefined ) ;\n\t\telse if ( integer===MAX_SAFE_INTEGER ) { this.asInteger = isSafeInteger; }\n\t\telse if ( typeof integer==='number' ) {\n\t\t\tif ( !isSafeInteger(integer) ) { throw RangeError$1(`TOML.stringify(,{integer}) can only be a safe integer`); }\n\t\t\tconst max = integer>=0 ? integer : -integer - 1;\n\t\t\tconst min = integer>=0 ? -integer : integer;\n\t\t\tthis.asInteger = (number        ) => isSafeInteger(number) && min<=number && number<=max;\n\t\t}\n\t\telse { throw TypeError$1(`TOML.stringify(,{integer}) can only be number`); }\n\t\t\n\t\tconst { newline } = options;\n\t\tif ( newline===undefined ) ;\n\t\telse if ( newline==='\\n' || newline==='\\r\\n' ) { this.newline = newline; }\n\t\telse {\n\t\t\tthrow typeof newline==='string'\n\t\t\t\t? SyntaxError$1(`TOML.stringify(,{newline}) can only be valid TOML newline`)\n\t\t\t\t: TypeError$1(`TOML.stringify(,{newline}) can only be string`);\n\t\t}\n\t\t\n\t\tconst { preferCommentFor } = options;\n\t\tif ( preferCommentFor===undefined ) ;\n\t\telse if ( preferCommentFor==='this' || preferCommentFor==='key' ) { this.preferCommentForThis = preferCommentFor==='this'; }\n\t\telse { throw TypeError$1(`TOML.stringify(,{preferCommentFor) can only be 'key' or 'this'`); }\n\t\t\n\t\tconst { [options.newlineAround || 'header']: around = name2code.header } = name2code;\n\t\tthis.newlineUnderSection = around>0;\n\t\tthis.newlineUnderSectionButPair = around===1 || around===2;\n\t\tthis.newlineUnderHeader = around>1;\n\t\tthis.newlineUnderPair = around>2;\n\t\tthis.newlineUnderPairButDotted = around===3;\n\t\tthis.newlineUnderDotted = around>3;\n\t\t\n\t\tconst { indent } = options;\n\t\tif ( indent===undefined ) ;\n\t\telse if ( typeof indent==='string' ) {\n\t\t\tif ( !IS_INDENT(indent) ) { throw SyntaxError$1(`TOML.stringify(,{indent}) can only include Tab or Space`); }\n\t\t\tthis.indent = indent;\n\t\t}\n\t\telse if ( typeof indent==='number' ) {\n\t\t\tif ( !isSafeInteger(indent) ) { throw RangeError$1(`TOML.stringify(,{indent:${indent}}) is out of range`); }\n\t\t\tthis.indent = ' '.repeat(indent);\n\t\t}\n\t\telse { throw TypeError$1(`TOML.stringify(,{indent}) can not be \"${typeof indent}\" type`); }\n\t\t\n\t\tconst { T } = options;\n\t\tif ( T===undefined ) ;\n\t\telse if ( T===' ' || T==='t' || T==='T' ) { this.T = T; }\n\t\telse { throw TypeError$1(`TOML.stringify(,{T}) can only be \"T\" or \" \" or \"t\"`); }\n\t\t\n\t\tconst { Z } = options;\n\t\tif ( Z===undefined ) ;\n\t\telse if ( Z==='z' || Z==='Z' ) { this.Z = Z; }\n\t\telse { throw TypeError$1(`TOML.stringify(,{Z}) can only be \"Z\" or \"z\"`); }\n\t\t\n\t\tif ( options.xNull ) { this.nullDisabled = false; }\n\t\t\n\t\tconst { xBeforeNewlineInMultilineTable } = options;\n\t\tif ( xBeforeNewlineInMultilineTable===undefined ) ;\n\t\telse if ( xBeforeNewlineInMultilineTable==='' || xBeforeNewlineInMultilineTable===',' ) {\n\t\t\tthis.multilineTableDisabled = false;\n\t\t\tthis.multilineTableComma = !!xBeforeNewlineInMultilineTable;\n\t\t}\n\t\telse { throw TypeError$1(`TOML.stringify(,{xBeforeNewlineInMultilineTable}) can only be \"\" or \",\"`); }\n\t\t\n\t\tconst $singlelineArray = options.forceInlineArraySpacing;\n\t\tswitch ( $singlelineArray ) {\n\t\t\tcase undefined:\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\tcase 1:\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\t\tthis.$singlelineArray = $singlelineArray;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow typeof $singlelineArray==='number'\n\t\t\t\t\t? RangeError$1(`array inline mode must be 0 | 1 | 2 | 3, not including ${$singlelineArray}`)\n\t\t\t\t\t: TypeError$1(`array inline mode must be \"number\" type, not including ${$singlelineArray===null ? '\"null\"' : typeof $singlelineArray}`);\n\t\t}\n\t\t\n\t\treturn this;\n\t\t\n\t}\n\t\n\tappendSection () { return this[this.length] = new TOMLSection(this); }\n\t\n}\n\nconst linesFromStringify = new WeakSet$1                   ();\nconst beLinesFromStringify = /*#__PURE__*/add.bind(linesFromStringify);\nconst isLinesFromStringify = /*#__PURE__*/has.bind(linesFromStringify);\nconst stringify = (rootTable                , options                  )                    => {\n\tconst document = new TOMLDocument(options);\n\tconst section = document[0];\n\tsection[0] = '';\n\tx      (section.assignBlock(``, ``, rootTable, getOwnPropertyNames(rootTable)));\n\tdocument.newlineUnderSectionButPair && section.length!==1 && section.appendNewline();\n\tdocument.newlineUnderSection || document[document.length - 1] .appendNewline();\n\tif ( document.newline ) { return document.join(document.newline); }\n\tconst lines = document.flat();\n\tbeLinesFromStringify(lines);\n\treturn lines;\n};\nconst multiline = /*#__PURE__*/( () => {\n\tconst multiline = (value                                                   , string         ) =>\n\t\ttypeof value==='string' ? LiteralObject(( multilineNeedBasic(value) ? multilineBasicString : multilineLiteralString )(( '\\n' + value ).split('\\n')         ), value) :\n\t\t\tisArray$1(value) ? LiteralObject(multilineString(Lines(value)), typeof string==='string' ? string : Null$1(null)) :\n\t\t\t\tmultilineTable(value);\n\tmultiline.basic = (lines                            , string         ) =>\n\t\ttypeof lines==='string'\n\t\t\t? LiteralObject(multilineBasicString(( '\\n' + lines ).split('\\n')         ), lines)\n\t\t\t: LiteralObject(multilineBasicString(Lines(lines)), typeof string==='string' ? string : Null$1(null))\n\t;\n\tmultiline.array = multilineArray;\n\tfreeze(multiline);\n\treturn multiline;\n} )();\nconst basic = (value        ) => LiteralObject(singlelineBasicString(value), value);\nconst literal = (literal                               , ...chars          ) => {\n\tif ( typeof literal==='string' ) {\n\t\tif ( chars.length===1 ) {\n\t\t\treturn LiteralObject(literal.includes('\\n') ? literal.split('\\n')                            : literal, chars[0]                            );\n\t\t}\n\t}\n\telse {\n\t\tlet index = chars.length;\n\t\tif ( index ) {\n\t\t\tconst { raw } = literal;\n\t\t\tliteral = raw[index] ;\n\t\t\twhile ( index ) { chars[--index] += raw[index] ; }\n\t\t\tliteral = chars.join('') + literal;\n\t\t}\n\t\telse { literal = literal.raw[0] ; }\n\t}\n\treturn LiteralObject(literal.includes('\\n') ? literal.split('\\n')                            : literal, Null$1(null));\n};\n\nconst textDecoder = /*#__PURE__*/new TextDecoder$1('utf-8', Null$1({ fatal: true, ignoreBOM: false }));\nconst binary2string = (arrayBufferLike                          )         => {\n\tif ( isView(arrayBufferLike) ? arrayBufferLike.length!==arrayBufferLike.byteLength : !isArrayBuffer(arrayBufferLike) ) { throw TypeError$1(`only Uint8Array or ArrayBuffer is acceptable`); }\n\ttry { return textDecoder.decode(arrayBufferLike); }\n\tcatch { throw Error$1(`A TOML doc must be a (ful-scalar) valid UTF-8 file, without any unknown code point.`); }\n};\nconst isBinaryLike = (value        )                                    => 'byteLength' in value;///\n\nconst { test: includesNonScalar } = theRegExp(/[\\uD800-\\uDFFF]/u);\nconst assertFulScalar = (string        )       => {\n\tif ( clearRegExp$1(includesNonScalar(string)) ) { throw Error$1(`A TOML doc must be a (ful-scalar) valid UTF-8 file, without any uncoupled UCS-4 character code.`); }\n};\n\nlet holding          = false;\n\nconst parse = (source        , specificationVersion                                   , multilineStringJoiner                                                                                                                       , bigint                                       , x                              , argsMode                 )        => {\n\tlet sourcePath         = '';\n\tif ( typeof source==='object' && source ) {\n\t\tif ( isArray$1(source) ) { throw TypeError$1(isLinesFromStringify(source) ? `TOML.parse(array from TOML.stringify(,{newline?}))` : `TOML.parse(array)`); }\n\t\telse if ( isBinaryLike(source) ) { source = binary2string(source); }\n\t\telse {\n\t\t\tsourcePath = source.path;\n\t\t\tif ( typeof sourcePath!=='string' ) { throw TypeError$1(`TOML.parse(source.path)`); }\n\t\t\tconst { data, require: req = typeof require==='function' ? require : undefined$1 } = source;\n\t\t\tif ( req ) {\n\t\t\t\tconst { resolve } = req;\n\t\t\t\tif ( resolve!=null ) {\n\t\t\t\t\tconst { paths } = resolve;\n\t\t\t\t\tif ( paths!=null ) {\n\t\t\t\t\t\tconst ret = apply$1(paths, resolve, [ '' ]);\n\t\t\t\t\t\tif ( ret!=null ) {\n\t\t\t\t\t\t\tconst val = ret[0];\n\t\t\t\t\t\t\tif ( val!=null ) {\n\t\t\t\t\t\t\t\tconst dirname_ = val.replace(/node_modules$/, '');\n\t\t\t\t\t\t\t\tif ( dirname_ ) {\n\t\t\t\t\t\t\t\t\tsourcePath = ( req                                          )('path').resolve(dirname_, sourcePath);\n\t\t\t\t\t\t\t\t\tif ( typeof sourcePath!=='string' ) { throw TypeError$1(`TOML.parse(source.require('path').resolve)`); }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( data===undefined$1 ) {\n\t\t\t\t\tconst data = ( req                                      )('fs').readFileSync(sourcePath);\n\t\t\t\t\tif ( typeof data==='object' && data && isBinaryLike(data) ) { source = binary2string(data); }\n\t\t\t\t\telse { throw TypeError$1(`TOML.parse(source.require('fs').readFileSync)`); }\n\t\t\t\t}\n\t\t\t\telse if ( typeof data==='string' ) { assertFulScalar(source = data); }\n\t\t\t\telse if ( typeof data==='object' && data && isBinaryLike(data) ) { source = binary2string(data); }\n\t\t\t\telse { throw TypeError$1(`TOML.parse(source.data)`); }\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( data===undefined$1 ) { throw TypeError$1(`TOML.parse(source.data|source.require)`); }\n\t\t\t\telse if ( typeof data==='string' ) { assertFulScalar(source = data); }\n\t\t\t\telse if ( typeof data==='object' && data && isBinaryLike(data) ) { source = binary2string(data); }\n\t\t\t\telse { throw TypeError$1(`TOML.parse(source.data)`); }\n\t\t\t}\n\t\t}\n\t}\n\telse if ( typeof source==='string' ) { assertFulScalar(source); }\n\telse { throw TypeError$1(`TOML.parse(source)`); }\n\tlet joiner                    ;\n\tlet keys                                 ;\n\tif ( typeof multilineStringJoiner==='object' && multilineStringJoiner ) {\n\t\tif ( bigint!==undefined$1 || x!==undefined$1 ) { throw TypeError$1(`options mode ? args mode`); }\n\t\tjoiner = multilineStringJoiner.joiner;\n\t\tbigint = multilineStringJoiner.bigint;\n\t\tkeys = multilineStringJoiner.keys;\n\t\tx = multilineStringJoiner.x;\n\t\targsMode = '';\n\t}\n\telse { joiner = multilineStringJoiner; }\n\tlet rootTable       ;\n\tlet process                 ;\n\tif ( holding ) { throw Error$1(`parsing during parsing.`); }\n\tholding = true;\n\ttry {\n\t\tuse(specificationVersion, joiner, bigint, keys, x, argsMode);\n\t\ttodo(source, sourcePath);\n\t\tsource && source[0]==='\\uFEFF' && throws(TypeError$1(`TOML content (string) should not start with BOM (U+FEFF)` + where(' at ')));\n\t\trootTable = Root();\n\t\tprocess = Process();\n\t}\n\tfinally {\n\t\tdone();//clearWeakSets();\n\t\tclear();\n\t\tholding = false;\n\t\tclearRegExp$1();\n\t}\n\tprocess && process();\n\treturn rootTable;\n};\n\nconst parse$1 = /*#__PURE__*/assign$1(\n\t(source        , specificationVersion                                   , multilineStringJoiner         , useBigInt                   , xOptions                   ) =>\n\t\ttypeof specificationVersion==='number'\n\t\t\t? parse(source, specificationVersion, multilineStringJoiner, useBigInt, xOptions, ',,')\n\t\t\t: parse(source, 1.0, specificationVersion          , multilineStringJoiner                                       , useBigInt                    , ',')\n\t,\n\t{\n\t\t'1.0': (source        , multilineStringJoiner         , useBigInt                   , xOptions                   ) => parse(source, 0.1, multilineStringJoiner, useBigInt, xOptions, ','),\n\t\t1.0: (source        , multilineStringJoiner         , useBigInt                   , xOptions                   ) => parse(source, 1.0, multilineStringJoiner, useBigInt, xOptions, ','),\n\t\t0.5: (source        , multilineStringJoiner         , useBigInt                   , xOptions                   ) => parse(source, 0.5, multilineStringJoiner, useBigInt, xOptions, ','),\n\t\t0.4: (source        , multilineStringJoiner         , useBigInt                   , xOptions                   ) => parse(source, 0.4, multilineStringJoiner, useBigInt, xOptions, ','),\n\t\t0.3: (source        , multilineStringJoiner         , useBigInt                   , xOptions                   ) => parse(source, 0.3, multilineStringJoiner, useBigInt, xOptions, ','),\n\t\t0.2: (source        , multilineStringJoiner         , useBigInt                   , xOptions                   ) => parse(source, 0.2, multilineStringJoiner, useBigInt, xOptions, ','),\n\t\t0.1: (source        , multilineStringJoiner         , useBigInt                   , xOptions                   ) => parse(source, 0.1, multilineStringJoiner, useBigInt, xOptions, ','),\n\t}\n);\n\nconst _export = /*#__PURE__*/Default({\n\tversion,\n\tparse: parse$1,\n\tstringify,\n\tSection, inline, multiline, basic, literal, commentFor, commentForThis,\n\tOffsetDateTime, LocalDateTime, LocalDate, LocalTime,\n\tisInline, isSection,\n\tKeys,\n});\n\nexport { Keys, LocalDate, LocalDateTime, LocalTime, OffsetDateTime, Section, basic, commentFor, commentForThis, _export as default, inline, isInline, isSection, literal, multiline, parse$1 as parse, stringify, version };\n\n//# sourceMappingURL=index.mjs.map"],"names":[],"sourceRoot":""}