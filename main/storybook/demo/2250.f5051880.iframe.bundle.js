(self.webpackChunkgeonetwork_ui=self.webpackChunkgeonetwork_ui||[]).push([[2250],{"./libs/data-access/gn4/src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{au:()=>ApiModule,VK:()=>Configuration,u:()=>GroupsApiService,lh:()=>MeApiService,uX:()=>SearchApiService,rr:()=>SiteApiService,f6:()=>SourcesApiService,EM:()=>ToolsApiService,V5:()=>UserselectionsApiService});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),http=__webpack_require__("./node_modules/@angular/common/fesm2022/http.mjs");class CustomHttpParameterCodec{encodeKey(k){return encodeURIComponent(k)}encodeValue(v){return encodeURIComponent(v)}decodeKey(k){return decodeURIComponent(k)}decodeValue(v){return decodeURIComponent(v)}}const BASE_PATH=new core.InjectionToken("basePath");class Configuration{constructor(configurationParameters={}){this.apiKeys=configurationParameters.apiKeys,this.username=configurationParameters.username,this.password=configurationParameters.password,this.accessToken=configurationParameters.accessToken,this.basePath=configurationParameters.basePath,this.withCredentials=configurationParameters.withCredentials,this.encoder=configurationParameters.encoder,configurationParameters.credentials?this.credentials=configurationParameters.credentials:this.credentials={}}selectHeaderContentType(contentTypes){if(0===contentTypes.length)return;const type=contentTypes.find((x=>this.isJsonMime(x)));return void 0===type?contentTypes[0]:type}selectHeaderAccept(accepts){if(0===accepts.length)return;const type=accepts.find((x=>this.isJsonMime(x)));return void 0===type?accepts[0]:type}isJsonMime(mime){const jsonMime=new RegExp("^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$","i");return null!==mime&&(jsonMime.test(mime)||"application/json-patch+json"===mime.toLowerCase())}lookupCredential(key){const value=this.credentials[key];return"function"==typeof value?value():value}}var _class;let CustomstyleApiService=((_class=class CustomstyleApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getCssStyle(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/customstyle`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}saveCssStyle(body,observe="body",reportProgress=!1,options){if(null==body)throw new Error("Required parameter body was null or undefined when calling saveCssStyle.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/customstyle`,body,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],_class);var groups_api_service_class;CustomstyleApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],CustomstyleApiService);let GroupsApiService=((groups_api_service_class=class GroupsApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}addGroup(groupApiModel,observe="body",reportProgress=!1,options){if(null==groupApiModel)throw new Error("Required parameter groupApiModel was null or undefined when calling addGroup.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/groups`,groupApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deleteGroup(groupIdentifier,force,observe="body",reportProgress=!1,options){if(null==groupIdentifier)throw new Error("Required parameter groupIdentifier was null or undefined when calling deleteGroup.");let queryParameters=new http.LE({encoder:this.encoder});null!=force&&(queryParameters=this.addToHttpParams(queryParameters,force,"force"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/groups/${encodeURIComponent(String(groupIdentifier))}`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getGroup(groupIdentifier,observe="body",reportProgress=!1,options){if(null==groupIdentifier)throw new Error("Required parameter groupIdentifier was null or undefined when calling getGroup.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/groups/${encodeURIComponent(String(groupIdentifier))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getGroupUsers(groupIdentifier,observe="body",reportProgress=!1,options){if(null==groupIdentifier)throw new Error("Required parameter groupIdentifier was null or undefined when calling getGroupUsers.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/groups/${encodeURIComponent(String(groupIdentifier))}/users`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getGroups(withReservedGroup,profile,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=withReservedGroup&&(queryParameters=this.addToHttpParams(queryParameters,withReservedGroup,"withReservedGroup")),null!=profile&&(queryParameters=this.addToHttpParams(queryParameters,profile,"profile"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/groups`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}updateGroup(groupIdentifier,groupApiModel,observe="body",reportProgress=!1,options){if(null==groupIdentifier)throw new Error("Required parameter groupIdentifier was null or undefined when calling updateGroup.");if(null==groupApiModel)throw new Error("Required parameter groupApiModel was null or undefined when calling updateGroup.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/groups/${encodeURIComponent(String(groupIdentifier))}`,groupApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],groups_api_service_class);var harvesters_api_service_class;GroupsApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],GroupsApiService);let HarvestersApiService=((harvesters_api_service_class=class HarvestersApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}assignHarvestedRecordToSource(harvesterUuid,source,observe="body",reportProgress=!1,options){if(null==harvesterUuid)throw new Error("Required parameter harvesterUuid was null or undefined when calling assignHarvestedRecordToSource.");if(null==source)throw new Error("Required parameter source was null or undefined when calling assignHarvestedRecordToSource.");let queryParameters=new http.LE({encoder:this.encoder});null!=source&&(queryParameters=this.addToHttpParams(queryParameters,source,"source"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/harvesters/${encodeURIComponent(String(harvesterUuid))}/assign`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],harvesters_api_service_class);var identifiers_api_service_class;HarvestersApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],HarvestersApiService);let IdentifiersApiService=((identifiers_api_service_class=class IdentifiersApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}addIdentifier(metadataIdentifierTemplateApiModel,observe="body",reportProgress=!1,options){if(null==metadataIdentifierTemplateApiModel)throw new Error("Required parameter metadataIdentifierTemplateApiModel was null or undefined when calling addIdentifier.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/identifiers`,metadataIdentifierTemplateApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getIdentifiers(userDefinedOnly,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=userDefinedOnly&&(queryParameters=this.addToHttpParams(queryParameters,userDefinedOnly,"userDefinedOnly"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/identifiers`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}updateIdentifier(identifier,metadataIdentifierTemplateApiModel,observe="body",reportProgress=!1,options){if(null==identifier)throw new Error("Required parameter identifier was null or undefined when calling updateIdentifier.");if(null==metadataIdentifierTemplateApiModel)throw new Error("Required parameter metadataIdentifierTemplateApiModel was null or undefined when calling updateIdentifier.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/identifiers/${encodeURIComponent(String(identifier))}`,metadataIdentifierTemplateApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],identifiers_api_service_class);var languages_api_service_class;IdentifiersApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],IdentifiersApiService);let LanguagesApiService=((languages_api_service_class=class LanguagesApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getIsoLanguages(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/isolanguages`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],languages_api_service_class);var links_api_service_class;LanguagesApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],LanguagesApiService);let LinksApiService=((links_api_service_class=class LinksApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}analyzeRecordLinks(uuids,bucket,removeFirst,analyze,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),null!=removeFirst&&(queryParameters=this.addToHttpParams(queryParameters,removeFirst,"removeFirst")),null!=analyze&&(queryParameters=this.addToHttpParams(queryParameters,analyze,"analyze"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/records/links`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRecordLinks(filter,groupIdFilter,groupOwnerIdFilter,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=filter&&(queryParameters=this.addToHttpParams(queryParameters,filter,"filter")),groupIdFilter&&groupIdFilter.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"groupIdFilter")})),groupOwnerIdFilter&&groupOwnerIdFilter.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"groupOwnerIdFilter")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/links`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRecordLinksAsCsv(filter,groupIdFilter,groupOwnerIdFilter,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=filter&&(queryParameters=this.addToHttpParams(queryParameters,filter,"filter")),groupIdFilter&&groupIdFilter.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"groupIdFilter")})),groupOwnerIdFilter&&groupOwnerIdFilter.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"groupOwnerIdFilter")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/links/csv`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}purgeAll(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/records/links`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],links_api_service_class);var logos_api_service_class;LinksApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],LinksApiService);let LogosApiService=((logos_api_service_class=class LogosApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}addLogo(file,overwrite,observe="body",reportProgress=!1,options){if(null==file)throw new Error("Required parameter file was null or undefined when calling addLogo.");let queryParameters=new http.LE({encoder:this.encoder});file&&file.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"file")})),null!=overwrite&&(queryParameters=this.addToHttpParams(queryParameters,overwrite,"overwrite"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/logos`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deleteLogo(file,observe="body",reportProgress=!1,options){if(null==file)throw new Error("Required parameter file was null or undefined when calling deleteLogo.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/logos/${encodeURIComponent(String(file))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getLogos(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/logos`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],logos_api_service_class);var mapservers_api_service_class;LogosApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],LogosApiService);let MapserversApiService=((mapservers_api_service_class=class MapserversApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}addMapserver(mapServerApiModel,observe="body",reportProgress=!1,options){if(null==mapServerApiModel)throw new Error("Required parameter mapServerApiModel was null or undefined when calling addMapserver.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/mapservers`,mapServerApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deleteMapserverResource(mapserverId,metadataUuid,resource,metadataTitle,metadataAbstract,observe="body",reportProgress=!1,options){if(null==mapserverId)throw new Error("Required parameter mapserverId was null or undefined when calling deleteMapserverResource.");if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling deleteMapserverResource.");if(null==resource)throw new Error("Required parameter resource was null or undefined when calling deleteMapserverResource.");let queryParameters=new http.LE({encoder:this.encoder});null!=resource&&(queryParameters=this.addToHttpParams(queryParameters,resource,"resource")),null!=metadataTitle&&(queryParameters=this.addToHttpParams(queryParameters,metadataTitle,"metadataTitle")),null!=metadataAbstract&&(queryParameters=this.addToHttpParams(queryParameters,metadataAbstract,"metadataAbstract"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/plain"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/mapservers/${encodeURIComponent(String(mapserverId))}/records/${encodeURIComponent(String(metadataUuid))}`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getMapserver(mapserverId,observe="body",reportProgress=!1,options){if(null==mapserverId)throw new Error("Required parameter mapserverId was null or undefined when calling getMapserver.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/mapservers/${encodeURIComponent(String(mapserverId))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getMapserverResource(mapserverId,metadataUuid,resource,metadataTitle,metadataAbstract,observe="body",reportProgress=!1,options){if(null==mapserverId)throw new Error("Required parameter mapserverId was null or undefined when calling getMapserverResource.");if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getMapserverResource.");if(null==resource)throw new Error("Required parameter resource was null or undefined when calling getMapserverResource.");let queryParameters=new http.LE({encoder:this.encoder});null!=resource&&(queryParameters=this.addToHttpParams(queryParameters,resource,"resource")),null!=metadataTitle&&(queryParameters=this.addToHttpParams(queryParameters,metadataTitle,"metadataTitle")),null!=metadataAbstract&&(queryParameters=this.addToHttpParams(queryParameters,metadataAbstract,"metadataAbstract"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/plain"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/mapservers/${encodeURIComponent(String(mapserverId))}/records/${encodeURIComponent(String(metadataUuid))}`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getMapservers(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/mapservers`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}publishMapserverResource(mapserverId,metadataUuid,resource,metadataTitle,metadataAbstract,observe="body",reportProgress=!1,options){if(null==mapserverId)throw new Error("Required parameter mapserverId was null or undefined when calling publishMapserverResource.");if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling publishMapserverResource.");if(null==resource)throw new Error("Required parameter resource was null or undefined when calling publishMapserverResource.");let queryParameters=new http.LE({encoder:this.encoder});null!=resource&&(queryParameters=this.addToHttpParams(queryParameters,resource,"resource")),null!=metadataTitle&&(queryParameters=this.addToHttpParams(queryParameters,metadataTitle,"metadataTitle")),null!=metadataAbstract&&(queryParameters=this.addToHttpParams(queryParameters,metadataAbstract,"metadataAbstract"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/plain"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/mapservers/${encodeURIComponent(String(mapserverId))}/records/${encodeURIComponent(String(metadataUuid))}`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}updateMapserver(mapserverId,mapServerApiModel,observe="body",reportProgress=!1,options){if(null==mapserverId)throw new Error("Required parameter mapserverId was null or undefined when calling updateMapserver.");if(null==mapServerApiModel)throw new Error("Required parameter mapServerApiModel was null or undefined when calling updateMapserver.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/mapservers/${encodeURIComponent(String(mapserverId))}`,mapServerApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],mapservers_api_service_class);var me_api_service_class;MapserversApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],MapserversApiService);let MeApiService=((me_api_service_class=class MeApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getMe(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/me`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],me_api_service_class);var operations_api_service_class;MeApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],MeApiService);let OperationsApiService=((operations_api_service_class=class OperationsApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getOperations(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/operations`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],operations_api_service_class);var pages_api_service_class;OperationsApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],OperationsApiService);let PagesApiService=((pages_api_service_class=class PagesApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getPage(language,pageId,observe="body",reportProgress=!1,options){if(null==language)throw new Error("Required parameter language was null or undefined when calling getPage.");if(null==pageId)throw new Error("Required parameter pageId was null or undefined when calling getPage.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/pages/${encodeURIComponent(String(language))}/${encodeURIComponent(String(pageId))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getPageContent(language,pageId,observe="body",reportProgress=!1,options){if(null==language)throw new Error("Required parameter language was null or undefined when calling getPageContent.");if(null==pageId)throw new Error("Required parameter pageId was null or undefined when calling getPageContent.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/plain;charset=UTF-8"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/pages/${encodeURIComponent(String(language))}/${encodeURIComponent(String(pageId))}/content`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}listPages(language,section,format,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=language&&(queryParameters=this.addToHttpParams(queryParameters,language,"language")),null!=section&&(queryParameters=this.addToHttpParams(queryParameters,section,"section")),null!=format&&(queryParameters=this.addToHttpParams(queryParameters,format,"format"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/pages/list`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],pages_api_service_class);var processes_api_service_class;PagesApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],PagesApiService);let ProcessesApiService=((processes_api_service_class=class ProcessesApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}_delete(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/processes/reports`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getProcessReport(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/processes/reports`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}previewProcessRecords(process,uuids,bucket,appendFirst,observe="body",reportProgress=!1,options){if(null==process)throw new Error("Required parameter process was null or undefined when calling previewProcessRecords.");let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),null!=appendFirst&&(queryParameters=this.addToHttpParams(queryParameters,appendFirst,"appendFirst"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/processes/${encodeURIComponent(String(process))}`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}processRecords(process,uuids,bucket,updateDateStamp,index,observe="body",reportProgress=!1,options){if(null==process)throw new Error("Required parameter process was null or undefined when calling processRecords.");let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),null!=updateDateStamp&&(queryParameters=this.addToHttpParams(queryParameters,updateDateStamp,"updateDateStamp")),null!=index&&(queryParameters=this.addToHttpParams(queryParameters,index,"index"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/processes/${encodeURIComponent(String(process))}`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}searchAndReplace(process,uuids,bucket,isTesting,isCaseInsensitive,vacuumMode,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=process&&(queryParameters=this.addToHttpParams(queryParameters,process,"process")),uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),null!=isTesting&&(queryParameters=this.addToHttpParams(queryParameters,isTesting,"isTesting")),null!=isCaseInsensitive&&(queryParameters=this.addToHttpParams(queryParameters,isCaseInsensitive,"isCaseInsensitive")),null!=vacuumMode&&(queryParameters=this.addToHttpParams(queryParameters,vacuumMode,"vacuumMode"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/processes/search-and-replace`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],processes_api_service_class);var records_api_service_class;ProcessesApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],ProcessesApiService);let RecordsApiService=((records_api_service_class=class RecordsApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}addElement(metadataUuid,ref,direction,displayAttributes,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling addElement.");if(null==ref)throw new Error("Required parameter ref was null or undefined when calling addElement.");if(null==direction)throw new Error("Required parameter direction was null or undefined when calling addElement.");let queryParameters=new http.LE({encoder:this.encoder});null!=ref&&(queryParameters=this.addToHttpParams(queryParameters,ref,"ref")),null!=displayAttributes&&(queryParameters=this.addToHttpParams(queryParameters,displayAttributes,"displayAttributes"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/editor/elements/${encodeURIComponent(String(direction))}`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}addSamples(schema,observe="body",reportProgress=!1,options){if(null==schema)throw new Error("Required parameter schema was null or undefined when calling addSamples.");let queryParameters=new http.LE({encoder:this.encoder});schema&&schema.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"schema")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/samples`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}addTemplates(schema,observe="body",reportProgress=!1,options){if(null==schema)throw new Error("Required parameter schema was null or undefined when calling addTemplates.");let queryParameters=new http.LE({encoder:this.encoder});schema&&schema.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"schema")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/templates`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}applyQuery(metadataUuid,savedQuery,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling applyQuery.");if(null==savedQuery)throw new Error("Required parameter savedQuery was null or undefined when calling applyQuery.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/query/${encodeURIComponent(String(savedQuery))}`,null,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}batchEdit(batchEditParameterApiModel,uuids,bucket,updateDateStamp,observe="body",reportProgress=!1,options){if(null==batchEditParameterApiModel)throw new Error("Required parameter batchEditParameterApiModel was null or undefined when calling batchEdit.");let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),null!=updateDateStamp&&(queryParameters=this.addToHttpParams(queryParameters,updateDateStamp,"updateDateStamp"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/batchediting`,batchEditParameterApiModel,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}cancelEdits(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling cancelEdits.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/editor`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}checkDoiStatus(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling checkDoiStatus.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/doi/checkPreConditions`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}checkValidation(testId,observe="body",reportProgress=!1,options){if(null==testId)throw new Error("Required parameter testId was null or undefined when calling checkValidation.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(testId))}/validate/inspire`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}cleanValidationStatus(uuids,bucket,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/records/validate`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}create(sourceUuid,group,metadataType,targetUuid,isVisibleByAllGroupMembers,category,hasCategoryOfSource,isChildOfSource,observe="body",reportProgress=!1,options){if(null==sourceUuid)throw new Error("Required parameter sourceUuid was null or undefined when calling create.");if(null==group)throw new Error("Required parameter group was null or undefined when calling create.");let queryParameters=new http.LE({encoder:this.encoder});null!=metadataType&&(queryParameters=this.addToHttpParams(queryParameters,metadataType,"metadataType")),null!=sourceUuid&&(queryParameters=this.addToHttpParams(queryParameters,sourceUuid,"sourceUuid")),null!=targetUuid&&(queryParameters=this.addToHttpParams(queryParameters,targetUuid,"targetUuid")),null!=group&&(queryParameters=this.addToHttpParams(queryParameters,group,"group")),null!=isVisibleByAllGroupMembers&&(queryParameters=this.addToHttpParams(queryParameters,isVisibleByAllGroupMembers,"isVisibleByAllGroupMembers")),category&&category.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"category")})),null!=hasCategoryOfSource&&(queryParameters=this.addToHttpParams(queryParameters,hasCategoryOfSource,"hasCategoryOfSource")),null!=isChildOfSource&&(queryParameters=this.addToHttpParams(queryParameters,isChildOfSource,"isChildOfSource"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/duplicate`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}createDoi(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling createDoi.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/doi`,null,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deleteAttribute(metadataUuid,ref,displayAttributes,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling deleteAttribute.");if(null==ref)throw new Error("Required parameter ref was null or undefined when calling deleteAttribute.");let queryParameters=new http.LE({encoder:this.encoder});null!=ref&&(queryParameters=this.addToHttpParams(queryParameters,ref,"ref")),null!=displayAttributes&&(queryParameters=this.addToHttpParams(queryParameters,displayAttributes,"displayAttributes"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/editor/attributes`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deleteElement(metadataUuid,ref,parent,displayAttributes,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling deleteElement.");if(null==ref)throw new Error("Required parameter ref was null or undefined when calling deleteElement.");if(null==parent)throw new Error("Required parameter parent was null or undefined when calling deleteElement.");let queryParameters=new http.LE({encoder:this.encoder});ref&&ref.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"ref")})),null!=parent&&(queryParameters=this.addToHttpParams(queryParameters,parent,"parent")),null!=displayAttributes&&(queryParameters=this.addToHttpParams(queryParameters,displayAttributes,"displayAttributes"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/editor/elements`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deleteRecords(uuids,bucket,withBackup,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),null!=withBackup&&(queryParameters=this.addToHttpParams(queryParameters,withBackup,"withBackup"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/records`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deleteTagForRecords(id,uuids,bucket,observe="body",reportProgress=!1,options){if(null==id)throw new Error("Required parameter id was null or undefined when calling deleteTagForRecords.");let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),id&&id.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"id")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/records/tags`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deleteTags(metadataUuid,id,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling deleteTags.");let queryParameters=new http.LE({encoder:this.encoder});id&&id.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"id")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/tags`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}downloadBackup(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/zip"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/backups/latest`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}enableVersionControl(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling enableVersionControl.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/versions`,null,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}enableVersionControlForRecords(uuids,bucket,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/versions`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}exportAsCsv(uuids,bucket,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/csv`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}exportAsMef(uuids,bucket,format,withRelated,withXLinksResolved,withXLinkAttribute,addSchemaLocation,approved,accept,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),null!=format&&(queryParameters=this.addToHttpParams(queryParameters,format,"format")),null!=withRelated&&(queryParameters=this.addToHttpParams(queryParameters,withRelated,"withRelated")),null!=withXLinksResolved&&(queryParameters=this.addToHttpParams(queryParameters,withXLinksResolved,"withXLinksResolved")),null!=withXLinkAttribute&&(queryParameters=this.addToHttpParams(queryParameters,withXLinkAttribute,"withXLinkAttribute")),null!=addSchemaLocation&&(queryParameters=this.addToHttpParams(queryParameters,addSchemaLocation,"addSchemaLocation")),null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved"));let headers=this.defaultHeaders;null!=accept&&(headers=headers.set("Accept",String(accept)));let httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/zip`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}exportAsPdf(uuids,bucket,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/pdf`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getActiveUsers(dateFrom,dateTo,groups,observe="body",reportProgress=!1,options){if(null==dateFrom)throw new Error("Required parameter dateFrom was null or undefined when calling getActiveUsers.");if(null==dateTo)throw new Error("Required parameter dateTo was null or undefined when calling getActiveUsers.");let queryParameters=new http.LE({encoder:this.encoder});null!=dateFrom&&(queryParameters=this.addToHttpParams(queryParameters,dateFrom,"dateFrom")),null!=dateTo&&(queryParameters=this.addToHttpParams(queryParameters,dateTo,"dateTo")),groups&&groups.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"groups")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/reports/users`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getAllRecordExtentAsJson(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getAllRecordExtentAsJson.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/extents.json`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getAllResources(metadataUuid,sort,approved,filter,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getAllResources.");let queryParameters=new http.LE({encoder:this.encoder});null!=sort&&(queryParameters=this.addToHttpParams(queryParameters,sort,"sort")),null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved")),null!=filter&&(queryParameters=this.addToHttpParams(queryParameters,filter,"filter"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/attachments`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getAsRdf(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getAssociatedResources(metadataUuid,type,start,rows,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getAssociatedResources.");let queryParameters=new http.LE({encoder:this.encoder});type&&type.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"type")})),null!=start&&(queryParameters=this.addToHttpParams(queryParameters,start,"start")),null!=rows&&(queryParameters=this.addToHttpParams(queryParameters,rows,"rows"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/related`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getFeatureCatalog(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getFeatureCatalog.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/featureCatalog`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRecordAs(metadataUuid,addSchemaLocation,increasePopularity,withInfo,attachment,approved,accept,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getRecordAs.");let queryParameters=new http.LE({encoder:this.encoder});null!=addSchemaLocation&&(queryParameters=this.addToHttpParams(queryParameters,addSchemaLocation,"addSchemaLocation")),null!=increasePopularity&&(queryParameters=this.addToHttpParams(queryParameters,increasePopularity,"increasePopularity")),null!=withInfo&&(queryParameters=this.addToHttpParams(queryParameters,withInfo,"withInfo")),null!=attachment&&(queryParameters=this.addToHttpParams(queryParameters,attachment,"attachment")),null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved"));let headers=this.defaultHeaders;null!=accept&&(headers=headers.set("Accept",String(accept)));let httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/formatters/xml`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRecordAs1(metadataUuid,addSchemaLocation,increasePopularity,withInfo,attachment,approved,accept,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getRecordAs1.");let queryParameters=new http.LE({encoder:this.encoder});null!=addSchemaLocation&&(queryParameters=this.addToHttpParams(queryParameters,addSchemaLocation,"addSchemaLocation")),null!=increasePopularity&&(queryParameters=this.addToHttpParams(queryParameters,increasePopularity,"increasePopularity")),null!=withInfo&&(queryParameters=this.addToHttpParams(queryParameters,withInfo,"withInfo")),null!=attachment&&(queryParameters=this.addToHttpParams(queryParameters,attachment,"attachment")),null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved"));let headers=this.defaultHeaders;null!=accept&&(headers=headers.set("Accept",String(accept)));let httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/formatters/json`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRecordAsZip(metadataUuid,format,withRelated,withXLinksResolved,withXLinkAttribute,addSchemaLocation,approved,accept,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getRecordAsZip.");let queryParameters=new http.LE({encoder:this.encoder});null!=format&&(queryParameters=this.addToHttpParams(queryParameters,format,"format")),null!=withRelated&&(queryParameters=this.addToHttpParams(queryParameters,withRelated,"withRelated")),null!=withXLinksResolved&&(queryParameters=this.addToHttpParams(queryParameters,withXLinksResolved,"withXLinksResolved")),null!=withXLinkAttribute&&(queryParameters=this.addToHttpParams(queryParameters,withXLinkAttribute,"withXLinkAttribute")),null!=addSchemaLocation&&(queryParameters=this.addToHttpParams(queryParameters,addSchemaLocation,"addSchemaLocation")),null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved"));let headers=this.defaultHeaders;null!=accept&&(headers=headers.set("Accept",String(accept)));let httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/formatters/zip`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRecordFormattedBy(formatterId,metadataUuid,accept,width,mdpath,language,output,approved,observe="body",reportProgress=!1,options){if(null==formatterId)throw new Error("Required parameter formatterId was null or undefined when calling getRecordFormattedBy.");if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getRecordFormattedBy.");let queryParameters=new http.LE({encoder:this.encoder});null!=width&&(queryParameters=this.addToHttpParams(queryParameters,width,"width")),null!=mdpath&&(queryParameters=this.addToHttpParams(queryParameters,mdpath,"mdpath")),null!=language&&(queryParameters=this.addToHttpParams(queryParameters,language,"language")),null!=output&&(queryParameters=this.addToHttpParams(queryParameters,output,"output")),null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved"));let headers=this.defaultHeaders;null!=accept&&(headers=headers.set("Accept",String(accept)));let httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/formatters/${encodeURIComponent(String(formatterId))}`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRecordSharingSettings(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getRecordSharingSettings.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/sharing`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRecordStatusHistory(metadataUuid,details,sortOrder,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getRecordStatusHistory.");let queryParameters=new http.LE({encoder:this.encoder});null!=details&&(queryParameters=this.addToHttpParams(queryParameters,details,"details")),null!=sortOrder&&(queryParameters=this.addToHttpParams(queryParameters,sortOrder,"sortOrder"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/status`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRecordStatusHistoryByType(metadataUuid,type,details,sortOrder,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getRecordStatusHistoryByType.");if(null==type)throw new Error("Required parameter type was null or undefined when calling getRecordStatusHistoryByType.");let queryParameters=new http.LE({encoder:this.encoder});null!=details&&(queryParameters=this.addToHttpParams(queryParameters,details,"details")),null!=sortOrder&&(queryParameters=this.addToHttpParams(queryParameters,sortOrder,"sortOrder"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/status/${encodeURIComponent(String(type))}`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRecordTags(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getRecordTags.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/tags`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getReportDataDownloads(dateFrom,dateTo,groups,observe="body",reportProgress=!1,options){if(null==dateFrom)throw new Error("Required parameter dateFrom was null or undefined when calling getReportDataDownloads.");if(null==dateTo)throw new Error("Required parameter dateTo was null or undefined when calling getReportDataDownloads.");let queryParameters=new http.LE({encoder:this.encoder});null!=dateFrom&&(queryParameters=this.addToHttpParams(queryParameters,dateFrom,"dateFrom")),null!=dateTo&&(queryParameters=this.addToHttpParams(queryParameters,dateTo,"dateTo")),groups&&groups.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"groups")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/reports/datadownloads`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getReportDataUploads(dateFrom,dateTo,groups,observe="body",reportProgress=!1,options){if(null==dateFrom)throw new Error("Required parameter dateFrom was null or undefined when calling getReportDataUploads.");if(null==dateTo)throw new Error("Required parameter dateTo was null or undefined when calling getReportDataUploads.");let queryParameters=new http.LE({encoder:this.encoder});null!=dateFrom&&(queryParameters=this.addToHttpParams(queryParameters,dateFrom,"dateFrom")),null!=dateTo&&(queryParameters=this.addToHttpParams(queryParameters,dateTo,"dateTo")),groups&&groups.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"groups")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/reports/datauploads`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getReportInternalMetadata(dateFrom,dateTo,groups,observe="body",reportProgress=!1,options){if(null==dateFrom)throw new Error("Required parameter dateFrom was null or undefined when calling getReportInternalMetadata.");if(null==dateTo)throw new Error("Required parameter dateTo was null or undefined when calling getReportInternalMetadata.");let queryParameters=new http.LE({encoder:this.encoder});null!=dateFrom&&(queryParameters=this.addToHttpParams(queryParameters,dateFrom,"dateFrom")),null!=dateTo&&(queryParameters=this.addToHttpParams(queryParameters,dateTo,"dateTo")),groups&&groups.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"groups")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/reports/metadatainternal`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getReportUpdatedMetadata(dateFrom,dateTo,groups,observe="body",reportProgress=!1,options){if(null==dateFrom)throw new Error("Required parameter dateFrom was null or undefined when calling getReportUpdatedMetadata.");if(null==dateTo)throw new Error("Required parameter dateTo was null or undefined when calling getReportUpdatedMetadata.");let queryParameters=new http.LE({encoder:this.encoder});null!=dateFrom&&(queryParameters=this.addToHttpParams(queryParameters,dateFrom,"dateFrom")),null!=dateTo&&(queryParameters=this.addToHttpParams(queryParameters,dateTo,"dateTo")),groups&&groups.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"groups")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/reports/metadataupdated`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getResource(metadataUuid,resourceId,approved,size,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getResource.");if(null==resourceId)throw new Error("Required parameter resourceId was null or undefined when calling getResource.");let queryParameters=new http.LE({encoder:this.encoder});null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved")),null!=size&&(queryParameters=this.addToHttpParams(queryParameters,size,"size"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/attachments/${encodeURIComponent(String(resourceId))}`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSavedQueries(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getSavedQueries.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/query`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSharingSettings(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/sharing`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getStatus(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getStatus.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/status/workflow/last`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSuggestions(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getSuggestions.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/processes`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getTestSuites(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getTestSuites.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/validate/inspire/testsuites`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getWorkflowStatusByType(type,details,author,owner,id,record,uuid,dateFrom,dateTo,from,size,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});type&&type.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"type")})),null!=details&&(queryParameters=this.addToHttpParams(queryParameters,details,"details")),author&&author.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"author")})),owner&&owner.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"owner")})),id&&id.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"id")})),record&&record.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"record")})),uuid&&uuid.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuid")})),null!=dateFrom&&(queryParameters=this.addToHttpParams(queryParameters,dateFrom,"dateFrom")),null!=dateTo&&(queryParameters=this.addToHttpParams(queryParameters,dateTo,"dateTo")),null!=from&&(queryParameters=this.addToHttpParams(queryParameters,from,"from")),null!=size&&(queryParameters=this.addToHttpParams(queryParameters,size,"size"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/status/search`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}index(uuids,bucket,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/index`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}insert(metadataType,url,serverFolder,recursiveSearch,publishToAll,assignToCatalog,uuidProcessing,group,category,rejectIfInvalid,transformWith,schema,extra,body,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=metadataType&&(queryParameters=this.addToHttpParams(queryParameters,metadataType,"metadataType")),url&&url.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"url")})),null!=serverFolder&&(queryParameters=this.addToHttpParams(queryParameters,serverFolder,"serverFolder")),null!=recursiveSearch&&(queryParameters=this.addToHttpParams(queryParameters,recursiveSearch,"recursiveSearch")),null!=publishToAll&&(queryParameters=this.addToHttpParams(queryParameters,publishToAll,"publishToAll")),null!=assignToCatalog&&(queryParameters=this.addToHttpParams(queryParameters,assignToCatalog,"assignToCatalog")),null!=uuidProcessing&&(queryParameters=this.addToHttpParams(queryParameters,uuidProcessing,"uuidProcessing")),null!=group&&(queryParameters=this.addToHttpParams(queryParameters,group,"group")),category&&category.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"category")})),null!=rejectIfInvalid&&(queryParameters=this.addToHttpParams(queryParameters,rejectIfInvalid,"rejectIfInvalid")),null!=transformWith&&(queryParameters=this.addToHttpParams(queryParameters,transformWith,"transformWith")),null!=schema&&(queryParameters=this.addToHttpParams(queryParameters,schema,"schema")),null!=extra&&(queryParameters=this.addToHttpParams(queryParameters,extra,"extra"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/xml","application/json","application/x-www-form-urlencoded"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records`,body,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}insertFile(metadataType,file,uuidProcessing,group,category,rejectIfInvalid,publishToAll,assignToCatalog,transformWith,schema,extra,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=metadataType&&(queryParameters=this.addToHttpParams(queryParameters,metadataType,"metadataType")),file&&file.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"file")})),null!=uuidProcessing&&(queryParameters=this.addToHttpParams(queryParameters,uuidProcessing,"uuidProcessing")),null!=group&&(queryParameters=this.addToHttpParams(queryParameters,group,"group")),category&&category.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"category")})),null!=rejectIfInvalid&&(queryParameters=this.addToHttpParams(queryParameters,rejectIfInvalid,"rejectIfInvalid")),null!=publishToAll&&(queryParameters=this.addToHttpParams(queryParameters,publishToAll,"publishToAll")),null!=assignToCatalog&&(queryParameters=this.addToHttpParams(queryParameters,assignToCatalog,"assignToCatalog")),null!=transformWith&&(queryParameters=this.addToHttpParams(queryParameters,transformWith,"transformWith")),null!=schema&&(queryParameters=this.addToHttpParams(queryParameters,schema,"schema")),null!=extra&&(queryParameters=this.addToHttpParams(queryParameters,extra,"extra"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/records`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}insertOgcMapContextFile(title,recordAbstract,xml,filename,url,viewerUrl,overview,overviewFilename,topic,publishToAll,uuidProcessing,group,observe="body",reportProgress=!1,options){if(null==title)throw new Error("Required parameter title was null or undefined when calling insertOgcMapContextFile.");let queryParameters=new http.LE({encoder:this.encoder});null!=title&&(queryParameters=this.addToHttpParams(queryParameters,title,"title")),null!=recordAbstract&&(queryParameters=this.addToHttpParams(queryParameters,recordAbstract,"recordAbstract")),null!=xml&&(queryParameters=this.addToHttpParams(queryParameters,xml,"xml")),null!=filename&&(queryParameters=this.addToHttpParams(queryParameters,filename,"filename")),null!=url&&(queryParameters=this.addToHttpParams(queryParameters,url,"url")),null!=viewerUrl&&(queryParameters=this.addToHttpParams(queryParameters,viewerUrl,"viewerUrl")),null!=overview&&(queryParameters=this.addToHttpParams(queryParameters,overview,"overview")),null!=overviewFilename&&(queryParameters=this.addToHttpParams(queryParameters,overviewFilename,"overviewFilename")),null!=topic&&(queryParameters=this.addToHttpParams(queryParameters,topic,"topic")),null!=publishToAll&&(queryParameters=this.addToHttpParams(queryParameters,publishToAll,"publishToAll")),null!=uuidProcessing&&(queryParameters=this.addToHttpParams(queryParameters,uuidProcessing,"uuidProcessing")),null!=group&&(queryParameters=this.addToHttpParams(queryParameters,group,"group"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/records/importfrommap`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}patchResource(metadataUuid,resourceId,visibility,approved,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling patchResource.");if(null==resourceId)throw new Error("Required parameter resourceId was null or undefined when calling patchResource.");if(null==visibility)throw new Error("Required parameter visibility was null or undefined when calling patchResource.");let queryParameters=new http.LE({encoder:this.encoder});null!=visibility&&(queryParameters=this.addToHttpParams(queryParameters,visibility,"visibility")),null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.patch(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/attachments/${encodeURIComponent(String(resourceId))}`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}processRecord(metadataUuid,process,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling processRecord.");if(null==process)throw new Error("Required parameter process was null or undefined when calling processRecord.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/processes/${encodeURIComponent(String(process))}`,null,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}processRecordPreview(metadataUuid,process,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling processRecordPreview.");if(null==process)throw new Error("Required parameter process was null or undefined when calling processRecordPreview.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/processes/${encodeURIComponent(String(process))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}publish(uuids,bucket,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/publish`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}putResource(metadataUuid,visibility,approved,inlineObject1ApiModel,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling putResource.");let queryParameters=new http.LE({encoder:this.encoder});null!=visibility&&(queryParameters=this.addToHttpParams(queryParameters,visibility,"visibility")),null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/attachments`,inlineObject1ApiModel,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}putResourceFromURL(metadataUuid,url,visibility,approved,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling putResourceFromURL.");if(null==url)throw new Error("Required parameter url was null or undefined when calling putResourceFromURL.");let queryParameters=new http.LE({encoder:this.encoder});null!=visibility&&(queryParameters=this.addToHttpParams(queryParameters,visibility,"visibility")),null!=url&&(queryParameters=this.addToHttpParams(queryParameters,url,"url")),null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/attachments`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}rateRecord(metadataUuid,body,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling rateRecord.");if(null==body)throw new Error("Required parameter body was null or undefined when calling rateRecord.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/rate`,body,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}restoreAtStatusSave(metadataUuid,statusId,userId,changeDate,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling restoreAtStatusSave.");if(null==statusId)throw new Error("Required parameter statusId was null or undefined when calling restoreAtStatusSave.");if(null==userId)throw new Error("Required parameter userId was null or undefined when calling restoreAtStatusSave.");if(null==changeDate)throw new Error("Required parameter changeDate was null or undefined when calling restoreAtStatusSave.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/status/${encodeURIComponent(String(statusId))}.${encodeURIComponent(String(userId))}.${encodeURIComponent(String(changeDate))}/restore`,null,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}saveEdits(metadataUuid,tab,withAttributes,withValidationErrors,minor,status,commit,terminate,data,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling saveEdits.");let queryParameters=new http.LE({encoder:this.encoder});null!=tab&&(queryParameters=this.addToHttpParams(queryParameters,tab,"tab")),null!=withAttributes&&(queryParameters=this.addToHttpParams(queryParameters,withAttributes,"withAttributes")),null!=withValidationErrors&&(queryParameters=this.addToHttpParams(queryParameters,withValidationErrors,"withValidationErrors")),null!=minor&&(queryParameters=this.addToHttpParams(queryParameters,minor,"minor")),null!=status&&(queryParameters=this.addToHttpParams(queryParameters,status,"status")),null!=commit&&(queryParameters=this.addToHttpParams(queryParameters,commit,"commit")),null!=terminate&&(queryParameters=this.addToHttpParams(queryParameters,terminate,"terminate")),null!=data&&(queryParameters=this.addToHttpParams(queryParameters,data,"data"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/editor`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}saveThumbnail(metadataUuid,jsonConfig,rotationAngle,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling saveThumbnail.");if(null==jsonConfig)throw new Error("Required parameter jsonConfig was null or undefined when calling saveThumbnail.");let queryParameters=new http.LE({encoder:this.encoder});null!=jsonConfig&&(queryParameters=this.addToHttpParams(queryParameters,jsonConfig,"jsonConfig")),null!=rotationAngle&&(queryParameters=this.addToHttpParams(queryParameters,rotationAngle,"rotationAngle"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/attachments/print-thumbnail`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}setGroupAndOwner(groupIdentifier,userIdentifier,uuids,bucket,approved,observe="body",reportProgress=!1,options){if(null==groupIdentifier)throw new Error("Required parameter groupIdentifier was null or undefined when calling setGroupAndOwner.");if(null==userIdentifier)throw new Error("Required parameter userIdentifier was null or undefined when calling setGroupAndOwner.");let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=groupIdentifier&&(queryParameters=this.addToHttpParams(queryParameters,groupIdentifier,"groupIdentifier")),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),null!=userIdentifier&&(queryParameters=this.addToHttpParams(queryParameters,userIdentifier,"userIdentifier")),null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/ownership`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}setRecordGroup(metadataUuid,body,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling setRecordGroup.");if(null==body)throw new Error("Required parameter body was null or undefined when calling setRecordGroup.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/group`,body,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}setRecordOwnership(metadataUuid,groupIdentifier,userIdentifier,approved,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling setRecordOwnership.");if(null==groupIdentifier)throw new Error("Required parameter groupIdentifier was null or undefined when calling setRecordOwnership.");if(null==userIdentifier)throw new Error("Required parameter userIdentifier was null or undefined when calling setRecordOwnership.");let queryParameters=new http.LE({encoder:this.encoder});null!=groupIdentifier&&(queryParameters=this.addToHttpParams(queryParameters,groupIdentifier,"groupIdentifier")),null!=userIdentifier&&(queryParameters=this.addToHttpParams(queryParameters,userIdentifier,"userIdentifier")),null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/ownership`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}share(sharingParameterApiModel,uuids,bucket,observe="body",reportProgress=!1,options){if(null==sharingParameterApiModel)throw new Error("Required parameter sharingParameterApiModel was null or undefined when calling share.");let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/sharing`,sharingParameterApiModel,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}showStatusAfter(metadataUuid,statusId,userId,changeDate,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling showStatusAfter.");if(null==statusId)throw new Error("Required parameter statusId was null or undefined when calling showStatusAfter.");if(null==userId)throw new Error("Required parameter userId was null or undefined when calling showStatusAfter.");if(null==changeDate)throw new Error("Required parameter changeDate was null or undefined when calling showStatusAfter.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/status/${encodeURIComponent(String(statusId))}.${encodeURIComponent(String(userId))}.${encodeURIComponent(String(changeDate))}/after`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}showStatusBefore(metadataUuid,statusId,userId,changeDate,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling showStatusBefore.");if(null==statusId)throw new Error("Required parameter statusId was null or undefined when calling showStatusBefore.");if(null==userId)throw new Error("Required parameter userId was null or undefined when calling showStatusBefore.");if(null==changeDate)throw new Error("Required parameter changeDate was null or undefined when calling showStatusBefore.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/status/${encodeURIComponent(String(statusId))}.${encodeURIComponent(String(userId))}.${encodeURIComponent(String(changeDate))}/before`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}tagRecord(metadataUuid,id,clear,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling tagRecord.");if(null==id)throw new Error("Required parameter id was null or undefined when calling tagRecord.");let queryParameters=new http.LE({encoder:this.encoder});id&&id.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"id")})),null!=clear&&(queryParameters=this.addToHttpParams(queryParameters,clear,"clear"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/tags`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}tagRecords(uuids,bucket,id,removeId,clear,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),id&&id.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"id")})),removeId&&removeId.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"removeId")})),null!=clear&&(queryParameters=this.addToHttpParams(queryParameters,clear,"clear"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/tags`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}trigger(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/backups`,null,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}unpublish(uuids,bucket,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/unpublish`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}unregisterDoi(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling unregisterDoi.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/doi`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}validateRecord(metadataUuid,isvalid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling validateRecord.");let queryParameters=new http.LE({encoder:this.encoder});null!=isvalid&&(queryParameters=this.addToHttpParams(queryParameters,isvalid,"isvalid"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/validate/internal`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}validateRecordForInspire(metadataUuid,testsuite,mode,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling validateRecordForInspire.");if(null==testsuite)throw new Error("Required parameter testsuite was null or undefined when calling validateRecordForInspire.");let queryParameters=new http.LE({encoder:this.encoder});null!=testsuite&&(queryParameters=this.addToHttpParams(queryParameters,testsuite,"testsuite")),null!=mode&&(queryParameters=this.addToHttpParams(queryParameters,mode,"mode"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/plain"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/validate/inspire`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}validateRecords(uuids,approved,bucket,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=approved&&(queryParameters=this.addToHttpParams(queryParameters,approved,"approved")),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/validate`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}validateRecordsInspire(uuids,bucket,mode,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),null!=mode&&(queryParameters=this.addToHttpParams(queryParameters,mode,"mode"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/records/validate/inspire`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],records_api_service_class);var regions_api_service_class;RecordsApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],RecordsApiService);let RegionsApiService=((regions_api_service_class=class RegionsApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getRegionTypes(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/regions/types`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRegions(label,categoryId,maxRecords,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=label&&(queryParameters=this.addToHttpParams(queryParameters,label,"label")),null!=categoryId&&(queryParameters=this.addToHttpParams(queryParameters,categoryId,"categoryId")),null!=maxRecords&&(queryParameters=this.addToHttpParams(queryParameters,maxRecords,"maxRecords"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/regions`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],regions_api_service_class);var registries_api_service_class;RegionsApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],RegionsApiService);let RegistriesApiService=((registries_api_service_class=class RegistriesApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}canConsumeForm(consumes){for(const consume of consumes)if("multipart/form-data"===consume)return!0;return!1}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}deleteThesaurus(thesaurus,observe="body",reportProgress=!1,options){if(null==thesaurus)throw new Error("Required parameter thesaurus was null or undefined when calling deleteThesaurus.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/registries/vocabularies/${encodeURIComponent(String(thesaurus))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getCrs(id,observe="body",reportProgress=!1,options){if(null==id)throw new Error("Required parameter id was null or undefined when calling getCrs.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/registries/crs/${encodeURIComponent(String(id))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getCrsTypes(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/registries/crs/types`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getEntry(uuid,process,transformation,lang,schema,observe="body",reportProgress=!1,options){if(null==uuid)throw new Error("Required parameter uuid was null or undefined when calling getEntry.");let queryParameters=new http.LE({encoder:this.encoder});process&&process.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"process")})),null!=transformation&&(queryParameters=this.addToHttpParams(queryParameters,transformation,"transformation")),lang&&lang.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"lang")})),null!=schema&&(queryParameters=this.addToHttpParams(queryParameters,schema,"schema"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/registries/entries/${encodeURIComponent(String(uuid))}`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getKeywordById(id,thesaurus,lang,keywordOnly,transformation,langMap,accept,observe="body",reportProgress=!1,options){if(null==id)throw new Error("Required parameter id was null or undefined when calling getKeywordById.");if(null==thesaurus)throw new Error("Required parameter thesaurus was null or undefined when calling getKeywordById.");let queryParameters=new http.LE({encoder:this.encoder});null!=id&&(queryParameters=this.addToHttpParams(queryParameters,id,"id")),null!=thesaurus&&(queryParameters=this.addToHttpParams(queryParameters,thesaurus,"thesaurus")),lang&&lang.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"lang")})),null!=keywordOnly&&(queryParameters=this.addToHttpParams(queryParameters,keywordOnly,"keywordOnly")),null!=transformation&&(queryParameters=this.addToHttpParams(queryParameters,transformation,"transformation")),null!=langMap&&(queryParameters=this.addToHttpParams(queryParameters,langMap,"langMap"));let headers=this.defaultHeaders;null!=accept&&(headers=headers.set("Accept",String(accept)));let httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/registries/vocabularies/keyword`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getThesaurus(thesaurus,observe="body",reportProgress=!1,options){if(null==thesaurus)throw new Error("Required parameter thesaurus was null or undefined when calling getThesaurus.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/registries/vocabularies/${encodeURIComponent(String(thesaurus))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}importCsvAsThesaurus(type,dir,encoding,thesaurusNs,languages,thesaurusTitle,conceptIdColumn,conceptLabelColumn,conceptDescriptionColumn,conceptBroaderIdColumn,conceptNarrowerIdColumn,conceptRelatedIdColumn,conceptLinkSeparator,importAsThesaurus,inlineObject3ApiModel,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=type&&(queryParameters=this.addToHttpParams(queryParameters,type,"type")),null!=dir&&(queryParameters=this.addToHttpParams(queryParameters,dir,"dir")),null!=encoding&&(queryParameters=this.addToHttpParams(queryParameters,encoding,"encoding")),null!=thesaurusNs&&(queryParameters=this.addToHttpParams(queryParameters,thesaurusNs,"thesaurusNs")),languages&&languages.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"languages")})),null!=thesaurusTitle&&(queryParameters=this.addToHttpParams(queryParameters,thesaurusTitle,"thesaurusTitle")),null!=conceptIdColumn&&(queryParameters=this.addToHttpParams(queryParameters,conceptIdColumn,"conceptIdColumn")),null!=conceptLabelColumn&&(queryParameters=this.addToHttpParams(queryParameters,conceptLabelColumn,"conceptLabelColumn")),null!=conceptDescriptionColumn&&(queryParameters=this.addToHttpParams(queryParameters,conceptDescriptionColumn,"conceptDescriptionColumn")),null!=conceptBroaderIdColumn&&(queryParameters=this.addToHttpParams(queryParameters,conceptBroaderIdColumn,"conceptBroaderIdColumn")),null!=conceptNarrowerIdColumn&&(queryParameters=this.addToHttpParams(queryParameters,conceptNarrowerIdColumn,"conceptNarrowerIdColumn")),null!=conceptRelatedIdColumn&&(queryParameters=this.addToHttpParams(queryParameters,conceptRelatedIdColumn,"conceptRelatedIdColumn")),null!=conceptLinkSeparator&&(queryParameters=this.addToHttpParams(queryParameters,conceptLinkSeparator,"conceptLinkSeparator")),null!=importAsThesaurus&&(queryParameters=this.addToHttpParams(queryParameters,importAsThesaurus,"importAsThesaurus"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/registries/vocabularies/import/csv`,inlineObject3ApiModel,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}importSpatialEntries(uuidAttribute,uuidPattern,descriptionAttribute,geomProjectionTo,lenient,onlyBoundingBox,process,schema,uuidProcessing,group,file,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=uuidAttribute&&(queryParameters=this.addToHttpParams(queryParameters,uuidAttribute,"uuidAttribute")),null!=uuidPattern&&(queryParameters=this.addToHttpParams(queryParameters,uuidPattern,"uuidPattern")),null!=descriptionAttribute&&(queryParameters=this.addToHttpParams(queryParameters,descriptionAttribute,"descriptionAttribute")),null!=geomProjectionTo&&(queryParameters=this.addToHttpParams(queryParameters,geomProjectionTo,"geomProjectionTo")),null!=lenient&&(queryParameters=this.addToHttpParams(queryParameters,lenient,"lenient")),null!=onlyBoundingBox&&(queryParameters=this.addToHttpParams(queryParameters,onlyBoundingBox,"onlyBoundingBox")),null!=process&&(queryParameters=this.addToHttpParams(queryParameters,process,"process")),null!=schema&&(queryParameters=this.addToHttpParams(queryParameters,schema,"schema")),null!=uuidProcessing&&(queryParameters=this.addToHttpParams(queryParameters,uuidProcessing,"uuidProcessing")),null!=group&&(queryParameters=this.addToHttpParams(queryParameters,group,"group"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let formParams,useForm=!1;useForm=this.canConsumeForm(["multipart/form-data"]),formParams=useForm?new FormData:new http.LE({encoder:this.encoder}),void 0!==file&&(formParams=formParams.append("file",file)||formParams);let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/registries/actions/entries/import/spatial`,formParams,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}previewUpdatedRecordEntries(xpath,uuids,bucket,identifierXpath,propertiesToCopy,substituteAsXLink,fq,observe="body",reportProgress=!1,options){if(null==xpath)throw new Error("Required parameter xpath was null or undefined when calling previewUpdatedRecordEntries.");let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),null!=xpath&&(queryParameters=this.addToHttpParams(queryParameters,xpath,"xpath")),null!=identifierXpath&&(queryParameters=this.addToHttpParams(queryParameters,identifierXpath,"identifierXpath")),propertiesToCopy&&propertiesToCopy.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"propertiesToCopy")})),null!=substituteAsXLink&&(queryParameters=this.addToHttpParams(queryParameters,substituteAsXLink,"substituteAsXLink")),null!=fq&&(queryParameters=this.addToHttpParams(queryParameters,fq,"fq"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/registries/actions/entries/synchronize`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}searchCrs(q,type,rows,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=q&&(queryParameters=this.addToHttpParams(queryParameters,q,"q")),null!=type&&(queryParameters=this.addToHttpParams(queryParameters,type,"type")),null!=rows&&(queryParameters=this.addToHttpParams(queryParameters,rows,"rows"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/registries/crs`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}searchKeywords(q,lang,rows,start,pLang,thesaurus,type,uri,sort,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=q&&(queryParameters=this.addToHttpParams(queryParameters,q,"q")),null!=lang&&(queryParameters=this.addToHttpParams(queryParameters,lang,"lang")),null!=rows&&(queryParameters=this.addToHttpParams(queryParameters,rows,"rows")),null!=start&&(queryParameters=this.addToHttpParams(queryParameters,start,"start")),pLang&&pLang.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"pLang")})),thesaurus&&thesaurus.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"thesaurus")})),null!=type&&(queryParameters=this.addToHttpParams(queryParameters,type,"type")),null!=uri&&(queryParameters=this.addToHttpParams(queryParameters,uri,"uri")),null!=sort&&(queryParameters=this.addToHttpParams(queryParameters,sort,"sort"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/registries/vocabularies/search`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}updateRecordEntries(xpath,uuids,bucket,identifierXpath,propertiesToCopy,substituteAsXLink,fq,observe="body",reportProgress=!1,options){if(null==xpath)throw new Error("Required parameter xpath was null or undefined when calling updateRecordEntries.");let queryParameters=new http.LE({encoder:this.encoder});uuids&&uuids.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuids")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket")),null!=xpath&&(queryParameters=this.addToHttpParams(queryParameters,xpath,"xpath")),null!=identifierXpath&&(queryParameters=this.addToHttpParams(queryParameters,identifierXpath,"identifierXpath")),propertiesToCopy&&propertiesToCopy.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"propertiesToCopy")})),null!=substituteAsXLink&&(queryParameters=this.addToHttpParams(queryParameters,substituteAsXLink,"substituteAsXLink")),null!=fq&&(queryParameters=this.addToHttpParams(queryParameters,fq,"fq"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/registries/actions/entries/synchronize`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}uploadThesaurus(type,dir,stylesheet,inlineObject2ApiModel,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=type&&(queryParameters=this.addToHttpParams(queryParameters,type,"type")),null!=dir&&(queryParameters=this.addToHttpParams(queryParameters,dir,"dir")),null!=stylesheet&&(queryParameters=this.addToHttpParams(queryParameters,stylesheet,"stylesheet"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/registries/vocabularies`,inlineObject2ApiModel,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}uploadThesaurusFromUrl(url,registryUrl,registryType,registryLanguage,type,dir,stylesheet,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=url&&(queryParameters=this.addToHttpParams(queryParameters,url,"url")),null!=registryUrl&&(queryParameters=this.addToHttpParams(queryParameters,registryUrl,"registryUrl")),null!=registryType&&(queryParameters=this.addToHttpParams(queryParameters,registryType,"registryType")),registryLanguage&&registryLanguage.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"registryLanguage")})),null!=type&&(queryParameters=this.addToHttpParams(queryParameters,type,"type")),null!=dir&&(queryParameters=this.addToHttpParams(queryParameters,dir,"dir")),null!=stylesheet&&(queryParameters=this.addToHttpParams(queryParameters,stylesheet,"stylesheet"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/registries/vocabularies`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],registries_api_service_class);var related_api_service_class;RegistriesApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],RegistriesApiService);let RelatedApiService=((related_api_service_class=class RelatedApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getAssociatedResourcesForRecords(type,uuid,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});type&&type.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"type")})),uuid&&uuid.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuid")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/related`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],related_api_service_class);var search_api_service_class;RelatedApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],RelatedApiService);let SearchApiService=((search_api_service_class=class SearchApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}search(bucket,body,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/search/records/_search`,body,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],search_api_service_class);var selections_api_service_class;SearchApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],SearchApiService);let SelectionsApiService=((selections_api_service_class=class SelectionsApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}add(bucket,uuid,observe="body",reportProgress=!1,options){if(null==bucket)throw new Error("Required parameter bucket was null or undefined when calling add.");let queryParameters=new http.LE({encoder:this.encoder});uuid&&uuid.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuid")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/selections/${encodeURIComponent(String(bucket))}`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}clear(bucket,uuid,observe="body",reportProgress=!1,options){if(null==bucket)throw new Error("Required parameter bucket was null or undefined when calling clear.");let queryParameters=new http.LE({encoder:this.encoder});uuid&&uuid.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuid")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/selections/${encodeURIComponent(String(bucket))}`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}get(bucket,observe="body",reportProgress=!1,options){if(null==bucket)throw new Error("Required parameter bucket was null or undefined when calling get.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/selections/${encodeURIComponent(String(bucket))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],selections_api_service_class);var site_api_service_class;SelectionsApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],SelectionsApiService);let SiteApiService=((site_api_service_class=class SiteApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getInformation(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/info`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getLastActivity(lines,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=lines&&(queryParameters=this.addToHttpParams(queryParameters,lines,"lines"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/plain"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/logging/activity`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getLastActivityInAZip(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/logging/activity/zip`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getLogFiles(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/logging`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRobotsText(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/plain"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/robots.txt`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSettingsDetails(set,key,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});set&&set.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"set")})),key&&key.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"key")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/settings/details`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSettingsSet(set,key,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});set&&set.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"set")})),key&&key.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"key")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/settings`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSiteOrPortalDescription(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSitemap(format,doc,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=format&&(queryParameters=this.addToHttpParams(queryParameters,format,"format")),null!=doc&&(queryParameters=this.addToHttpParams(queryParameters,doc,"doc"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/sitemap`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSystemInfo(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/info/build`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getXslTransformations(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/info/transforms`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}index1(reset,asynchronous,havingXlinkOnly,indices,bucket,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=reset&&(queryParameters=this.addToHttpParams(queryParameters,reset,"reset")),null!=asynchronous&&(queryParameters=this.addToHttpParams(queryParameters,asynchronous,"asynchronous")),null!=havingXlinkOnly&&(queryParameters=this.addToHttpParams(queryParameters,havingXlinkOnly,"havingXlinkOnly")),indices&&indices.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"indices")})),null!=bucket&&(queryParameters=this.addToHttpParams(queryParameters,bucket,"bucket"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/site/index`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}indexAndDbSynchronizationStatus(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/index/synchronized`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}indexStatus(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/index/status`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}isCasEnabled(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/info/isCasEnabled`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}isIndexing(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/indexing`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}isReadOnly(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/site/info/readonly`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],site_api_service_class);var sources_api_service_class;SiteApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],SiteApiService);let SourcesApiService=((sources_api_service_class=class SourcesApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getSources1(group,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=group&&(queryParameters=this.addToHttpParams(queryParameters,group,"group"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/sources`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSourcesByType(type,observe="body",reportProgress=!1,options){if(null==type)throw new Error("Required parameter type was null or undefined when calling getSourcesByType.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/sources/${encodeURIComponent(String(type))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],sources_api_service_class);var standards_api_service_class;SourcesApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],SourcesApiService);let StandardsApiService=((standards_api_service_class=class StandardsApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getCodelistsTranslations(schema,codelist,observe="body",reportProgress=!1,options){if(null==schema)throw new Error("Required parameter schema was null or undefined when calling getCodelistsTranslations.");if(null==codelist)throw new Error("Required parameter codelist was null or undefined when calling getCodelistsTranslations.");let queryParameters=new http.LE({encoder:this.encoder});codelist&&codelist.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"codelist")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/standards/${encodeURIComponent(String(schema))}/codelists`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getConfiguration(schema,observe="body",reportProgress=!1,options){if(null==schema)throw new Error("Required parameter schema was null or undefined when calling getConfiguration.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/standards/${encodeURIComponent(String(schema))}/batchconfiguration`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getConfigurations(schema,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});schema&&schema.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"schema")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/standards/batchconfiguration`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getEditorAssociatedPanelConfiguration(schema,name,observe="body",reportProgress=!1,options){if(null==schema)throw new Error("Required parameter schema was null or undefined when calling getEditorAssociatedPanelConfiguration.");if(null==name)throw new Error("Required parameter name was null or undefined when calling getEditorAssociatedPanelConfiguration.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/standards/${encodeURIComponent(String(schema))}/editor/associatedpanel/config/${encodeURIComponent(String(name))}.json`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getElementDetails(schema,element,parent,displayIf,xpath,isoType,observe="body",reportProgress=!1,options){if(null==schema)throw new Error("Required parameter schema was null or undefined when calling getElementDetails.");if(null==element)throw new Error("Required parameter element was null or undefined when calling getElementDetails.");let queryParameters=new http.LE({encoder:this.encoder});null!=parent&&(queryParameters=this.addToHttpParams(queryParameters,parent,"parent")),null!=displayIf&&(queryParameters=this.addToHttpParams(queryParameters,displayIf,"displayIf")),null!=xpath&&(queryParameters=this.addToHttpParams(queryParameters,xpath,"xpath")),null!=isoType&&(queryParameters=this.addToHttpParams(queryParameters,isoType,"isoType"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/standards/${encodeURIComponent(String(schema))}/descriptors/${encodeURIComponent(String(element))}/details`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSchemaCodelistsWithDetails(schema,codelist,parent,displayIf,xpath,isoType,observe="body",reportProgress=!1,options){if(null==schema)throw new Error("Required parameter schema was null or undefined when calling getSchemaCodelistsWithDetails.");if(null==codelist)throw new Error("Required parameter codelist was null or undefined when calling getSchemaCodelistsWithDetails.");let queryParameters=new http.LE({encoder:this.encoder});null!=parent&&(queryParameters=this.addToHttpParams(queryParameters,parent,"parent")),null!=displayIf&&(queryParameters=this.addToHttpParams(queryParameters,displayIf,"displayIf")),null!=xpath&&(queryParameters=this.addToHttpParams(queryParameters,xpath,"xpath")),null!=isoType&&(queryParameters=this.addToHttpParams(queryParameters,isoType,"isoType"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","application/xml"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/standards/${encodeURIComponent(String(schema))}/codelists/${encodeURIComponent(String(codelist))}/details`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSchemaTranslations(schema,codelist,parent,displayIf,xpath,isoType,observe="body",reportProgress=!1,options){if(null==schema)throw new Error("Required parameter schema was null or undefined when calling getSchemaTranslations.");if(null==codelist)throw new Error("Required parameter codelist was null or undefined when calling getSchemaTranslations.");let queryParameters=new http.LE({encoder:this.encoder});null!=parent&&(queryParameters=this.addToHttpParams(queryParameters,parent,"parent")),null!=displayIf&&(queryParameters=this.addToHttpParams(queryParameters,displayIf,"displayIf")),null!=xpath&&(queryParameters=this.addToHttpParams(queryParameters,xpath,"xpath")),null!=isoType&&(queryParameters=this.addToHttpParams(queryParameters,isoType,"isoType"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/standards/${encodeURIComponent(String(schema))}/codelists/${encodeURIComponent(String(codelist))}`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getStandardConfigurations(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/standards`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}reloadSchema(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/standards/reload`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],standards_api_service_class);var status_api_service_class;StandardsApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],StandardsApiService);let StatusApiService=((status_api_service_class=class StatusApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getStatusByType(type,observe="body",reportProgress=!1,options){if(null==type)throw new Error("Required parameter type was null or undefined when calling getStatusByType.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/status/${encodeURIComponent(String(type))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getStatusList(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/status`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],status_api_service_class);var tags_api_service_class;StatusApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],StatusApiService);let TagsApiService=((tags_api_service_class=class TagsApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getTag(tagIdentifier,observe="body",reportProgress=!1,options){if(null==tagIdentifier)throw new Error("Required parameter tagIdentifier was null or undefined when calling getTag.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/tags/${encodeURIComponent(String(tagIdentifier))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getTags(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/tags`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}updateTag(tagIdentifier,metadataCategoryApiModel,observe="body",reportProgress=!1,options){if(null==tagIdentifier)throw new Error("Required parameter tagIdentifier was null or undefined when calling updateTag.");if(null==metadataCategoryApiModel)throw new Error("Required parameter metadataCategoryApiModel was null or undefined when calling updateTag.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/tags/${encodeURIComponent(String(tagIdentifier))}`,metadataCategoryApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],tags_api_service_class);var tools_api_service_class;TagsApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],TagsApiService);let ToolsApiService=((tools_api_service_class=class ToolsApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}addTranslations(key,requestBody,replace,observe="body",reportProgress=!1,options){if(null==key)throw new Error("Required parameter key was null or undefined when calling addTranslations.");if(null==requestBody)throw new Error("Required parameter requestBody was null or undefined when calling addTranslations.");let queryParameters=new http.LE({encoder:this.encoder});null!=replace&&(queryParameters=this.addToHttpParams(queryParameters,replace,"replace"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/i18n/db/translations/${encodeURIComponent(String(key))}`,requestBody,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}buildSLD(url,layers,filters,observe="body",reportProgress=!1,options){if(null==url)throw new Error("Required parameter url was null or undefined when calling buildSLD.");if(null==layers)throw new Error("Required parameter layers was null or undefined when calling buildSLD.");if(null==filters)throw new Error("Required parameter filters was null or undefined when calling buildSLD.");let queryParameters=new http.LE({encoder:this.encoder});null!=url&&(queryParameters=this.addToHttpParams(queryParameters,url,"url")),null!=layers&&(queryParameters=this.addToHttpParams(queryParameters,layers,"layers")),null!=filters&&(queryParameters=this.addToHttpParams(queryParameters,filters,"filters"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/plain"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/tools/ogc/sld`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}callStep(stepName,observe="body",reportProgress=!1,options){if(null==stepName)throw new Error("Required parameter stepName was null or undefined when calling callStep.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/plain"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/tools/migration/steps/${encodeURIComponent(String(stepName))}`,null,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}cleanTranslationsPackagesCache(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/i18n/cache`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deleteTranslations(key,observe="body",reportProgress=!1,options){if(null==key)throw new Error("Required parameter key was null or undefined when calling deleteTranslations.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/i18n/db/translations/${encodeURIComponent(String(key))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deteleSLD(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/tools/ogc/sld`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getDbTranslations(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/i18n/db/translations`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSLD(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/tools/ogc/sld`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getTranslations(type,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});type&&type.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"type")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/i18n/db`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getTranslationsPackage(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/i18n/packages`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getTranslationsPackage1(pack,observe="body",reportProgress=!1,options){if(null==pack)throw new Error("Required parameter pack was null or undefined when calling getTranslationsPackage1.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/i18n/packages/${encodeURIComponent(String(pack))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],tools_api_service_class);var ui_api_service_class;ToolsApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],ToolsApiService);let UiApiService=((ui_api_service_class=class UiApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}getUiConfiguration(uiIdentifier,observe="body",reportProgress=!1,options){if(null==uiIdentifier)throw new Error("Required parameter uiIdentifier was null or undefined when calling getUiConfiguration.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/ui/${encodeURIComponent(String(uiIdentifier))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getUiConfigurations(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/ui`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}updateUiConfiguration(uiIdentifier,uiSettingApiModel,observe="body",reportProgress=!1,options){if(null==uiIdentifier)throw new Error("Required parameter uiIdentifier was null or undefined when calling updateUiConfiguration.");if(null==uiSettingApiModel)throw new Error("Required parameter uiSettingApiModel was null or undefined when calling updateUiConfiguration.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","*/*"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/ui/${encodeURIComponent(String(uiIdentifier))}`,uiSettingApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],ui_api_service_class);var userfeedback_api_service_class;UiApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],UiApiService);let UserfeedbackApiService=((userfeedback_api_service_class=class UserfeedbackApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}deleteUserFeedback(uuid,observe="body",reportProgress=!1,options){if(null==uuid)throw new Error("Required parameter uuid was null or undefined when calling deleteUserFeedback.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/userfeedback/${encodeURIComponent(String(uuid))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getMetadataRating(metadataUuid,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getMetadataRating.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/userfeedbackrating`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRatingCriteria(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/userfeedback/ratingcriteria`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getUserComment(uuid,observe="body",reportProgress=!1,options){if(null==uuid)throw new Error("Required parameter uuid was null or undefined when calling getUserComment.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/userfeedback/${encodeURIComponent(String(uuid))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getUserComments(metadataUuid,size,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=metadataUuid&&(queryParameters=this.addToHttpParams(queryParameters,metadataUuid,"metadataUuid")),null!=size&&(queryParameters=this.addToHttpParams(queryParameters,size,"size"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/userfeedback`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getUserCommentsOnARecord(metadataUuid,size,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling getUserCommentsOnARecord.");let queryParameters=new http.LE({encoder:this.encoder});null!=size&&(queryParameters=this.addToHttpParams(queryParameters,size,"size"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/userfeedback`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}newUserFeedback(userFeedbackDTOApiModel,observe="body",reportProgress=!1,options){if(null==userFeedbackDTOApiModel)throw new Error("Required parameter userFeedbackDTOApiModel was null or undefined when calling newUserFeedback.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/userfeedback`,userFeedbackDTOApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}publishFeedback(uuid,observe="body",reportProgress=!1,options){if(null==uuid)throw new Error("Required parameter uuid was null or undefined when calling publishFeedback.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/userfeedback/${encodeURIComponent(String(uuid))}/publish`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}sendEmailToContact(metadataUuid,name,org,email,comments,recaptcha,phone,subject,_function,type,category,metadataEmail,observe="body",reportProgress=!1,options){if(null==metadataUuid)throw new Error("Required parameter metadataUuid was null or undefined when calling sendEmailToContact.");if(null==name)throw new Error("Required parameter name was null or undefined when calling sendEmailToContact.");if(null==org)throw new Error("Required parameter org was null or undefined when calling sendEmailToContact.");if(null==email)throw new Error("Required parameter email was null or undefined when calling sendEmailToContact.");if(null==comments)throw new Error("Required parameter comments was null or undefined when calling sendEmailToContact.");let queryParameters=new http.LE({encoder:this.encoder});null!=recaptcha&&(queryParameters=this.addToHttpParams(queryParameters,recaptcha,"recaptcha")),null!=name&&(queryParameters=this.addToHttpParams(queryParameters,name,"name")),null!=org&&(queryParameters=this.addToHttpParams(queryParameters,org,"org")),null!=email&&(queryParameters=this.addToHttpParams(queryParameters,email,"email")),null!=comments&&(queryParameters=this.addToHttpParams(queryParameters,comments,"comments")),null!=phone&&(queryParameters=this.addToHttpParams(queryParameters,phone,"phone")),null!=subject&&(queryParameters=this.addToHttpParams(queryParameters,subject,"subject")),null!=_function&&(queryParameters=this.addToHttpParams(queryParameters,_function,"function")),null!=type&&(queryParameters=this.addToHttpParams(queryParameters,type,"type")),null!=category&&(queryParameters=this.addToHttpParams(queryParameters,category,"category")),null!=metadataEmail&&(queryParameters=this.addToHttpParams(queryParameters,metadataEmail,"metadataEmail"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/records/${encodeURIComponent(String(metadataUuid))}/alert`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],userfeedback_api_service_class);var users_api_service_class;UserfeedbackApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],UserfeedbackApiService);let UsersApiService=((users_api_service_class=class UsersApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}createUser(userDtoApiModel,observe="body",reportProgress=!1,options){if(null==userDtoApiModel)throw new Error("Required parameter userDtoApiModel was null or undefined when calling createUser.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/users`,userDtoApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deleteUser(userIdentifier,observe="body",reportProgress=!1,options){if(null==userIdentifier)throw new Error("Required parameter userIdentifier was null or undefined when calling deleteUser.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/users/${encodeURIComponent(String(userIdentifier))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getRecordOwners(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/users/owners`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getUser(userIdentifier,observe="body",reportProgress=!1,options){if(null==userIdentifier)throw new Error("Required parameter userIdentifier was null or undefined when calling getUser.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/users/${encodeURIComponent(String(userIdentifier))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getUserIdenticon(userIdentifier,size,observe="body",reportProgress=!1,options){if(null==userIdentifier)throw new Error("Required parameter userIdentifier was null or undefined when calling getUserIdenticon.");let queryParameters=new http.LE({encoder:this.encoder});null!=size&&(queryParameters=this.addToHttpParams(queryParameters,size,"size"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/users/${encodeURIComponent(String(userIdentifier))}.png`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getUsers(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/users`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}registerUser(userRegisterDtoApiModel,observe="body",reportProgress=!1,options){if(null==userRegisterDtoApiModel)throw new Error("Required parameter userRegisterDtoApiModel was null or undefined when calling registerUser.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/plain"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/user/actions/register`,userRegisterDtoApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}resetUserPassword(userIdentifier,password,password2,observe="body",reportProgress=!1,options){if(null==userIdentifier)throw new Error("Required parameter userIdentifier was null or undefined when calling resetUserPassword.");if(null==password)throw new Error("Required parameter password was null or undefined when calling resetUserPassword.");if(null==password2)throw new Error("Required parameter password2 was null or undefined when calling resetUserPassword.");let queryParameters=new http.LE({encoder:this.encoder});null!=password&&(queryParameters=this.addToHttpParams(queryParameters,password,"password")),null!=password2&&(queryParameters=this.addToHttpParams(queryParameters,password2,"password2"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.post(`${this.configuration.basePath}/users/${encodeURIComponent(String(userIdentifier))}/actions/forget-password`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}retrieveAllUserGroups(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/users/groups`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}retrieveUserGroups(userIdentifier,observe="body",reportProgress=!1,options){if(null==userIdentifier)throw new Error("Required parameter userIdentifier was null or undefined when calling retrieveUserGroups.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/users/${encodeURIComponent(String(userIdentifier))}/groups`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}saveOwners(transferRequestApiModel,observe="body",reportProgress=!1,options){if(null==transferRequestApiModel)throw new Error("Required parameter transferRequestApiModel was null or undefined when calling saveOwners.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/users/owners`,transferRequestApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}sendPasswordByEmail(username,observe="body",reportProgress=!1,options){if(null==username)throw new Error("Required parameter username was null or undefined when calling sendPasswordByEmail.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/plain"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/user/${encodeURIComponent(String(username))}/actions/forgot-password`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}updatePassword(username,passwordUpdateParameterApiModel,observe="body",reportProgress=!1,options){if(null==username)throw new Error("Required parameter username was null or undefined when calling updatePassword.");if(null==passwordUpdateParameterApiModel)throw new Error("Required parameter passwordUpdateParameterApiModel was null or undefined when calling updatePassword.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json","text/plain"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.patch(`${this.configuration.basePath}/user/${encodeURIComponent(String(username))}`,passwordUpdateParameterApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}updateUser(userIdentifier,userDtoApiModel,observe="body",reportProgress=!1,options){if(null==userIdentifier)throw new Error("Required parameter userIdentifier was null or undefined when calling updateUser.");if(null==userDtoApiModel)throw new Error("Required parameter userDtoApiModel was null or undefined when calling updateUser.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/users/${encodeURIComponent(String(userIdentifier))}`,userDtoApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],users_api_service_class);var usersearches_api_service_class;UsersApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],UsersApiService);let UsersearchesApiService=((usersearches_api_service_class=class UsersearchesApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}createUserCustomSearch(userSearchDtoApiModel,observe="body",reportProgress=!1,options){if(null==userSearchDtoApiModel)throw new Error("Required parameter userSearchDtoApiModel was null or undefined when calling createUserCustomSearch.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/usersearches`,userSearchDtoApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deleteUserCustomSerach(searchIdentifier,observe="body",reportProgress=!1,options){if(null==searchIdentifier)throw new Error("Required parameter searchIdentifier was null or undefined when calling deleteUserCustomSerach.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/usersearches/${encodeURIComponent(String(searchIdentifier))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getAllUserCustomSearches(featuredType,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=featuredType&&(queryParameters=this.addToHttpParams(queryParameters,featuredType,"featuredType"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/usersearches/all`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getAllUserCustomSearchesPage(featuredType,search,offset,limit,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=featuredType&&(queryParameters=this.addToHttpParams(queryParameters,featuredType,"featuredType")),null!=search&&(queryParameters=this.addToHttpParams(queryParameters,search,"search")),null!=offset&&(queryParameters=this.addToHttpParams(queryParameters,offset,"offset")),null!=limit&&(queryParameters=this.addToHttpParams(queryParameters,limit,"limit"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/usersearches/allpaginated`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getFeaturedUserCustomSearches(type,observe="body",reportProgress=!1,options){let queryParameters=new http.LE({encoder:this.encoder});null!=type&&(queryParameters=this.addToHttpParams(queryParameters,type,"type"));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/usersearches/featured`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getUserCustomSearch(searchIdentifier,observe="body",reportProgress=!1,options){if(null==searchIdentifier)throw new Error("Required parameter searchIdentifier was null or undefined when calling getUserCustomSearch.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/usersearches/${encodeURIComponent(String(searchIdentifier))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getUserCustomSearches(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/usersearches`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}updateCustomUserSearch(searchIdentifier,userSearchDtoApiModel,observe="body",reportProgress=!1,options){if(null==searchIdentifier)throw new Error("Required parameter searchIdentifier was null or undefined when calling updateCustomUserSearch.");if(null==userSearchDtoApiModel)throw new Error("Required parameter userSearchDtoApiModel was null or undefined when calling updateCustomUserSearch.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/usersearches/${encodeURIComponent(String(searchIdentifier))}`,userSearchDtoApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],usersearches_api_service_class);var userselections_api_service_class;UsersearchesApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],UsersearchesApiService);let UserselectionsApiService=((userselections_api_service_class=class UserselectionsApiService{constructor(httpClient,basePath,configuration){this.httpClient=httpClient,this.basePath="https://apps.titellus.net/geonetwork/srv/api",this.defaultHeaders=new http.WM,this.configuration=new Configuration,configuration&&(this.configuration=configuration),"string"!=typeof this.configuration.basePath&&("string"!=typeof basePath&&(basePath=this.basePath),this.configuration.basePath=basePath),this.encoder=this.configuration.encoder||new CustomHttpParameterCodec}addToHttpParams(httpParams,value,key){return httpParams="object"==typeof value&&value instanceof Date==!1?this.addToHttpParamsRecursive(httpParams,value):this.addToHttpParamsRecursive(httpParams,value,key)}addToHttpParamsRecursive(httpParams,value,key){if(null==value)return httpParams;if("object"==typeof value)if(Array.isArray(value))value.forEach((elem=>httpParams=this.addToHttpParamsRecursive(httpParams,elem,key)));else if(value instanceof Date){if(null==key)throw Error("key may not be null if value is Date");httpParams=httpParams.append(key,value.toISOString().substr(0,10))}else Object.keys(value).forEach((k=>httpParams=this.addToHttpParamsRecursive(httpParams,value[k],null!=key?`${key}.${k}`:k)));else{if(null==key)throw Error("key may not be null if value is not object or array");httpParams=httpParams.append(key,value)}return httpParams}addToUserSelection(selectionIdentifier,userIdentifier,uuid,observe="body",reportProgress=!1,options){if(null==selectionIdentifier)throw new Error("Required parameter selectionIdentifier was null or undefined when calling addToUserSelection.");if(null==userIdentifier)throw new Error("Required parameter userIdentifier was null or undefined when calling addToUserSelection.");let queryParameters=new http.LE({encoder:this.encoder});uuid&&uuid.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuid")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/userselections/${encodeURIComponent(String(selectionIdentifier))}/${encodeURIComponent(String(userIdentifier))}`,null,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}createPersistentSelectionType(selectionApiModel,observe="body",reportProgress=!1,options){if(null==selectionApiModel)throw new Error("Required parameter selectionApiModel was null or undefined when calling createPersistentSelectionType.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));const httpContentTypeSelected=this.configuration.selectHeaderContentType(["application/json"]);void 0!==httpContentTypeSelected&&(headers=headers.set("Content-Type",httpContentTypeSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.put(`${this.configuration.basePath}/userselections`,selectionApiModel,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}deleteFromUserSelection(selectionIdentifier,userIdentifier,uuid,observe="body",reportProgress=!1,options){if(null==selectionIdentifier)throw new Error("Required parameter selectionIdentifier was null or undefined when calling deleteFromUserSelection.");if(null==userIdentifier)throw new Error("Required parameter userIdentifier was null or undefined when calling deleteFromUserSelection.");let queryParameters=new http.LE({encoder:this.encoder});uuid&&uuid.forEach((element=>{queryParameters=this.addToHttpParams(queryParameters,element,"uuid")}));let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.delete(`${this.configuration.basePath}/userselections/${encodeURIComponent(String(selectionIdentifier))}/${encodeURIComponent(String(userIdentifier))}`,{params:queryParameters,responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSelectionList(observe="body",reportProgress=!1,options){let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/userselections`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}getSelectionRecords(selectionIdentifier,userIdentifier,observe="body",reportProgress=!1,options){if(null==selectionIdentifier)throw new Error("Required parameter selectionIdentifier was null or undefined when calling getSelectionRecords.");if(null==userIdentifier)throw new Error("Required parameter userIdentifier was null or undefined when calling getSelectionRecords.");let headers=this.defaultHeaders,httpHeaderAcceptSelected=options&&options.httpHeaderAccept;if(void 0===httpHeaderAcceptSelected){const httpHeaderAccepts=["application/json"];httpHeaderAcceptSelected=this.configuration.selectHeaderAccept(httpHeaderAccepts)}void 0!==httpHeaderAcceptSelected&&(headers=headers.set("Accept",httpHeaderAcceptSelected));let responseType_="json";return httpHeaderAcceptSelected&&httpHeaderAcceptSelected.startsWith("text")&&(responseType_="text"),this.httpClient.get(`${this.configuration.basePath}/userselections/${encodeURIComponent(String(selectionIdentifier))}/${encodeURIComponent(String(userIdentifier))}`,{responseType:responseType_,withCredentials:this.configuration.withCredentials,headers,observe,reportProgress})}}).ctorParameters=()=>[{type:http.eN},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[BASE_PATH]}]},{type:Configuration,decorators:[{type:core.Optional}]}],userselections_api_service_class);UserselectionsApiService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[http.eN,String,Configuration])],UserselectionsApiService);var GroupPrivilegeApiModel,LinkApiModel,MetadataResourceApiModel,OperationApiModel,PageJSONWrapperApiModel,SettingApiModel,StatusApiModel,StatusValueApiModel,UserApiModel,UserGroupApiModel,UserGroupIdApiModel,UserSecurityApiModel,api_module_class,ApiModule_1;!function(GroupPrivilegeApiModel){GroupPrivilegeApiModel.UserProfilesEnum={Administrator:"Administrator",UserAdmin:"UserAdmin",Reviewer:"Reviewer",Editor:"Editor",RegisteredUser:"RegisteredUser",Guest:"Guest",Monitor:"Monitor"},GroupPrivilegeApiModel.UserProfileEnum={Administrator:"Administrator",UserAdmin:"UserAdmin",Reviewer:"Reviewer",Editor:"Editor",RegisteredUser:"RegisteredUser",Guest:"Guest",Monitor:"Monitor"}}(GroupPrivilegeApiModel||(GroupPrivilegeApiModel={})),function(LinkApiModel){LinkApiModel.LinkTypeEnum={Http:"HTTP",Metadata:"METADATA"}}(LinkApiModel||(LinkApiModel={})),function(MetadataResourceApiModel){MetadataResourceApiModel.VisibilityEnum={Public:"public",Private:"private"}}(MetadataResourceApiModel||(MetadataResourceApiModel={})),function(OperationApiModel){OperationApiModel.ReservedOperationEnum={View:"view",Download:"download",Editing:"editing",Notify:"notify",Dynamic:"dynamic",Featured:"featured"}}(OperationApiModel||(OperationApiModel={})),function(PageJSONWrapperApiModel){PageJSONWrapperApiModel.FormatEnum={Link:"LINK",Html:"HTML",Text:"TEXT",Markdown:"MARKDOWN",Wiki:"WIKI"},PageJSONWrapperApiModel.StatusEnum={Public:"PUBLIC",PublicOnly:"PUBLIC_ONLY",Private:"PRIVATE",Hidden:"HIDDEN"},PageJSONWrapperApiModel.SectionsEnum={All:"ALL",Top:"TOP",Footer:"FOOTER",Menu:"MENU",Submenu:"SUBMENU",CustomMenu1:"CUSTOM_MENU1",CustomMenu2:"CUSTOM_MENU2",CustomMenu3:"CUSTOM_MENU3",Draft:"DRAFT"}}(PageJSONWrapperApiModel||(PageJSONWrapperApiModel={})),function(SettingApiModel){SettingApiModel.DataTypeEnum={String:"STRING",Int:"INT",Boolean:"BOOLEAN",Json:"JSON"}}(SettingApiModel||(SettingApiModel={})),function(StatusApiModel){StatusApiModel.StateEnum={Red:"RED",Uninitialized:"UNINITIALIZED",Yellow:"YELLOW",Green:"GREEN",Disabled:"DISABLED"}}(StatusApiModel||(StatusApiModel={})),function(StatusValueApiModel){StatusValueApiModel.TypeEnum={Workflow:"workflow",Task:"task",Event:"event"},StatusValueApiModel.NotificationLevelEnum={StatusUserOwner:"statusUserOwner",CatalogueAdministrator:"catalogueAdministrator",CatalogueProfileAdministrator:"catalogueProfileAdministrator",CatalogueProfileUserAdmin:"catalogueProfileUserAdmin",CatalogueProfileReviewer:"catalogueProfileReviewer",CatalogueProfileEditor:"catalogueProfileEditor",CatalogueProfileRegisteredUser:"catalogueProfileRegisteredUser",CatalogueProfileGuest:"catalogueProfileGuest",RecordProfileReviewer:"recordProfileReviewer",RecordUserAuthor:"recordUserAuthor"}}(StatusValueApiModel||(StatusValueApiModel={})),function(UserApiModel){UserApiModel.ProfileEnum={Administrator:"Administrator",UserAdmin:"UserAdmin",Reviewer:"Reviewer",Editor:"Editor",RegisteredUser:"RegisteredUser",Guest:"Guest",Monitor:"Monitor"}}(UserApiModel||(UserApiModel={})),function(UserGroupApiModel){UserGroupApiModel.ProfileEnum={Administrator:"Administrator",UserAdmin:"UserAdmin",Reviewer:"Reviewer",Editor:"Editor",RegisteredUser:"RegisteredUser",Guest:"Guest",Monitor:"Monitor"}}(UserGroupApiModel||(UserGroupApiModel={})),function(UserGroupIdApiModel){UserGroupIdApiModel.ProfileEnum={Administrator:"Administrator",UserAdmin:"UserAdmin",Reviewer:"Reviewer",Editor:"Editor",RegisteredUser:"RegisteredUser",Guest:"Guest",Monitor:"Monitor"}}(UserGroupIdApiModel||(UserGroupIdApiModel={})),function(UserSecurityApiModel){UserSecurityApiModel.SecurityNotificationsEnum={UpdateHashRequired:"UPDATE_HASH_REQUIRED",Unknown:"UNKNOWN"}}(UserSecurityApiModel||(UserSecurityApiModel={}));let ApiModule=(api_module_class=class ApiModule{static forRoot(configurationFactory){return{ngModule:ApiModule_1,providers:[{provide:Configuration,useFactory:configurationFactory}]}}constructor(parentModule,http){if(parentModule)throw new Error("ApiModule is already loaded. Import in your base AppModule only.");if(!http)throw new Error("You need to import the HttpClientModule in your AppModule! \nSee also https://github.com/angular/angular/issues/20575")}},ApiModule_1=api_module_class,api_module_class.ctorParameters=()=>[{type:api_module_class,decorators:[{type:core.Optional},{type:core.SkipSelf}]},{type:http.eN,decorators:[{type:core.Optional}]}],api_module_class);ApiModule=ApiModule_1=(0,tslib_es6.gn)([(0,core.NgModule)({imports:[],declarations:[],exports:[],providers:[]}),(0,tslib_es6.w6)("design:paramtypes",[ApiModule,http.eN])],ApiModule)},"./libs/feature/catalog/src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{OQ:()=>FeatureCatalogModule,eF:()=>OrganisationsServiceInterface,Wl:()=>SourcesService});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");var _class,site_title_componentngResource=__webpack_require__("./libs/feature/catalog/src/lib/site-title/site-title.component.css?ngResource"),site_title_componentngResource_default=__webpack_require__.n(site_title_componentngResource),src=__webpack_require__("./libs/data-access/gn4/src/index.ts"),shareReplay=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js");let SiteTitleComponent=((_class=class SiteTitleComponent{constructor(siteApiService){this.siteApiService=siteApiService,this.info$=this.siteApiService.getSiteOrPortalDescription().pipe((0,shareReplay.d)(1))}}).ctorParameters=()=>[{type:src.rr}],_class);SiteTitleComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-site-title",template:'<gn-ui-catalog-title\n  *ngIf="info$ | async as info"\n  [name]="info[\'system/site/name\']"\n  [tooltip]="info[\'system/site/organization\']"\n></gn-ui-catalog-title>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[site_title_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[src.rr])],SiteTitleComponent);var common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),catalog_title_component=__webpack_require__("./libs/ui/catalog/src/lib/catalog-title/catalog-title.component.ts"),organisation_preview_component=__webpack_require__("./libs/ui/catalog/src/lib/organisation-preview/organisation-preview.component.ts"),ngx_translate_core=__webpack_require__("./node_modules/@ngx-translate/core/fesm2020/ngx-translate-core.mjs"),icon=__webpack_require__("./node_modules/@angular/material/fesm2022/icon.mjs"),elements_src=__webpack_require__("./libs/ui/elements/src/index.ts"),organisations_sort_component=__webpack_require__("./libs/ui/catalog/src/lib/organisations-sort/organisations-sort.component.ts"),inputs_src=__webpack_require__("./libs/ui/inputs/src/index.ts");var language_switcher_component_class,language_switcher_componentngResource=__webpack_require__("./libs/ui/catalog/src/lib/language-switcher/language-switcher.component.css?ngResource"),language_switcher_componentngResource_default=__webpack_require__.n(language_switcher_componentngResource),i18n_src=__webpack_require__("./libs/util/i18n/src/index.ts");const LANGUAGES_LIST=new core.InjectionToken("languages-list"),DEFAULT_LANGUAGES=["en","fr"];let LanguageSwitcherComponent=((language_switcher_component_class=class LanguageSwitcherComponent{constructor(languagePlaceholder,translate){this.languagePlaceholder=languagePlaceholder,this.translate=translate,this.languageList=this.languagePlaceholder||DEFAULT_LANGUAGES}get currentLang(){return this.translate.currentLang}ngOnInit(){const languages=this.languagePlaceholder||DEFAULT_LANGUAGES;this.languageList=languages.map((language=>({label:`language.${language}`,value:language})))}changeLanguage(value){try{localStorage.setItem(i18n_src.kH,value)}catch(error){console.warn("Language choice could not be persisted",error)}this.translate.use(value)}}).ctorParameters=()=>[{type:void 0,decorators:[{type:core.Optional},{type:core.Inject,args:[LANGUAGES_LIST]}]},{type:ngx_translate_core.sK}],language_switcher_component_class);LanguageSwitcherComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-language-switcher",template:'<gn-ui-dropdown-selector\n  [title]="\'languages\'"\n  [choices]="languageList"\n  (selectValue)="changeLanguage($event)"\n  [selected]="currentLang"\n  ariaName="languages"\n  [showTitle]="false"\n>\n</gn-ui-dropdown-selector>\n',styles:[language_switcher_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[Object,ngx_translate_core.sK])],LanguageSwitcherComponent);let UiCatalogModule=class UiCatalogModule{};UiCatalogModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[catalog_title_component.N,organisation_preview_component.F,organisations_sort_component.A,LanguageSwitcherComponent],imports:[common.CommonModule,ngx_translate_core.aw.forChild(),elements_src.Zx,inputs_src.uU,icon.Ps],exports:[catalog_title_component.N,organisation_preview_component.F,organisations_sort_component.A,LanguageSwitcherComponent]})],UiCatalogModule);var sources_service_class,source_label_componentngResource=__webpack_require__("./libs/feature/catalog/src/lib/source-label/source-label.component.css?ngResource"),source_label_componentngResource_default=__webpack_require__.n(source_label_componentngResource),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),filter=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/filter.js");let SourcesService=((sources_service_class=class SourcesService{constructor(sourcesApiService,langService){this.sourcesApiService=sourcesApiService,this.langService=langService,this.sources$=this.sourcesApiService.getSources1().pipe((0,shareReplay.d)())}getSourceLabel(uuid){return this.sources$.pipe((0,map.U)((sources=>sources.filter((source=>source.uuid===uuid))[0])),(0,filter.h)((source=>!!source)),(0,map.U)((source=>source.label[this.langService.iso3])))}}).ctorParameters=()=>[{type:src.f6},{type:i18n_src.Cf}],sources_service_class);var source_label_component_class;SourcesService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[src.f6,i18n_src.Cf])],SourcesService);let SourceLabelComponent=((source_label_component_class=class SourceLabelComponent{set catalogUuid(uuid){this.sourceLabel$=this.sourcesService.getSourceLabel(uuid)}constructor(sourcesService){this.sourcesService=sourcesService}}).ctorParameters=()=>[{type:SourcesService}],source_label_component_class.propDecorators={catalogUuid:[{type:core.Input}]},source_label_component_class);SourceLabelComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-source-label",template:"<div>{{ sourceLabel$ | async }}</div>\n",changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[source_label_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[SourcesService])],SourceLabelComponent);var organisations_component_class,organisations_componentngResource=__webpack_require__("./libs/feature/catalog/src/lib/organisations/organisations.component.css?ngResource"),organisations_componentngResource_default=__webpack_require__.n(organisations_componentngResource),BehaviorSubject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js"),combineLatest=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js"),startWith=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/startWith.js"),tap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js");class OrganisationsServiceInterface{}let OrganisationsComponent=((organisations_component_class=class OrganisationsComponent{constructor(organisationsService,urlTemplate){this.organisationsService=organisationsService,this.urlTemplate=urlTemplate,this.itemsOnPage=12,this.orgSelect=new core.EventEmitter,this.currentPage$=new BehaviorSubject.X(1),this.sortBy$=new BehaviorSubject.X("name-asc"),this.organisationsSorted$=(0,combineLatest.a)([this.organisationsService.organisations$.pipe((0,startWith.O)(Array(this.itemsOnPage).fill({}))),this.sortBy$]).pipe((0,map.U)((([organisations,sortBy])=>this.sortOrganisations(organisations,sortBy)))),this.organisations$=(0,combineLatest.a)([this.organisationsSorted$,this.currentPage$]).pipe((0,tap.b)((([organisations])=>this.totalPages=Math.ceil(organisations.length/this.itemsOnPage))),(0,map.U)((([organisations,page])=>organisations.slice((page-1)*this.itemsOnPage,page*this.itemsOnPage))))}setCurrentPage(page){this.currentPage$.next(page)}setSortBy(value){this.sortBy$.next(value)}sortOrganisations(organisations,sortBy){const sortParts=sortBy.split("-"),attribute=sortParts[0],direction="asc"===sortParts[1]?1:-1;return[...organisations].sort(((a,b)=>{const valueA=a[attribute],valueB=b[attribute];return"string"==typeof valueA&&"string"==typeof valueB?direction*valueA.localeCompare(valueB):direction*Math.sign(valueA-valueB)}))}trackByIndex(index){return index}getOrganisationUrl(organisation){return this.urlTemplate?this.urlTemplate.replace("${name}",organisation.name):null}}).ctorParameters=()=>[{type:OrganisationsServiceInterface},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[ORGANIZATION_URL_TOKEN]}]}],organisations_component_class.propDecorators={itemsOnPage:[{type:core.Input}],orgSelect:[{type:core.Output}]},organisations_component_class);OrganisationsComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-organisations",template:'<gn-ui-organisations-sort\n  (sortBy)="setSortBy($event)"\n></gn-ui-organisations-sort>\n<div\n  class="grid grid-cols-1 mt-6 gap-x-6 gap-y-8 sm:grid-cols-2 lg:grid-cols-3"\n>\n  <gn-ui-content-ghost\n    class="h-[300px]"\n    ghostClass="h-full mb-36"\n    *ngFor="let organisation of organisations$ | async; trackBy: trackByIndex"\n    [showContent]="!!organisation.name"\n  >\n    <gn-ui-organisation-preview\n      [organisation]="organisation"\n      [organisationUrl]="getOrganisationUrl(organisation)"\n      (clickedOrganisation)="orgSelect.emit($event)"\n    ></gn-ui-organisation-preview>\n  </gn-ui-content-ghost>\n</div>\n<div class="py-20">\n  <gn-ui-pagination\n    [currentPage]="currentPage$ | async"\n    [nPages]="totalPages"\n    (newCurrentPageEvent)="setCurrentPage($event)"\n  ></gn-ui-pagination>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[organisations_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[OrganisationsServiceInterface,String])],OrganisationsComponent);var organisations_from_metadata_service_class,layout_src=__webpack_require__("./libs/ui/layout/src/index.ts"),shared_src=__webpack_require__("./libs/util/shared/src/index.ts"),of=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/of.js"),takeLast=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/takeLast.js");let OrganisationsFromMetadataService=((organisations_from_metadata_service_class=class OrganisationsFromMetadataService{constructor(esService,searchApiService,groupsApiService){this.esService=esService,this.searchApiService=searchApiService,this.groupsApiService=groupsApiService,this.groups$=this.groupsApiService.getGroups().pipe((0,shareReplay.d)()),this.organisationsAggs$=this.searchApiService.search("bucket",JSON.stringify(this.getAggregationSearchRequest())).pipe((0,filter.h)((response=>!!response.aggregations.contact.org)),(0,tap.b)((response=>response.aggregations.contact.org.buckets.forEach((r=>r.doc_count=response.aggregations.orgForResource.buckets.find((org=>org.key===r.key))?.doc_count||r.doc_count)))),(0,map.U)((response=>response.aggregations.contact.org.buckets)),(0,shareReplay.d)()),this.organisationsWithoutGroups$=this.organisationsAggs$.pipe((0,map.U)((buckets=>buckets.map((bucket=>({name:bucket.key,emails:bucket.mail.buckets.map((bucket=>bucket.key)).filter((mail=>!!mail)),recordCount:bucket.doc_count,description:null,logoUrl:bucket.logoUrl.buckets[0]?.key})))))),this.organisationsCount$=this.organisationsAggs$.pipe((0,map.U)((organisations=>organisations.length))),this.organisations$=(0,combineLatest.a)([this.organisationsWithoutGroups$,this.groups$.pipe((0,startWith.O)(null))]).pipe((0,map.U)((([organisations,groups])=>groups?this.mapWithGroups(organisations,groups):organisations)),(0,shareReplay.d)())}equalsNormalizedStrings(str1,str2,replaceSpecialChars=!0){return!(!str1||!str2)&&this.normalizeString(str1,replaceSpecialChars)===this.normalizeString(str2,replaceSpecialChars)}normalizeString(str,replaceSpecialChars=!0){function normalize(str){return str.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLowerCase()}return replaceSpecialChars?normalize(str).replace(/[^a-z0-9]/g,""):normalize(str)}getAggregationSearchRequest(){return this.esService.getSearchRequestBody({contact:{nested:{path:"contactForResource"},aggs:{org:{terms:{field:"contactForResource.organisation",exclude:"",size:5e3,order:{_key:"asc"}},aggs:{mail:{terms:{size:50,exclude:"",field:"contactForResource.email.keyword"}},logoUrl:{terms:{size:1,exclude:"",field:"contactForResource.logo.keyword"}}}}}},orgForResource:{terms:{size:5e3,exclude:"",field:"OrgForResource",order:{_key:"asc"}}}})}mapWithGroups(organisations,groups){return organisations.map((organisation=>{const group=groups.find((group=>this.equalsNormalizedStrings(group.label.eng?group.label.eng:group.name,organisation.name)))??groups.filter((group=>!!group.email)).find((group=>organisation.emails.map((mail=>this.normalizeString(mail,!1))).includes(this.normalizeString(group.email,!1))));return group?{...organisation,...group.email&&{email:group.email},...group.description&&{description:group.description},...group.logo&&{logoUrl:`/geonetwork/images/harvesting/${group.logo}`}}:organisation}))}hydrateFirstResourceContactWithOrganisation(firstResourceContact,contactOrganisation){const logoUrl=firstResourceContact.logoUrl||(contactOrganisation.logoUrl?(0,shared_src.Nx)(`${contactOrganisation.logoUrl}`):null),organisation=contactOrganisation.name,name=firstResourceContact.name||contactOrganisation.name,email=firstResourceContact.email||contactOrganisation.email,{website}=firstResourceContact;return{name,organisation,email,logoUrl,website}}getFiltersForOrgs(organisations){return(0,of.of)({OrgForResource:organisations.reduce(((prev,curr)=>({...prev,[curr.name]:!0})),{})})}getOrgsFromFilters(filters){return"OrgForResource"in filters?this.organisations$.pipe((0,map.U)((orgs=>Object.keys(filters.OrgForResource).map((name=>orgs.find((org=>org.name===name))))))):(0,of.of)([])}addOrganisationToRecordFromSource(source,record){const resourceContacts=(0,shared_src.xt)((0,shared_src._M)(source,"contactForResource")).map((contact=>(0,shared_src.Io)(contact))),metadataRecord={...record,resourceContacts,contact:(0,shared_src.Io)((0,shared_src.sD)((0,shared_src._M)(source,"contact")))},[firstResourceContact,...otherResourceContacts]=resourceContacts;return this.organisations$.pipe((0,takeLast.h)(1),(0,map.U)((organisations=>{const recordOrganisation=organisations.filter((org=>org.name===firstResourceContact?.organisation))[0];return(0,shared_src.kc)({...metadataRecord,...recordOrganisation&&{resourceContacts:[this.hydrateFirstResourceContactWithOrganisation(firstResourceContact,recordOrganisation),...otherResourceContacts]}},source)})))}}).ctorParameters=()=>[{type:shared_src.Hk},{type:src.uX},{type:src.u}],organisations_from_metadata_service_class);OrganisationsFromMetadataService=(0,tslib_es6.gn)([(0,core.Injectable)(),(0,tslib_es6.w6)("design:paramtypes",[shared_src.Hk,src.uX,src.u])],OrganisationsFromMetadataService);var organisations_from_groups_service_class,forkJoin=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js");let OrganisationsFromGroupsService=((organisations_from_groups_service_class=class OrganisationsFromGroupsService{constructor(esService,searchApiService,groupsApiService,translateService){this.esService=esService,this.searchApiService=searchApiService,this.groupsApiService=groupsApiService,this.translateService=translateService,this.groups$=this.groupsApiService.getGroups().pipe((0,shareReplay.d)()),this.groupsAggregation$=this.searchApiService.search("bucket",JSON.stringify(this.esService.getSearchRequestBody({groups:{terms:{field:"groupOwner",size:5e3}}}))).pipe((0,map.U)((response=>response.aggregations.groups.buckets)),(0,shareReplay.d)()),this.organisations$=(0,forkJoin.D)([this.groupsAggregation$,this.groups$]).pipe((0,map.U)((([groupsAgg,groups])=>this.mapGroups(groupsAgg,groups))),(0,shareReplay.d)()),this.organisationsCount$=this.organisations$.pipe((0,map.U)((orgs=>orgs.length)))}mapGroups(groupBuckets,groups){return groupBuckets.filter((({key})=>!!groups.find((g=>g.id.toString()===key)))).map((({key,doc_count})=>{const group=groups.find((g=>g.id.toString()===key)),lang3=i18n_src.UQ[this.translateService.currentLang];return{name:group.label[lang3],recordCount:doc_count,...group.email&&{email:group.email},...group.description&&{description:group.description},...group.logo&&{logoUrl:`/geonetwork/images/harvesting/${group.logo}`}}}))}getFiltersForOrgs(organisations){return this.groups$.pipe((0,map.U)((allGroups=>{const lang3=i18n_src.UQ[this.translateService.currentLang];return{groupOwner:organisations.map((org=>allGroups.find((group=>group.label[lang3]===org.name)))).reduce(((prev,curr)=>({...prev,[curr.id.toString()]:!0})),{})}})))}getOrgsFromFilters(filters){return"groupOwner"in filters?(0,forkJoin.D)([this.groups$,this.organisations$]).pipe((0,map.U)((([groups,orgs])=>{const groupIds=Object.keys(filters.groupOwner),lang3=i18n_src.UQ[this.translateService.currentLang];return groupIds.map((id=>{const group=groups.find((group=>group.id.toString()===id));return orgs.find((org=>org.name===group.label[lang3]))}))}))):(0,of.of)([])}mapContactFromGroup(group,lang3){const website=(0,shared_src.Nx)(group.website),logoUrl=(0,shared_src.Nx)(`/geonetwork/images/harvesting/${group.logo}`);return{name:group.label[lang3],organisation:group.label[lang3],email:group.email,...website&&{website},...logoUrl&&{logoUrl}}}addOrganisationToRecordFromSource(source,record){const lang3=i18n_src.UQ[this.translateService.currentLang],groupId=parseInt((0,shared_src._M)(source,"groupOwner")),resourceContacts=(0,shared_src.xt)((0,shared_src._M)(source,"contactForResource")).map((contact=>(0,shared_src.Io)(contact)));return this.groups$.pipe((0,map.U)((groups=>{const group=groups.find((g=>g.id===groupId));if(!group)return(0,shared_src.kc)(record,source);const contact=this.mapContactFromGroup(group,lang3);return(0,shared_src.kc)({...record,contact,resourceContacts:[contact,...resourceContacts]},source)})))}}).ctorParameters=()=>[{type:shared_src.Hk},{type:src.uX},{type:src.u},{type:ngx_translate_core.sK}],organisations_from_groups_service_class);OrganisationsFromGroupsService=(0,tslib_es6.gn)([(0,core.Injectable)(),(0,tslib_es6.w6)("design:paramtypes",[shared_src.Hk,src.uX,src.u,ngx_translate_core.sK])],OrganisationsFromGroupsService);const ORGANIZATION_URL_TOKEN=new core.InjectionToken("organization-url-token");let FeatureCatalogModule=class FeatureCatalogModule{};FeatureCatalogModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[SiteTitleComponent,SourceLabelComponent,OrganisationsComponent],imports:[UiCatalogModule,layout_src.P,src.au,common.CommonModule,i18n_src.pw,ngx_translate_core.aw.forChild(),elements_src.Zx],exports:[SiteTitleComponent,SourceLabelComponent,OrganisationsComponent],providers:[{provide:OrganisationsServiceInterface,useFactory:(strategy,esService,searchApiService,groupsApiService,translateService)=>"groups"===strategy?new OrganisationsFromGroupsService(esService,searchApiService,groupsApiService,translateService):new OrganisationsFromMetadataService(esService,searchApiService,groupsApiService),deps:[shared_src.wU,shared_src.Hk,src.uX,src.u,ngx_translate_core.sK]}]})],FeatureCatalogModule);var records_service_class,catchError=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/catchError.js");let RecordsService=((records_service_class=class RecordsService{constructor(esService,searchApiService){this.esService=esService,this.searchApiService=searchApiService,this.recordsCount$=this.searchApiService.search("records-count",JSON.stringify({...this.esService.getSearchRequestBody(),track_total_hits:!0})).pipe((0,map.U)((response=>response.hits.total.value)),(0,shareReplay.d)(1),(0,catchError.K)((()=>(0,of.of)(0))))}}).ctorParameters=()=>[{type:shared_src.Hk},{type:src.uX}],records_service_class);RecordsService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[shared_src.Hk,src.uX])],RecordsService)},"./libs/feature/dataviz/src/lib/geo-table-view/geo-table-view.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{b:()=>GeoTableViewComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,geo_table_view_componentngResource=__webpack_require__("./libs/feature/dataviz/src/lib/geo-table-view/geo-table-view.component.css?ngResource"),geo_table_view_componentngResource_default=__webpack_require__.n(geo_table_view_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),src=__webpack_require__("./libs/feature/map/src/index.ts"),dataviz_src=__webpack_require__("./libs/ui/dataviz/src/index.ts"),Subscription=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subscription.js");let GeoTableViewComponent=((_class=class GeoTableViewComponent{constructor(manager,featureInfo,changeRef,mapOptions){this.manager=manager,this.featureInfo=featureInfo,this.changeRef=changeRef,this.mapOptions=mapOptions,this.data={type:"FeatureCollection",features:[]},this.subscription=new Subscription.w0}ngOnInit(){this.tableData=this.geojsonToTableData(this.data),this.mapContext=this.initMapContext(),this.featureInfo.handleFeatureInfo(),this.subscription.add(this.featureInfo.features$.subscribe((features=>{this.onMapFeatureSelect(features)})))}ngAfterViewInit(){const map=this.map=this.manager.map;this.view=map.getView(),this.vectorLayer=this.manager.map.getLayers().item(1),this.vectorLayer.setStyle(this.styleFn.bind(this)),this.vectorSource=this.vectorLayer.getSource(),this.features=this.vectorSource.getFeatures(),this.view.fit(this.vectorSource.getExtent())}onTableSelect(tableEntry){const{id}=tableEntry;this.selectionId=id,this.selection=this.getFeatureFromId(id),this.selection&&this.animateToFeature(this.selection)}onMapFeatureSelect(features){this.selection=features?.length>0&&features[0],this.selection&&(this.selectionId=this.selection.getId(),this.changeRef.detectChanges(),this.vectorLayer.changed(),this.uiTable.scrollToItem(this.selectionId))}geojsonToTableData(geojson){return geojson.features.map((f=>({id:f.id,...f.properties})))}initMapContext(){return{layers:[{type:src.KW.XYZ,url:"https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png"},{type:src.KW.GEOJSON,data:this.data}]}}animateToFeature(feature){this.view.fit(feature.getGeometry().getExtent(),{duration:1e3,maxZoom:11})}getFeatureFromId(id){return this.features.find((feature=>feature.getId()===id))}styleFn(feature,resolution){return void 0!==this.selectionId&&this.selectionId===feature.getId()?this.mapOptions.hlStyle(feature,resolution):this.mapOptions.defaultStyle(feature,resolution)}ngOnDestroy(){this.subscription.unsubscribe()}}).ctorParameters=()=>[{type:src.Ls},{type:src.K_},{type:core.ChangeDetectorRef},{type:void 0,decorators:[{type:core.Inject,args:[src.LL]}]}],_class.propDecorators={data:[{type:core.Input}],uiTable:[{type:core.ViewChild,args:[dataviz_src.ac]}]},_class);GeoTableViewComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-geo-table-view",template:'<div class="flex flex-row h-full overflow-auto">\n  <gn-ui-table\n    class="w-1/2 overflow-auto"\n    [data]="tableData"\n    [activeId]="selectionId"\n    (selected)="onTableSelect($event)"\n  ></gn-ui-table>\n  <gn-ui-map-context\n    class="w-1/2 h-full"\n    [context]="mapContext"\n  ></gn-ui-map-context>\n  <gn-ui-feature-detail\n    style="width: 300px"\n    class="p-3 shrink-0 overflow-auto"\n    [feature]="selection"\n  ></gn-ui-feature-detail>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[geo_table_view_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[src.Ls,src.K_,core.ChangeDetectorRef,Object])],GeoTableViewComponent)},"./libs/feature/map/src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{LL:()=>FEATURE_MAP_OPTIONS,K_:()=>feature_info_service.K,YC:()=>FeatureMapModule,KW:()=>map_context_model.K,Ls:()=>map_manager_service.L,Y7:()=>map_style_service.Y,fD:()=>map_utils_service.fD});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),ngrx_store=__webpack_require__("./node_modules/@ngrx/store/fesm2022/ngrx-store.mjs");const addLayer=(0,ngrx_store.PH)("[Map] Add Layer",(0,ngrx_store.Ky)()),removeLayer=(0,ngrx_store.PH)("[Map] Remove Layer",(0,ngrx_store.Ky)()),updateLayer=(0,ngrx_store.PH)("[Map] Update Layer",(0,ngrx_store.Ky)()),changeLayerOrder=(0,ngrx_store.PH)("[Map] Change Layer Order",(0,ngrx_store.Ky)()),setLayerError=(0,ngrx_store.PH)("[Map] Set Layer Error",(0,ngrx_store.Ky)()),clearLayerError=(0,ngrx_store.PH)("[Map] Clear Layer Error",(0,ngrx_store.Ky)()),reducer=(0,ngrx_store.Lq)({layers:[]},(0,ngrx_store.on)(addLayer,((state,action)=>{const layers=[...state.layers],layerWithInfo={...action.layer,loading:!1,error:null};return"atIndex"in action?layers.splice(action.atIndex,0,layerWithInfo):layers.push(layerWithInfo),{...state,layers}})),(0,ngrx_store.on)(updateLayer,((state,action)=>({...state,layers:state.layers.map(((layer,index)=>index===action.index?{...action.updatedLayer,loading:!1,error:null}:layer))}))),(0,ngrx_store.on)(removeLayer,((state,action)=>({...state,layers:state.layers.filter(((layer,index)=>index!==action.index))}))),(0,ngrx_store.on)(changeLayerOrder,((state,action)=>{const layers=[...state.layers],moved=layers.splice(action.currentIndex,1)[0];return layers.splice(action.newIndex,0,moved),{...state,layers}})),(0,ngrx_store.on)(setLayerError,((state,action)=>({...state,layers:state.layers.map(((layer,index)=>index===action.index?{...layer,error:action.error}:layer))}))),(0,ngrx_store.on)(clearLayerError,((state,action)=>({...state,layers:state.layers.map(((layer,index)=>index===action.index?{...layer,error:null}:layer))}))));const getMapState=(0,ngrx_store.ZF)("map"),getMapLayers=(0,ngrx_store.P1)(getMapState,(state=>state.layers));var _class;let MapFacade=((_class=class MapFacade{constructor(store){this.store=store,this.layers$=this.store.pipe((0,ngrx_store.Ys)(getMapLayers))}init(){}addLayer(layer){this.store.dispatch(addLayer({layer}))}addLayerAtIndex(layer,index){this.store.dispatch(addLayer({layer,atIndex:index}))}removeLayer(index){this.store.dispatch(removeLayer({index}))}}).ctorParameters=()=>[{type:ngrx_store.yh}],_class);MapFacade=(0,tslib_es6.gn)([(0,core.Injectable)(),(0,tslib_es6.w6)("design:paramtypes",[ngrx_store.yh])],MapFacade);var common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),src=__webpack_require__("./libs/ui/map/src/index.ts"),Circle=__webpack_require__("./node_modules/ol/style/Circle.js"),Fill=__webpack_require__("./node_modules/ol/style/Fill.js"),Stroke=__webpack_require__("./node_modules/ol/style/Stroke.js"),Style=__webpack_require__("./node_modules/ol/style/Style.js");const defaultStyle=Style.yF,_hlStyle=new Style.ZP({image:new Circle.Z({fill:new Fill.Z({color:"red"}),stroke:new Stroke.Z({color:"red",width:2}),radius:5})}),defaultMapOptions={defaultStyle,hlStyle:()=>_hlStyle},FEATURE_MAP_OPTIONS=new core.InjectionToken("mapOptions");var map_instance_directive_class,map_manager_service=__webpack_require__("./libs/feature/map/src/lib/manager/map-manager.service.ts");let MapInstanceDirective=((map_instance_directive_class=class MapInstanceDirective{constructor(manager){this.manager=manager}}).ctorParameters=()=>[{type:map_manager_service.L}],map_instance_directive_class);MapInstanceDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[gnUiMapContainer]",providers:[map_manager_service.L]}),(0,tslib_es6.w6)("design:paramtypes",[map_manager_service.L])],MapInstanceDirective);var map_context_component=__webpack_require__("./libs/feature/map/src/lib/map-context/component/map-context.component.ts");var layers_panel_component_class,layers_panel_componentngResource=__webpack_require__("./libs/feature/map/src/lib/layers-panel/layers-panel.component.scss?ngResource"),layers_panel_componentngResource_default=__webpack_require__.n(layers_panel_componentngResource);let LayersPanelComponent=((layers_panel_component_class=class LayersPanelComponent{constructor(mapFacade){this.mapFacade=mapFacade,this.layers$=this.mapFacade.layers$}deleteLayer(index){this.mapFacade.removeLayer(index)}}).ctorParameters=()=>[{type:MapFacade}],layers_panel_component_class);LayersPanelComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-layers-panel",template:'<div\n  class="bg-white rounded shadow shadow-lg relative h-full w-[400px] overflow-hidden"\n>\n  <div class="p-3 border-b border-gray-300 flex items-center">\n    <mat-icon class="mr-2">layers</mat-icon>\n    <span translate>map.layers.list</span>\n  </div>\n  <div class="flex flex-col px-4 divide-y divide-y-gray-50">\n    <div\n      *ngFor="let layer of layers$ | async; let index = index"\n      class="flex flex-row py-3"\n    >\n      <mat-icon class="-ml-2 mr-2 shrink-0">chevron_right</mat-icon>\n      <span class="mr-2 grow">{{ layer.title }}</span>\n      <a\n        href\n        class="underline text-sm text-red-700 hover:text-red-900"\n        (click)="deleteLayer(index)"\n      >\n        delete\n      </a>\n    </div>\n  </div>\n  <gn-ui-expandable-panel-button [titleTemplate]="addLayerTitle">\n    <mat-tab-group animationDuration="200ms" class="h-full">\n      <mat-tab [label]="\'map.add.layer.catalog\' | translate">\n        <div class="p-3">\n          <gn-ui-add-layer-from-catalog></gn-ui-add-layer-from-catalog>\n        </div>\n      </mat-tab>\n      <mat-tab [label]="\'map.add.layer.wms\' | translate" bodyClass="h-full">\n        <div class="p-3 h-full">Add from WMS</div>\n      </mat-tab>\n      <mat-tab [label]="\'map.add.layer.wfs\' | translate" bodyClass="h-full">\n        <div class="p-3 h-full">Add from WFS</div>\n      </mat-tab>\n      <mat-tab [label]="\'map.add.layer.file\' | translate" bodyClass="h-full">\n        <div class="p-3 h-full">Add from file</div>\n      </mat-tab>\n    </mat-tab-group>\n  </gn-ui-expandable-panel-button>\n</div>\n\n<ng-template #addLayerTitle>\n  <mat-icon class="mr-4">add_circle</mat-icon>\n  <span translate>map.add.layer</span>\n</ng-template>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[layers_panel_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[MapFacade])],LayersPanelComponent);var layout_src=__webpack_require__("./libs/ui/layout/src/index.ts"),icon=__webpack_require__("./node_modules/@angular/material/fesm2022/icon.mjs"),tabs=__webpack_require__("./node_modules/@angular/material/fesm2022/tabs.mjs"),ngx_translate_core=__webpack_require__("./node_modules/@ngx-translate/core/fesm2020/ngx-translate-core.mjs");var add_layer_from_catalog_componentngResource=__webpack_require__("./libs/feature/map/src/lib/add-layer-from-catalog/add-layer-from-catalog.component.css?ngResource"),add_layer_from_catalog_componentngResource_default=__webpack_require__.n(add_layer_from_catalog_componentngResource),shared_src=__webpack_require__("./libs/util/shared/src/index.ts"),search_src=__webpack_require__("./libs/feature/search/src/index.ts"),ui_search_src=__webpack_require__("./libs/ui/search/src/index.ts"),asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");var add_layer_record_preview_component_class,add_layer_record_preview_componentngResource=__webpack_require__("./libs/feature/map/src/lib/add-layer-from-catalog/add-layer-record-preview/add-layer-record-preview.component.css?ngResource"),add_layer_record_preview_componentngResource_default=__webpack_require__.n(add_layer_record_preview_componentngResource),of=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/of.js"),throwError=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/throwError.js"),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),map_utils_service=__webpack_require__("./libs/feature/map/src/lib/utils/map-utils.service.ts"),map_context_model=(__webpack_require__("./libs/feature/map/src/lib/utils/map-utils-wms.service.ts"),__webpack_require__("./libs/feature/map/src/lib/map-context/map-context.model.ts"));let AddLayerRecordPreviewComponent=((add_layer_record_preview_component_class=class AddLayerRecordPreviewComponent extends ui_search_src.W9{get mapLinks(){return this.record.links.filter((link=>this.linkClassifier.hasUsage(link,shared_src.KR.MAP_API)))}constructor(elementRef,linkClassifier,mapFacade,mapUtils){super(elementRef),this.elementRef=elementRef,this.linkClassifier=linkClassifier,this.mapFacade=mapFacade,this.mapUtils=mapUtils}handleLinkClick(link){var _this=this;return(0,asyncToGenerator.Z)((function*(){const layer=yield _this.getLayerFromLink(link).toPromise();_this.mapFacade.addLayer({...layer,title:_this.record.title})}))()}getLayerFromLink(link){return link.type===shared_src.cB.WMS?(0,of.of)({url:link.url,type:map_context_model.K.WMS,name:link.name}):link.type===shared_src.cB.WMTS?this.mapUtils.getWmtsOptionsFromCapabilities(link).pipe((0,map.U)((options=>({type:map_context_model.K.WMTS,options})))):(0,throwError._)("protocol not supported")}getLinkLabel(link){return(0,shared_src.en)(link)}}).ctorParameters=()=>[{type:core.ElementRef},{type:shared_src.nt},{type:MapFacade},{type:map_utils_service.fD}],add_layer_record_preview_component_class);var add_layer_from_catalog_component_class;AddLayerRecordPreviewComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-add-layer-record-preview",template:'<div class="w-full flex flex-row rounded-sm" [title]="record.abstract">\n  <gn-ui-thumbnail\n    class="w-16 h-16 shrink-0 border-r border-gray-200 bg-gray-100"\n    [thumbnailUrl]="record.thumbnailUrl"\n  ></gn-ui-thumbnail>\n\n  <div class="flex flex-col p-2 gap-2 overflow-hidden">\n    <h1 class="text-sm font-medium truncate">\n      {{ record.title }}\n    </h1>\n    <ng-container *ngFor="let link of mapLinks">\n      <gn-ui-button\n        [type]="\'outline\'"\n        (buttonClick)="handleLinkClick(link)"\n        extraClass="!py-[8px] !px-[12px]"\n      >\n        <div class="text-left text-[12px] line-clamp-2">\n          {{ getLinkLabel(link) }}\n        </div>\n      </gn-ui-button>\n    </ng-container>\n  </div>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[add_layer_record_preview_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[core.ElementRef,shared_src.nt,MapFacade,map_utils_service.fD])],AddLayerRecordPreviewComponent);let AddLayerFromCatalogComponent=((add_layer_from_catalog_component_class=class AddLayerFromCatalogComponent{constructor(searchFacade){this.searchFacade=searchFacade}ngOnInit(){this.searchFacade.init("map-add-layer"),this.searchFacade.setConfigRequestFields({includes:[...shared_src.lq,"link"]}),this.searchFacade.setFilters({availableInServices:{query_string:"+linkProtocol:/OGC:WMS.*/"}})}}).ctorParameters=()=>[{type:search_src.fi}],add_layer_from_catalog_component_class);AddLayerFromCatalogComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-add-layer-from-catalog",template:'<div class="h-full text-sm">\n  <gn-ui-fuzzy-search></gn-ui-fuzzy-search>\n  <gn-ui-results-list-container\n    layout="ADDLAYER"\n  ></gn-ui-results-list-container>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,providers:[search_src.fi,search_src.oD,{provide:ui_search_src.z6,useValue:{ADDLAYER:new ui_search_src.Ne(AddLayerRecordPreviewComponent,"py-2","","flex flex-col divide-y divide-y-grey-50")}}],styles:[add_layer_from_catalog_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[search_src.fi])],AddLayerFromCatalogComponent);var map_effects_class,ngrx_effects=__webpack_require__("./node_modules/@ngrx/effects/fesm2022/ngrx-effects.mjs");let MapEffects=((map_effects_class=class MapEffects{constructor(actions$){this.actions$=actions$}}).ctorParameters=()=>[{type:ngrx_effects.eX}],map_effects_class);MapEffects=(0,tslib_es6.gn)([(0,core.Injectable)(),(0,tslib_es6.w6)("design:paramtypes",[ngrx_effects.eX])],MapEffects);var map_container_component_class,map_container_componentngResource=__webpack_require__("./libs/feature/map/src/lib/map-container/map-container.component.css?ngResource"),map_container_componentngResource_default=__webpack_require__.n(map_container_componentngResource),map_context_service=__webpack_require__("./libs/feature/map/src/lib/map-context/map-context.service.ts");let MapContainerComponent=((map_container_component_class=class MapContainerComponent{constructor(mapFacade){this.mapFacade=mapFacade,this.context$=this.mapFacade.layers$.pipe((0,map.U)((layers=>({view:{center:[4,42],zoom:6},layers:[map_context_service.SL,...layers]}))))}}).ctorParameters=()=>[{type:MapFacade}],map_container_component_class);MapContainerComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-map-container",template:'<gn-ui-map-context [context]="context$ | async"></gn-ui-map-context>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[map_container_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[MapFacade])],MapContainerComponent);var elements_src=__webpack_require__("./libs/ui/elements/src/index.ts"),inputs_src=__webpack_require__("./libs/ui/inputs/src/index.ts");let FeatureMapModule=class FeatureMapModule{};FeatureMapModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[map_context_component.p,MapInstanceDirective,LayersPanelComponent,AddLayerFromCatalogComponent,MapContainerComponent,AddLayerRecordPreviewComponent],exports:[map_context_component.p,MapInstanceDirective,LayersPanelComponent,AddLayerFromCatalogComponent,MapContainerComponent],imports:[common.CommonModule,src.c,layout_src.P,icon.Ps,tabs.Nh,ngx_translate_core.aw,search_src.LG,ngrx_store.Aw.forFeature("map",(function mapReducer(state,action){return reducer(state,action)})),ngrx_effects.sQ.forFeature([MapEffects]),elements_src.Zx,inputs_src.uU],providers:[{provide:FEATURE_MAP_OPTIONS,useValue:defaultMapOptions},MapFacade]})],FeatureMapModule);var feature_info_service=__webpack_require__("./libs/feature/map/src/lib/feature-info/feature-info.service.ts"),map_style_service=__webpack_require__("./libs/feature/map/src/lib/style/map-style.service.ts");new Style.ZP({image:new Circle.Z({fill:new Fill.Z({color:"blue"}),stroke:new Stroke.Z({color:"white",width:2}),radius:5}),fill:new Fill.Z({color:"rgba(0,0,255,0.25)"}),stroke:new Stroke.Z({color:"white",width:2})}),new Style.ZP({image:new Circle.Z({fill:new Fill.Z({color:"red"}),stroke:new Stroke.Z({color:"white",width:3}),radius:6}),fill:new Fill.Z({color:"rgba(255,0,0,0.25)"}),stroke:new Stroke.Z({color:"red",width:3})})},"./libs/feature/search/src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{dt:()=>ElasticsearchMapper,LG:()=>FeatureSearchModule,fi:()=>SearchFacade,oD:()=>SearchService});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),http=__webpack_require__("./node_modules/@angular/common/fesm2022/http.mjs"),src=__webpack_require__("./libs/data-access/gn4/src/index.ts"),search_src=__webpack_require__("./libs/ui/search/src/index.ts"),ngrx_effects=__webpack_require__("./node_modules/@ngrx/effects/fesm2022/ngrx-effects.mjs"),ngrx_store=__webpack_require__("./node_modules/@ngrx/store/fesm2022/ngrx-store.mjs"),ngx_translate_core=__webpack_require__("./node_modules/@ngx-translate/core/fesm2020/ngx-translate-core.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");var facets_container_componentngResource=__webpack_require__("./libs/feature/search/src/lib/facets/facets-container/facets-container.component.css?ngResource"),facets_container_componentngResource_default=__webpack_require__.n(facets_container_componentngResource),combineLatest=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js"),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),take=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/take.js"),from=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/from.js"),of=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/of.js");const SET_FILTERS="[Search] Set Filters",SET_CONFIG_FILTERS="[Search] Set config filters",UPDATE_FILTERS="[Search] Update Filters",SET_SEARCH="[Search] Set overall search configuration",SET_FAVORITES_ONLY="[Search] Favorites Only",SET_SORT_BY="[Search] Sort By",SET_PAGINATION="[Search] Set pagination",PAGINATE="[Search] Paginate",SCROLL="[Search] Scroll",SET_RESULTS_LAYOUT="[Search] Set results layout",ADD_RESULTS="[Search] Add Results",CLEAR_PAGINATION="[Search] Clear Paging",CLEAR_RESULTS="[Search] Clear Results",REQUEST_MORE_RESULTS="[Search] Request More Results",SET_RESULTS_AGGREGATIONS="[Search] Set Results Aggregations",SET_RESULTS_HITS="[Search] Set Results hits",SET_CONFIG_AGGREGATIONS="[Search] Set Config Aggregations",UPDATE_CONFIG_AGGREGATIONS="[Search] Update Config Aggregations",SET_CONFIG_REQUEST_FIELDS="[Search] Set Config requested fields",UPDATE_REQUEST_AGGREGATION_TERM="[Search] Update request aggregation term",PATCH_RESULTS_AGGREGATIONS="[Search] Patch Results Aggregations",SET_ERROR="[Search] Set Error",CLEAR_ERROR="[Search] Clear Error",SET_SPATIAL_FILTER_ENABLED="[Search] Set Spatial Filter Enabled";class AbstractAction{constructor(id){this.id=id||"default"}}class AddSearch{constructor(id){this.id=id,this.type="[Search] Add search instance"}}class SetConfigFilters extends AbstractAction{constructor(payload,id){super(id),this.payload=payload,this.type=SET_CONFIG_FILTERS}}class SetFilters extends AbstractAction{constructor(payload,id){super(id),this.payload=payload,this.type=SET_FILTERS}}class UpdateFilters extends AbstractAction{constructor(payload,id){super(id),this.payload=payload,this.type=UPDATE_FILTERS}}class SetSearch extends AbstractAction{constructor(payload,id){super(id),this.payload=payload,this.type=SET_SEARCH}}class SetFavoritesOnly extends AbstractAction{constructor(favoritesOnly,id){super(id),this.favoritesOnly=favoritesOnly,this.type=SET_FAVORITES_ONLY}}class SetSortBy extends AbstractAction{constructor(sortBy,id){super(id),this.sortBy=sortBy,this.type=SET_SORT_BY}}class SetPagination extends AbstractAction{constructor(from,size,id){super(id),this.from=from,this.size=size,this.type=SET_PAGINATION}}class Paginate extends AbstractAction{constructor(delta,id){super(id),this.delta=delta,this.type=PAGINATE}}class ClearPagination extends AbstractAction{constructor(id){super(id),this.type=CLEAR_PAGINATION}}class Scroll extends AbstractAction{constructor(id){super(id),this.type=SCROLL}}class SetResultsLayout extends AbstractAction{constructor(resultsLayout,id){super(id),this.resultsLayout=resultsLayout,this.type=SET_RESULTS_LAYOUT}}class AddResults extends AbstractAction{constructor(payload,id){super(id),this.payload=payload,this.type=ADD_RESULTS}}class ClearResults extends AbstractAction{constructor(id){super(id),this.type=CLEAR_RESULTS}}class RequestMoreResults extends AbstractAction{constructor(id){super(id),this.type=REQUEST_MORE_RESULTS}}class SetResultsAggregations extends AbstractAction{constructor(payload,id){super(id),this.payload=payload,this.type=SET_RESULTS_AGGREGATIONS}}class SetResultsHits extends AbstractAction{constructor(payload,id){super(id),this.payload=payload,this.type=SET_RESULTS_HITS}}class SetConfigAggregations extends AbstractAction{constructor(payload,id){super(id),this.payload=payload,this.type=SET_CONFIG_AGGREGATIONS}}class UpdateConfigAggregations extends AbstractAction{constructor(payload,id){super(id),this.payload=payload,this.type=UPDATE_CONFIG_AGGREGATIONS}}class SetConfigRequestFields extends AbstractAction{constructor(payload,id){super(id),this.payload=payload,this.type=SET_CONFIG_REQUEST_FIELDS}}class RequestMoreOnAggregation extends AbstractAction{constructor(key,increment,id){super(id),this.key=key,this.increment=increment,this.type="[Search] Request More On Aggregation"}}class SetIncludeOnAggregation extends AbstractAction{constructor(key,include,id){super(id),this.key=key,this.include=include,this.type="[Search] Set term include"}}class UpdateRequestAggregationTerm extends AbstractAction{constructor(key,patch,id){super(id),this.key=key,this.patch=patch,this.type=UPDATE_REQUEST_AGGREGATION_TERM}}class PatchResultsAggregations extends AbstractAction{constructor(key,payload,id){super(id),this.key=key,this.payload=payload,this.type=PATCH_RESULTS_AGGREGATIONS}}class SetError extends AbstractAction{constructor(code,message,id){super(id),this.code=code,this.message=message,this.type=SET_ERROR}}class ClearError extends AbstractAction{constructor(id){super(id),this.type=CLEAR_ERROR}}class SetSpatialFilterEnabled extends AbstractAction{constructor(enabled,id){super(id),this.enabled=enabled,this.type=SET_SPATIAL_FILTER_ENABLED}}var shared_src=__webpack_require__("./libs/util/shared/src/index.ts");const initSearch=()=>({config:{filters:{},source:{includes:shared_src.Dc}},params:{filters:{},size:shared_src.x5,from:0,favoritesOnly:!1,useSpatialFilter:!0},results:{hits:null,records:[],aggregations:{}},loadingMore:!1,error:null}),initialState={default:initSearch()};const getSearchState=(0,ngrx_store.ZF)("searchState"),getSearchStateSearch=(0,ngrx_store.P1)(getSearchState,((state,id="default")=>state[id])),getSearchFilters=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.params.filters)),getSearchSortBy=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.params.sortBy)),getSearchResultsLayout=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.resultsLayout)),getSearchConfigAggregations=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.config.aggregations)),getSearchResults=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.results.records)),getSearchResultsLoading=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.loadingMore)),getSearchResultsAggregations=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.results.aggregations)),getSearchResultsHits=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.results.hits)),isEndOfResults=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.results.hits&&state.params.from+state.params.size>=state.results.hits.value)),totalPages=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.results.hits&&Math.ceil(state.results.hits.value/state.params.size))),currentPage=(0,ngrx_store.P1)(getSearchStateSearch,(state=>Math.ceil(state.params.from/state.params.size)+1)),getSize=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.params.size)),getFavoritesOnly=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.params.favoritesOnly)),getError=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.error)),getSpatialFilterEnabled=(0,ngrx_store.P1)(getSearchStateSearch,(state=>state.params.useSpatialFilter));var _class,catchError=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/catchError.js"),shareReplay=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js");let SearchFacade=(_class=class SearchFacade{constructor(store,filterGeometry){this.store=store,this.filterGeometry=filterGeometry,this.hasSpatialFilter$=(0,from.D)(this.filterGeometry??(0,of.of)(null)).pipe((0,map.U)((geom=>!!geom)),(0,catchError.K)((()=>(0,of.of)(!1))),(0,shareReplay.d)(1))}init(searchId="default"){if(this.searchId)throw new Error(`This SearchFacade instance was already initialized with the following searchId: ${this.searchId}`);this.searchId=searchId,this.store.dispatch(new AddSearch(searchId)),this.results$=this.store.pipe((0,ngrx_store.Ys)(getSearchResults,searchId)),this.layout$=this.store.pipe((0,ngrx_store.Ys)(getSearchResultsLayout,searchId)),this.isLoading$=this.store.pipe((0,ngrx_store.Ys)(getSearchResultsLoading,searchId)),this.searchFilters$=this.store.pipe((0,ngrx_store.Ys)(getSearchFilters,searchId)),this.resultsHits$=this.store.pipe((0,ngrx_store.Ys)(getSearchResultsHits,searchId)),this.isEndOfResults$=this.store.pipe((0,ngrx_store.Ys)(isEndOfResults,searchId)),this.totalPages$=this.store.pipe((0,ngrx_store.Ys)(totalPages,searchId)),this.currentPage$=this.store.pipe((0,ngrx_store.Ys)(currentPage,searchId)),this.size$=this.store.pipe((0,ngrx_store.Ys)(getSize,searchId)),this.configAggregations$=this.store.pipe((0,ngrx_store.Ys)(getSearchConfigAggregations,searchId)),this.resultsAggregations$=this.store.pipe((0,ngrx_store.Ys)(getSearchResultsAggregations,searchId)),this.sortBy$=this.store.pipe((0,ngrx_store.Ys)(getSearchSortBy,searchId)),this.favoritesOnly$=this.store.pipe((0,ngrx_store.Ys)(getFavoritesOnly,searchId)),this.error$=this.store.pipe((0,ngrx_store.Ys)(getError,searchId)),this.spatialFilterEnabled$=this.store.pipe((0,ngrx_store.Ys)(getSpatialFilterEnabled,searchId))}clearResults(){return this.store.dispatch(new ClearResults(this.searchId)),this}setConfigAggregations(config){return this.store.dispatch(new SetConfigAggregations(config,this.searchId)),this}updateConfigAggregations(config){return this.store.dispatch(new UpdateConfigAggregations(config,this.searchId)),this}setConfigRequestFields(fields){return this.store.dispatch(new SetConfigRequestFields(fields,this.searchId)),this}setConfigFilters(filters){return this.store.dispatch(new SetConfigFilters(filters,this.searchId)),this}requestMoreResults(){return this.store.dispatch(new RequestMoreResults(this.searchId)),this}requestMoreOnAggregation(key,increment){return this.store.dispatch(new RequestMoreOnAggregation(key,increment,this.searchId)),this}setResultsLayout(layout){return this.store.dispatch(new SetResultsLayout(layout,this.searchId)),this}setFilters(filters){return this.store.dispatch(new SetFilters(filters,this.searchId)),this}updateFilters(filters){return this.store.dispatch(new UpdateFilters(filters,this.searchId)),this}setSearch(params){return this.store.dispatch(new SetSearch(params,this.searchId)),this}setFavoritesOnly(favoritesOnly){return this.store.dispatch(new SetFavoritesOnly(favoritesOnly,this.searchId)),this}setIncludeOnAggregation(key,include){return this.store.dispatch(new SetIncludeOnAggregation(key,include,this.searchId)),this}setPagination(from,size){return this.store.dispatch(new SetPagination(from,size,this.searchId)),this}paginate(delta){return this.store.dispatch(new Paginate(delta,this.searchId)),this}scroll(){return this.store.dispatch(new Scroll(this.searchId)),this}setSortBy(sortBy){return this.store.dispatch(new SetSortBy(sortBy,this.searchId)),this}setSpatialFilterEnabled(enabled){return this.store.dispatch(new SetSpatialFilterEnabled(enabled,this.searchId)),this}},_class.ctorParameters=()=>[{type:ngrx_store.yh},{type:Promise,decorators:[{type:core.Optional},{type:core.Inject,args:[FILTER_GEOMETRY]}]}],_class);var facets_service_class;SearchFacade=(0,tslib_es6.gn)([(0,core.Injectable)(),(0,tslib_es6.w6)("design:paramtypes",[ngrx_store.yh,Promise])],SearchFacade);let FacetsService=((facets_service_class=class FacetsService{constructor(logger){this.logger=logger}createFacetModel(requestAggregations,responseAggregations,isNested,path=[]){const listModel=[];if(void 0!==requestAggregations)for(const key in requestAggregations)if(key in responseAggregations){const requestAgg=requestAggregations[key],responseAgg=responseAggregations[key];let blockModel={key,items:[],path:[...path,responseAgg.meta?.field||key],meta:responseAgg.meta};if(shared_src.Tn.TERMS in requestAgg)blockModel={...blockModel,type:shared_src.Tn.TERMS,size:requestAgg[shared_src.Tn.TERMS].size,more:responseAgg.sum_other_doc_count>0,includeFilter:void 0!==requestAgg.terms.include,excludeFilter:void 0!==requestAgg.terms.exclude},responseAgg.buckets.forEach((bucket=>{if(bucket.key){const value=bucket.key_as_string||bucket.key,itemPath=[...blockModel.path,String(value)],itemModel={value,meta:bucket.meta,count:bucket.doc_count,path:itemPath};blockModel.items.push(itemModel)}}));else if(shared_src.Tn.HISTOGRAM in requestAgg)if(blockModel={...blockModel,type:shared_src.Tn.HISTOGRAM,size:requestAgg[shared_src.Tn.HISTOGRAM].size},requestAgg[shared_src.Tn.HISTOGRAM].keyed){const entries=Object.entries(responseAgg.buckets);for(let p=0;p<entries.length;p++){const entry=entries[p],nextEntry=entries[p+1],lowerBound=entry[1].key,upperBound=1===entries.length?lowerBound+Number(requestAgg[shared_src.Tn.HISTOGRAM].interval):nextEntry?nextEntry[1].key:"*",value=lowerBound+"-"+upperBound,itemPath=[...blockModel.path,lowerBound+""],itemModel={value,meta:entry[1].meta,count:entry[1].doc_count,query_string:`+${requestAgg.histogram.field}:[${lowerBound} TO ${upperBound}}`,path:itemPath};blockModel.items.push(itemModel)}}else this.logger.warn('Facet configuration error. Histogram are only supported with keyed mode.eg. creationYearForResource: {histogram: { field: "creationYearForResource",interval: 5,keyed: true,min_doc_count: 1}}');else if(shared_src.Tn.FILTERS in requestAgg){const type=shared_src.Tn.FILTERS;blockModel={...blockModel,type,size:requestAgg[type].size},Object.entries(responseAgg.buckets).forEach((entry=>{const itemValue=entry[0],bucket=entry[1],itemPath=[...blockModel.path,itemValue],itemModel={value:itemValue,meta:bucket.meta,count:bucket.doc_count,path:itemPath,query_string:requestAgg.filters.filters[itemValue].query_string.query};blockModel.items.push(itemModel)}))}else this.logger.warn("Unsupported aggregation config.",requestAgg);listModel.push(blockModel)}return listModel}computeItemPathValue(block,item){const{selected,inverted}=item,{type}=block;let value=!inverted;return selected?type!==shared_src.Tn.FILTERS&&type!==shared_src.Tn.HISTOGRAM||(value=item.query_string,inverted&&(value=`-(${value})`)):value=null,value}computeNewFiltersFromState(filters,path,value){const clone=JSON.parse(JSON.stringify(filters)),getter=(0,shared_src.Qc)(path.join(shared_src.Ge));if(null===value)this.removePathFromFilters_(clone,path);else{(0,getter.assign)(clone,value)}return clone}removePathFromFilters_(filters,path){const head=path[0],tail=path.slice(1);for(const prop of Object.keys(filters))prop in filters&&(head.toString()===prop&&0===tail.length?delete filters[prop]:"object"==typeof filters[prop]&&(this.removePathFromFilters_(filters[prop],tail),0===Object.keys(filters[prop]).length&&delete filters[prop]))}findSelectedPaths(filters){const discoveredObjects=[],path=[],results=[];return function find(obj){for(const key of Object.keys(obj)){"object"!=typeof obj[key]&&(path.push(key),results.push(Array.from(path)),path.pop());const o=obj[key];o&&"object"==typeof o&&(discoveredObjects.find((discovered=>discovered===o))||(path.push(key),discoveredObjects.push(o),find(o),path.pop()))}}(filters),results}}).ctorParameters=()=>[{type:shared_src.$V}],facets_service_class);FacetsService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[shared_src.$V])],FacetsService);var facets_container_component_class,biesbjerg_ngx_translate_extract_marker=__webpack_require__("./node_modules/@biesbjerg/ngx-translate-extract-marker/fesm5/biesbjerg-ngx-translate-extract-marker.js");(0,biesbjerg_ngx_translate_extract_marker.J)("facets.block.title.OrgForResource"),(0,biesbjerg_ngx_translate_extract_marker.J)("facets.block.title.availableInServices"),(0,biesbjerg_ngx_translate_extract_marker.J)("facets.block.title.cl_hierarchyLevel.key"),(0,biesbjerg_ngx_translate_extract_marker.J)("facets.block.title.cl_maintenanceAndUpdateFrequency.key"),(0,biesbjerg_ngx_translate_extract_marker.J)("facets.block.title.cl_spatialRepresentationType.key"),(0,biesbjerg_ngx_translate_extract_marker.J)("facets.block.title.cl_status.key"),(0,biesbjerg_ngx_translate_extract_marker.J)("facets.block.title.creationYearForResource"),(0,biesbjerg_ngx_translate_extract_marker.J)("facets.block.title.resolutionScaleDenominator"),(0,biesbjerg_ngx_translate_extract_marker.J)("facets.block.title.tag"),(0,biesbjerg_ngx_translate_extract_marker.J)("facets.block.title.tag.default"),(0,biesbjerg_ngx_translate_extract_marker.J)("facets.block.title.th_regions_tree.default");let FacetsContainerComponent=((facets_container_component_class=class FacetsContainerComponent{constructor(facets,searchFacade){this.facets=facets,this.searchFacade=searchFacade}ngOnInit(){this.selectedPaths$=this.searchFacade.searchFilters$.pipe((0,map.U)((filters=>this.facets.findSelectedPaths(filters)))),this.models$=(0,combineLatest.a)([this.searchFacade.configAggregations$,this.searchFacade.resultsAggregations$]).pipe((0,map.U)((([configAggregations,resultsAggregations])=>this.facets.createFacetModel(configAggregations,resultsAggregations,!1))))}onItemChange(facetEvent){this.searchFacade.searchFilters$.pipe((0,take.q)(1)).subscribe((filters=>{this.updateFilters(filters,facetEvent)}))}updateFilters(filters,facetEvent){const{item,block}=facetEvent,{path}=item,pathValue=this.facets.computeItemPathValue(block,item),newFilters=this.facets.computeNewFiltersFromState(filters,path,pathValue);this.searchFacade.setFilters(newFilters)}onMore(key){this.searchFacade.requestMoreOnAggregation(key,20)}onFilterChange(term){const include=`.*${term.include}.*`;this.searchFacade.setIncludeOnAggregation(term.field,include)}}).ctorParameters=()=>[{type:FacetsService},{type:SearchFacade}],facets_container_component_class);FacetsContainerComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-facets-container",template:'<gn-ui-facet-list\n  [models]="models$ | async"\n  [selectedPaths]="selectedPaths$ | async"\n  (itemChange)="onItemChange($event)"\n  (more)="onMore($event)"\n  (filterChange)="onFilterChange($event)"\n></gn-ui-facet-list>\n',styles:[facets_container_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[FacetsService,SearchFacade])],FacetsContainerComponent);let FacetsModule=class FacetsModule{};FacetsModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[FacetsContainerComponent],imports:[common.CommonModule,ngx_translate_core.aw.forChild(),search_src.V],exports:[FacetsContainerComponent]})],FacetsModule);var metadata_url_service_class,fuzzy_search_componentngResource=__webpack_require__("./libs/feature/search/src/lib/fuzzy-search/fuzzy-search.component.css?ngResource"),fuzzy_search_componentngResource_default=__webpack_require__.n(fuzzy_search_componentngResource),inputs_src=__webpack_require__("./libs/ui/inputs/src/index.ts"),switchMap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"),i18n_src=__webpack_require__("./libs/util/i18n/src/index.ts");let MetadataUrlService=((metadata_url_service_class=class MetadataUrlService{constructor(translate,apiConfiguration){this.translate=translate,this.apiConfiguration=apiConfiguration}getUrl(uuid,apiPath=this.apiConfiguration.basePath){return`${`${apiPath}/../`}${i18n_src.UQ[this.translate.currentLang]}/catalog.search#/metadata/${uuid}`}}).ctorParameters=()=>[{type:ngx_translate_core.sK},{type:src.VK,decorators:[{type:core.Inject,args:[src.VK]}]}],metadata_url_service_class);var elasticsearch_field_mapper_class;MetadataUrlService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[ngx_translate_core.sK,src.VK])],MetadataUrlService);let ElasticsearchFieldMapper=((elasticsearch_field_mapper_class=class ElasticsearchFieldMapper{constructor(metadataUrlService,linkClassifier){this.metadataUrlService=metadataUrlService,this.linkClassifier=linkClassifier,this.fields={id:(output,source)=>({...output,id:(0,shared_src._M)(source,"id")}),uuid:(output,source)=>{const uuid=(0,shared_src._M)(source,"uuid");return{...output,uuid,metadataUrl:this.metadataUrlService.getUrl(uuid)}},resourceTitleObject:(output,source)=>({...output,title:(0,shared_src.hM)((0,shared_src.Qe)(source,"resourceTitleObject"),"no title")}),resourceAbstractObject:(output,source)=>({...output,abstract:(0,shared_src.hM)((0,shared_src.Qe)(source,"resourceAbstractObject"),"no title")}),overview:(output,source)=>({...output,thumbnailUrl:(0,shared_src.Nx)((0,shared_src.hM)((0,shared_src.Mj)((0,shared_src.sD)((0,shared_src._M)(source,"overview")),"url","data"),""))}),cl_status:(output,source)=>({...output,updateStatus:(0,shared_src.Uz)((0,shared_src.sD)((0,shared_src._M)(source,"cl_status")))}),cl_maintenanceAndUpdateFrequency:(output,source)=>({...output,updateFrequency:(0,shared_src.Uz)((0,shared_src.sD)((0,shared_src._M)(source,"cl_maintenanceAndUpdateFrequency")))}),creationDateForResource:(output,source)=>({...output,dataCreatedOn:(0,shared_src.ZU)((0,shared_src.sD)((0,shared_src._M)(source,"creationDateForResource")))}),createDate:(output,source)=>({...output,createdOn:(0,shared_src.ZU)((0,shared_src._M)(source,"createDate"))}),changeDate:(output,source)=>({...output,updatedOn:(0,shared_src.ZU)((0,shared_src._M)(source,"changeDate"))}),link:(output,source)=>{const links=(0,shared_src.xt)((0,shared_src._M)(source,"link")).map((link=>this.mapLink(link))).filter((v=>null!==v));return{...output,links,hasDownloads:links.some((link=>this.linkClassifier.hasUsage(link,shared_src.KR.DOWNLOAD))),hasMaps:links.some((link=>this.linkClassifier.hasUsage(link,shared_src.KR.MAP_API)))}},sourceCatalogue:(output,source)=>({...output,catalogUuid:(0,shared_src.hM)((0,shared_src._M)(source,"sourceCatalogue"),"no title")}),tag:(output,source)=>({...output,keywords:(0,shared_src.xt)((0,shared_src._M)(source,"tag")).map((tag=>(0,shared_src.Uz)(tag)))}),MD_ConstraintsUseLimitationObject:(output,source)=>this.constraintField("MD_ConstraintsUseLimitationObject",output,source),MD_LegalConstraintsUseLimitationObject:(output,source)=>this.constraintField("MD_LegalConstraintsUseLimitationObject",output,source),MD_LegalConstraintsOtherConstraintsObject:(output,source)=>this.constraintField("MD_LegalConstraintsOtherConstraintsObject",output,source),MD_SecurityConstraintsUseLimitationObject:(output,source)=>this.constraintField("MD_SecurityConstraintsUseLimitationObject",output,source),lineageObject:(output,source)=>({...output,lineage:(0,shared_src.Qe)(source,"lineageObject")}),mainLanguage:output=>output,userSavedCount:(output,source)=>({...output,favoriteCount:parseInt((0,shared_src._M)(source,"userSavedCount"))}),userinfo:(output,source)=>({...output,ownerInfo:(0,shared_src._M)(source,"userinfo")}),isOpenData:(output,source)=>({...output,isOpenData:"false"!==(0,shared_src._M)(source,"isOpenData")}),isPublishedToAll:(output,source)=>({...output,isPublishedToAll:"false"!==(0,shared_src._M)(source,"isPublishedToAll")})},this.genericField=output=>output,this.constraintField=(fieldName,output,source)=>({...output,constraints:[...output.constraints||[],...(0,shared_src._M)(source,fieldName).map(shared_src.Uz)]})}getMappingFn(fieldName){return fieldName in this.fields?this.fields[fieldName]:this.genericField}getLinkType(url,protocol){return protocol?/^ESRI:REST/.test(protocol)&&/FeatureServer/.test(url)?shared_src.cB.ESRI_REST:/^OGC:WMS/.test(protocol)?shared_src.cB.WMS:/^OGC:WFS/.test(protocol)?shared_src.cB.WFS:/^OGC:WMTS/.test(protocol)?shared_src.cB.WMTS:/^WWW:DOWNLOAD/.test(protocol)?shared_src.cB.DOWNLOAD:"WWW:LINK:LANDING_PAGE"===protocol?shared_src.cB.LANDING_PAGE:shared_src.cB.OTHER:shared_src.cB.OTHER}mapLink(sourceLink){const url=(0,shared_src.Nx)((0,shared_src.hM)((0,shared_src.Qe)(sourceLink,"urlObject"),(0,shared_src._M)(sourceLink,"url"))),name=(0,shared_src.hM)((0,shared_src.Qe)(sourceLink,"nameObject"),(0,shared_src._M)(sourceLink,"name")),description=(0,shared_src.hM)((0,shared_src.Qe)(sourceLink,"descriptionObject"),(0,shared_src._M)(sourceLink,"description"));if(null===url)return console.warn("A link without valid URL was found",sourceLink),null;if(!/^(https?|ftp):/.test(url))return console.warn("A link with an unsupported protocol URL was found; supported protocols are HTTP, HTTPS and FTP",sourceLink),null;const label=description||name,protocol=(0,shared_src._M)(sourceLink,"protocol"),mimeTypeMatches=protocol&&protocol.match(/^WWW:DOWNLOAD:(.+\/.+)$/),mimeType=mimeTypeMatches&&mimeTypeMatches[1],type=this.getLinkType(url.toString(),protocol);return{url,type,...name&&{name},...description&&{description},...label&&{label},...protocol&&{protocol},...mimeType&&{mimeType}}}}).ctorParameters=()=>[{type:MetadataUrlService},{type:shared_src.nt}],elasticsearch_field_mapper_class);ElasticsearchFieldMapper=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[MetadataUrlService,shared_src.nt])],ElasticsearchFieldMapper);var elasticsearch_mapper_class,catalog_src=__webpack_require__("./libs/feature/catalog/src/index.ts");let ElasticsearchMapper=((elasticsearch_mapper_class=class ElasticsearchMapper{constructor(fieldMapper,orgsService){this.fieldMapper=fieldMapper,this.orgsService=orgsService}toRecords(response){const responseHits=response.hits.hits;if(!responseHits.length)return(0,of.of)([]);const recordsObservable=responseHits.map((hit=>this.toRecord(hit)));return(0,combineLatest.a)(recordsObservable)}toRecord(hit){const{_source}=hit,record=Object.keys(_source).reduce(((prev,fieldName)=>this.fieldMapper.getMappingFn(fieldName)(prev,_source)),{});return this.orgsService.addOrganisationToRecordFromSource(_source,record)}}).ctorParameters=()=>[{type:ElasticsearchFieldMapper},{type:catalog_src.eF}],elasticsearch_mapper_class);ElasticsearchMapper=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[ElasticsearchFieldMapper,catalog_src.eF])],ElasticsearchMapper);var search_service_class,first=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/first.js");let SearchService=((search_service_class=class SearchService{constructor(facade){this.facade=facade}setSortAndFilters(filters,sort){this.setFilters(filters),this.setSortBy(sort)}updateFilters(params){this.facade.searchFilters$.pipe((0,first.P)(),(0,map.U)((filters=>({...filters,...params})))).subscribe((filters=>this.facade.setFilters(filters)))}setFilters(params){this.facade.setFilters(params)}setSortBy(sort){this.facade.setSortBy(sort)}}).ctorParameters=()=>[{type:SearchFacade}],search_service_class);var fuzzy_search_component_class;SearchService=(0,tslib_es6.gn)([(0,core.Injectable)(),(0,tslib_es6.w6)("design:paramtypes",[SearchFacade])],SearchService);let FuzzySearchComponent=((fuzzy_search_component_class=class FuzzySearchComponent{constructor(searchFacade,searchApiService,searchService,esMapper,esService){this.searchFacade=searchFacade,this.searchApiService=searchApiService,this.searchService=searchService,this.esMapper=esMapper,this.esService=esService,this.itemSelected=new core.EventEmitter,this.inputSubmitted=new core.EventEmitter,this.displayWithFn=record=>record?.title,this.autoCompleteAction=query=>this.searchApiService.search("bucket",JSON.stringify(this.esService.buildAutocompletePayload(query))).pipe((0,switchMap.w)((response=>this.esMapper.toRecords(response))))}ngOnInit(){this.searchInputValue$=this.searchFacade.searchFilters$.pipe((0,map.U)((searchFilter=>({title:searchFilter.any}))))}handleItemSelection(item){const record=item;this.itemSelected.observers.length>0?this.itemSelected.emit(record):this.searchFacade.setFilters({any:record.title})}handleInputSubmission(any){this.inputSubmitted.observers.length>0?this.inputSubmitted.emit(any):this.searchService.updateFilters({any})}}).ctorParameters=()=>[{type:SearchFacade},{type:src.uX},{type:SearchService},{type:ElasticsearchMapper},{type:shared_src.Hk}],fuzzy_search_component_class.propDecorators={autocomplete:[{type:core.ViewChild,args:[inputs_src.YR]}],itemSelected:[{type:core.Output}],inputSubmitted:[{type:core.Output}]},fuzzy_search_component_class);FuzzySearchComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-fuzzy-search",template:'<gn-ui-autocomplete\n  [placeholder]="\'search.field.any.placeholder\' | translate"\n  [displayWithFn]="displayWithFn"\n  [action]="autoCompleteAction"\n  (itemSelected)="handleItemSelection($event)"\n  (inputSubmitted)="handleInputSubmission($event)"\n  [value]="searchInputValue$ | async"\n  [clearOnSelection]="true"\n></gn-ui-autocomplete>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[fuzzy_search_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[SearchFacade,src.uX,SearchService,ElasticsearchMapper,shared_src.Hk])],FuzzySearchComponent);var records_metrics_component_class,records_metrics_componentngResource=__webpack_require__("./libs/feature/search/src/lib/records-metrics/records-metrics.component.css?ngResource"),records_metrics_componentngResource_default=__webpack_require__.n(records_metrics_componentngResource),share=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/share.js");let RecordsMetricsComponent=((records_metrics_component_class=class RecordsMetricsComponent{constructor(searchService){this.searchService=searchService,this.count=10,this.queryString="+isTemplate:n",this.metricSelect=new core.EventEmitter}ngOnInit(){this.results$=this.searchService.search("bucket",JSON.stringify({size:0,track_total_hits:!0,query:{query_string:{query:this.queryString}},aggs:{results:{terms:{field:this.field,size:this.count}}}})).pipe((0,map.U)((response=>response.aggregations.results.buckets.map((category=>({value:category.key,recordCount:category.doc_count}))))),(0,share.B)())}}).ctorParameters=()=>[{type:src.uX}],records_metrics_component_class.propDecorators={field:[{type:core.Input}],count:[{type:core.Input}],queryString:[{type:core.Input}],metricSelect:[{type:core.Output}]},records_metrics_component_class);RecordsMetricsComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-records-metrics",template:'<div class="grid md:grid-cols-3 lg:grid-cols-4 gap-4 p-4">\n  <div *ngFor="let category of results$ | async">\n    <gn-ui-record-metric\n      [label]="category.value | translate"\n      [count]="category.recordCount"\n      [icon]="\'\'"\n      (click)="metricSelect.emit(category)"\n    ></gn-ui-record-metric>\n  </div>\n</div>\n',styles:[records_metrics_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[src.uX])],RecordsMetricsComponent);var results_layout_component_class;let ResultsLayoutComponent=((results_layout_component_class=class ResultsLayoutComponent{constructor(searchFacade,resultsLayoutConfig){this.searchFacade=searchFacade,this.resultsLayoutConfig=resultsLayoutConfig,this.choices=Object.keys(this.resultsLayoutConfig).map((v=>({label:v,value:v})))}change(layout){this.searchFacade.setResultsLayout(layout)}}).ctorParameters=()=>[{type:SearchFacade},{type:void 0,decorators:[{type:core.Inject,args:[search_src.z6]}]}],results_layout_component_class);ResultsLayoutComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-results-layout",template:'<gn-ui-dropdown-selector\n  [title]="\'results.layout.selectOne\' | translate"\n  [ariaName]="\'results.layout.selectOne\' | translate"\n  [choices]="choices"\n  (selectValue)="change($event)"\n  [selected]="searchFacade.layout$ | async"\n></gn-ui-dropdown-selector>\n'}),(0,tslib_es6.w6)("design:paramtypes",[SearchFacade,Object])],ResultsLayoutComponent);var results_list_container_component_class,results_list_container_componentngResource=__webpack_require__("./libs/feature/search/src/lib/results-list/results-list.container.component.css?ngResource"),results_list_container_componentngResource_default=__webpack_require__.n(results_list_container_componentngResource),filter=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/filter.js"),elements_src=__webpack_require__("./libs/ui/elements/src/index.ts");let ResultsListContainerComponent=((results_list_container_component_class=class ResultsListContainerComponent{constructor(facade,resultsLayoutConfig,recordUrlTemplate){this.facade=facade,this.resultsLayoutConfig=resultsLayoutConfig,this.recordUrlTemplate=recordUrlTemplate,this.showMore="auto",this.mdSelect=new core.EventEmitter,this.errorTypes=elements_src.NI,this.recordUrlGetter=this.getRecordUrl.bind(this)}ngOnInit(){this.layoutConfig$=this.facade.layout$.pipe((0,map.U)((layout=>this.resultsLayoutConfig[layout]))),this.layout&&this.facade.setResultsLayout(this.layout),this.error$=this.facade.error$,this.errorCode$=this.error$.pipe((0,filter.h)((error=>null!==error)),(0,map.U)((error=>error.code))),this.errorMessage$=this.error$.pipe((0,filter.h)((error=>null!==error)),(0,map.U)((error=>error.message)))}onMetadataSelection(metadata){this.mdSelect.emit(metadata)}onShowMore(){this.facade.scroll()}getRecordUrl(metadata){return this.recordUrlTemplate?this.recordUrlTemplate.replace("${uuid}",metadata.uuid):null}}).ctorParameters=()=>[{type:SearchFacade},{type:void 0,decorators:[{type:core.Inject,args:[search_src.z6]}]},{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[RECORD_URL_TOKEN]}]}],results_list_container_component_class.propDecorators={layout:[{type:core.Input}],showMore:[{type:core.Input}],mdSelect:[{type:core.Output}]},results_list_container_component_class);ResultsListContainerComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-results-list-container",template:'<div *ngIf="(error$ | async) === null" class="search-results relative">\n  <gn-ui-results-list\n    [records]="facade.results$ | async"\n    [layoutConfig]="layoutConfig$ | async"\n    [favoriteTemplate]="favoriteToggle"\n    [recordUrlGetter]="recordUrlGetter"\n    (mdSelect)="onMetadataSelection($event)"\n  ></gn-ui-results-list>\n\n  <ng-container\n    *ngIf="\n      (facade.isLoading$ | async) === false &&\n      (facade.isEndOfResults$ | async) === false\n    "\n  >\n    <div class="show-more h-[100px] pt-[30px]" *ngIf="showMore === \'button\'">\n      <gn-ui-button\n        data-cy="addMoreBtn"\n        type="secondary"\n        (buttonClick)="onShowMore()"\n        extraClass="m-auto !p-[22px]"\n      >\n        <span class="uppercase font-medium tracking-widest" translate\n          >results.showMore</span\n        >\n      </gn-ui-button>\n    </div>\n    <div class="show-more h-[100px]" *ngIf="showMore === \'auto\'">\n      <gn-ui-viewport-intersector\n        (entersViewport)="onShowMore()"\n      ></gn-ui-viewport-intersector>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf="(facade.isLoading$ | async) === true">\n    <div class="loading flex justify-center h-[100px] pt-[45px]">\n      <gn-ui-spinning-loader></gn-ui-spinning-loader>\n    </div>\n  </ng-container>\n</div>\n\n<div class="p-4 max-w-[600px] m-auto text-[13px]">\n  <gn-ui-search-results-error\n    *ngIf="(errorCode$ | async) === 0"\n    [type]="errorTypes.COULD_NOT_REACH_API"\n  >\n  </gn-ui-search-results-error>\n  <gn-ui-search-results-error\n    *ngIf="(error$ | async) !== null && (errorCode$ | async) !== 0"\n    [type]="errorTypes.RECEIVED_ERROR"\n    [error]="errorMessage$ | async"\n  ></gn-ui-search-results-error>\n</div>\n\n<ng-template #favoriteToggle let-record>\n  <gn-ui-favorite-star [record]="record"></gn-ui-favorite-star>\n</ng-template>\n',styles:[results_list_container_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[SearchFacade,Object,String])],ResultsListContainerComponent);var sort_by_component_class;(0,biesbjerg_ngx_translate_extract_marker.J)("results.sortBy.relevancy"),(0,biesbjerg_ngx_translate_extract_marker.J)("results.sortBy.dateStamp"),(0,biesbjerg_ngx_translate_extract_marker.J)("results.sortBy.popularity");let SortByComponent=((sort_by_component_class=class SortByComponent{constructor(facade,searchService){this.facade=facade,this.searchService=searchService,this.choices=[{label:"results.sortBy.relevancy",value:shared_src.$q.RELEVANCY},{label:"results.sortBy.dateStamp",value:shared_src.$q.CREATE_DATE},{label:"results.sortBy.popularity",value:shared_src.$q.POPULARITY}],this.currentSortBy$=this.facade.sortBy$}changeSortBy(criteria){if("string"!=typeof criteria)throw new Error(`Unexpected SortBy value received: ${JSON.stringify(criteria)}`);this.searchService.setSortBy(criteria)}}).ctorParameters=()=>[{type:SearchFacade},{type:SearchService}],sort_by_component_class);SortByComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-sort-by",template:'<gn-ui-dropdown-selector\n  [title]="\'search.field.sortBy\' | translate"\n  [choices]="choices"\n  (selectValue)="changeSortBy($event)"\n  [selected]="currentSortBy$ | async"\n  ariaName="search-sort-by"\n></gn-ui-dropdown-selector>\n'}),(0,tslib_es6.w6)("design:paramtypes",[SearchFacade,SearchService])],SortByComponent);let FeatureAuthModule=class FeatureAuthModule{};var auth_service_class;FeatureAuthModule=(0,tslib_es6.gn)([(0,core.NgModule)({imports:[common.CommonModule]})],FeatureAuthModule);const LOGIN_URL=new core.InjectionToken("loginUrl");let AuthService=((auth_service_class=class AuthService{get loginUrl(){let baseUrl=this.baseLoginUrl;const locationHasQueryParams=!!window.location.search;return baseUrl.startsWith("${current_url}?")&&locationHasQueryParams&&(baseUrl=baseUrl.replace("?","&")),baseUrl.replace("${current_url}",window.location.toString()).replace("${lang2}",this.translateService.currentLang).replace("${lang3}",i18n_src.UQ[this.translateService.currentLang])}constructor(baseLoginUrlToken,meApi,translateService){this.baseLoginUrlToken=baseLoginUrlToken,this.meApi=meApi,this.translateService=translateService,this.isAnonymous$=this.authReady().pipe((0,map.U)((user=>!user||!("id"in user)))),this.baseLoginUrl=this.baseLoginUrlToken||"/geonetwork/srv/${lang3}/catalog.signin?redirect=${current_url}",this.user$=this.meApi.getMe().pipe((0,map.U)((apiUser=>this.mapToUserModel(apiUser))),(0,shareReplay.d)({bufferSize:1,refCount:!0}))}authReady(){return this.authReady$||(this.authReady$=this.meApi.getMe().pipe((0,map.U)((apiUser=>this.mapToUserModel(apiUser))),(0,shareReplay.d)({bufferSize:1,refCount:!0}))),this.authReady$}mapToUserModel(apiUser){if(!apiUser)return null;const{hash,groupsWithRegisteredUser,groupsWithEditor,groupsWithReviewer,groupsWithUserAdmin,admin,...user}=apiUser;return user}}).ctorParameters=()=>[{type:String,decorators:[{type:core.Optional},{type:core.Inject,args:[LOGIN_URL]}]},{type:src.lh},{type:ngx_translate_core.sK}],auth_service_class);AuthService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[String,src.lh,ngx_translate_core.sK])],AuthService);var withLatestFrom=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js"),Observable=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Observable.js"),mergeMap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js");var favorites_service_class,throwError=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/throwError.js"),Subject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js"),merge=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/merge.js"),tap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js");let FavoritesService=((favorites_service_class=class FavoritesService{constructor(userSelectionsService,authService){this.userSelectionsService=userSelectionsService,this.authService=authService,this.myUserId$=this.authService.authReady().pipe((0,map.U)((userInfo=>userInfo?parseInt(userInfo.id):null))),this.myFavoritesUuidFromApi$=this.myUserId$.pipe((0,switchMap.w)((userId=>null!==userId?this.userSelectionsService.getSelectionRecords(0,userId):(0,of.of)([]))),(0,catchError.K)((e=>(0,throwError._)(new Error(`An error occurred while fetching favorite records: ${e.message}`))))),this.modifiedFavorites$=new Subject.x,this.myFavoritesUuid$=(0,merge.T)(this.myFavoritesUuidFromApi$,this.modifiedFavorites$).pipe((0,shareReplay.d)(1))}addToFavorites(uuids){return this.myFavoritesUuid$.pipe((0,take.q)(1),(0,withLatestFrom.M)(this.myUserId$),(0,tap.b)((([,userId])=>{if(null===userId)throw new Error("not authenticated")})),(0,switchMap.w)((([favorites,userId])=>this.userSelectionsService.addToUserSelection(0,userId,uuids).pipe((0,tap.b)((()=>this.emitAddedFavorites(favorites,uuids)))))),(0,map.U)((()=>{})),(0,catchError.K)((e=>(0,throwError._)(new Error(`An error occurred while adding records to favorites: ${e.message}`)))))}removeFromFavorites(uuids){return this.myFavoritesUuid$.pipe((0,take.q)(1),(0,withLatestFrom.M)(this.myUserId$),(0,tap.b)((([,userId])=>{if(null===userId)throw new Error("not authenticated")})),(0,switchMap.w)((([favorites,userId])=>this.userSelectionsService.deleteFromUserSelection(0,userId,uuids).pipe((0,tap.b)((()=>this.emitRemovedFavorites(favorites,uuids)))))),(0,map.U)((()=>{})),(0,catchError.K)((e=>(0,throwError._)(new Error(`An error occurred while removing records from favorites: ${e.message}`)))))}emitAddedFavorites(favorites,addedUuids){this.modifiedFavorites$.next([...favorites.filter((uuid=>-1===addedUuids.indexOf(uuid))),...addedUuids])}emitRemovedFavorites(favorites,removedUuids){this.modifiedFavorites$.next(favorites.filter((uuid=>-1===removedUuids.indexOf(uuid))))}}).ctorParameters=()=>[{type:src.V5},{type:AuthService}],favorites_service_class);var effects_class;FavoritesService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[src.V5,AuthService])],FavoritesService);let SearchEffects=((effects_class=class SearchEffects{constructor(actions$,searchService,store$,authService,esService,esMapper,favoritesService,filterGeometry){this.actions$=actions$,this.searchService=searchService,this.store$=store$,this.authService=authService,this.esService=esService,this.esMapper=esMapper,this.favoritesService=favoritesService,this.filterGeometry=filterGeometry,this.clearResults$=(0,ngrx_effects.GW)((()=>this.actions$.pipe((0,ngrx_effects.l4)(SET_SORT_BY,SET_FILTERS,UPDATE_FILTERS,SET_SEARCH,SET_FAVORITES_ONLY,SET_SPATIAL_FILTER_ENABLED),(0,switchMap.w)((action=>(0,of.of)(new ClearResults(action.id),new ClearPagination(action.id),new RequestMoreResults(action.id))))))),this.scroll$=(0,ngrx_effects.GW)((()=>this.actions$.pipe((0,ngrx_effects.l4)(SCROLL),(0,map.U)((action=>new RequestMoreResults(action.id)))))),this.loadResults$=(0,ngrx_effects.GW)((()=>this.actions$.pipe((0,ngrx_effects.l4)(REQUEST_MORE_RESULTS),function switchMapWithSearchId(project){const subscriptionsBySearchId={};return source=>source.pipe((0,mergeMap.z)((action=>new Observable.y((observer=>{const{id:searchId}=action,observable=project(action);subscriptionsBySearchId[searchId]&&subscriptionsBySearchId[searchId].unsubscribe(),subscriptionsBySearchId[searchId]=observable.subscribe({next(value){observer.next(value)},complete(){observer.complete()},error(err){observer.error(err)}})})))))}((action=>this.authService.authReady().pipe((0,withLatestFrom.M)(this.store$.pipe((0,ngrx_store.Ys)(getSearchStateSearch,action.id))),(0,switchMap.w)((([,state])=>this.favoritesService.myFavoritesUuid$.pipe((0,take.q)(1),(0,map.U)((favorites=>[state,favorites]))))),(0,switchMap.w)((([state,favorites])=>state.params.useSpatialFilter&&this.filterGeometry?(0,from.D)(this.filterGeometry).pipe((0,map.U)((geom=>[state,favorites,geom])),(0,catchError.K)((()=>(0,of.of)([state,favorites,null])))):(0,of.of)([state,favorites,null]))),(0,switchMap.w)((([state,favorites,geometry])=>this.searchService.search("bucket",JSON.stringify(this.esService.getSearchRequestBody(state.config.aggregations,state.params.size,state.params.from,state.params.sortBy,state.config.source,state.params.filters,state.config.filters,state.params.favoritesOnly?favorites:null,geometry))))),(0,switchMap.w)((response=>this.esMapper.toRecords(response).pipe((0,map.U)((records=>[records,response]))))),(0,switchMap.w)((([records,response])=>{const aggregations=response.aggregations;return[new AddResults(records,action.id),new SetResultsAggregations(aggregations,action.id),new SetResultsHits(response.hits.total,action.id),new ClearError(action.id)]})),(0,catchError.K)((error=>"status"in error?(0,of.of)(new SetError(error.status,error.message,action.id)):(0,of.of)(new SetError(0,error.message,action.id)))))))))),this.loadMoreOnAggregation$=(0,ngrx_effects.GW)((()=>this.actions$.pipe((0,ngrx_effects.l4)("[Search] Request More On Aggregation"),(0,switchMap.w)((action=>(0,of.of)(new UpdateRequestAggregationTerm(action.key,{increment:action.increment},action.id))))))),this.setIncludeOnAggregation$=(0,ngrx_effects.GW)((()=>this.actions$.pipe((0,ngrx_effects.l4)("[Search] Set term include"),(0,switchMap.w)((action=>(0,of.of)(new UpdateRequestAggregationTerm(action.key,{include:action.include},action.id))))))),this.updateRequestAggregationTerm$=(0,ngrx_effects.GW)((()=>this.actions$.pipe((0,ngrx_effects.l4)(UPDATE_REQUEST_AGGREGATION_TERM)).pipe((0,switchMap.w)((action=>this.authService.authReady().pipe((0,withLatestFrom.M)(this.store$.pipe((0,ngrx_store.Ys)(getSearchStateSearch,action.id))),(0,switchMap.w)((([,state])=>this.searchService.search("bucket",JSON.stringify(this.esService.buildMoreOnAggregationPayload(state.config.aggregations,action.key,state.params.filters,state.config.filters))))),(0,map.U)((response=>{const aggregations=response.aggregations;return new PatchResultsAggregations(action.key,aggregations,action.id)}))))))))}}).ctorParameters=()=>[{type:ngrx_effects.eX},{type:src.uX},{type:ngrx_store.yh},{type:AuthService},{type:shared_src.Hk},{type:ElasticsearchMapper},{type:FavoritesService},{type:Promise,decorators:[{type:core.Optional},{type:core.Inject,args:[FILTER_GEOMETRY]}]}],effects_class);SearchEffects=(0,tslib_es6.gn)([(0,core.Injectable)(),(0,tslib_es6.w6)("design:paramtypes",[ngrx_effects.eX,src.uX,ngrx_store.yh,AuthService,shared_src.Hk,ElasticsearchMapper,FavoritesService,Promise])],SearchEffects);var results_hits_container_component_class;let ResultsHitsContainerComponent=((results_hits_container_component_class=class ResultsHitsContainerComponent{constructor(facade){this.facade=facade}}).ctorParameters=()=>[{type:SearchFacade}],results_hits_container_component_class);var search_state_container_directive_class;ResultsHitsContainerComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-results-hits",template:'<gn-ui-results-hits-number\n  [loading]="facade.isLoading$ | async"\n  [hits]="facade.resultsHits$ | async"\n></gn-ui-results-hits-number>\n'}),(0,tslib_es6.w6)("design:paramtypes",[SearchFacade])],ResultsHitsContainerComponent);let SearchStateContainerDirective=((search_state_container_directive_class=class SearchStateContainerDirective{constructor(facade){this.facade=facade}ngOnInit(){this.facade.init(this.searchId)}}).ctorParameters=()=>[{type:SearchFacade,decorators:[{type:core.Host}]}],search_state_container_directive_class.propDecorators={searchId:[{type:core.Input,args:["gnUiSearchStateContainer"]}]},search_state_container_directive_class);SearchStateContainerDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[gnUiSearchStateContainer]",providers:[SearchFacade,SearchService]}),(0,tslib_es6.w6)("design:paramtypes",[SearchFacade])],SearchStateContainerDirective);var favorite_star_component_class,favorite_star_componentngResource=__webpack_require__("./libs/feature/search/src/lib/favorites/favorite-star/favorite-star.component.css?ngResource"),favorite_star_componentngResource_default=__webpack_require__.n(favorite_star_componentngResource),pairwise=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/pairwise.js"),tippy_esm=__webpack_require__("./node_modules/tippy.js/dist/tippy.esm.js");let FavoriteStarComponent=((favorite_star_component_class=class FavoriteStarComponent{set record(value){this.record_=value,this.favoriteCount="favoriteCount"in this.record_?this.record_.favoriteCount:null}get record(){return this.record_}get hasFavoriteCount(){return null!==this.favoriteCount}constructor(favoritesService,authService,changeDetector,translateService){this.favoritesService=favoritesService,this.authService=authService,this.changeDetector=changeDetector,this.translateService=translateService,this.isFavorite$=this.favoritesService.myFavoritesUuid$.pipe((0,map.U)((favorites=>favorites.indexOf(this.record.uuid)>-1))),this.isAnonymous$=this.authService.isAnonymous$,this.loading=!1,this.loginUrl=this.authService.loginUrl,this.loginMessage=this.translateService.instant("favorite.not.authenticated.tooltip",{link:this.loginUrl})}ngAfterViewInit(){this.subscription=this.isAnonymous$.subscribe((anonymous=>{anonymous&&(0,tippy_esm.ZP)(this.starToggleRef.nativeElement,{appendTo:()=>document.body,content:this.loginMessage,allowHTML:!0,interactive:!0,zIndex:40,maxWidth:250})})),this.countSubscription=this.favoritesService.myFavoritesUuid$.pipe((0,pairwise.G)()).subscribe((([oldFavs,newFavs])=>{const editedFavs=(oldFavs.length<newFavs.length?newFavs.slice(-1):oldFavs.filter((fav=>!newFavs.includes(fav))))[0];this.hasFavoriteCount&&editedFavs===this.record.uuid&&(newFavs.includes(editedFavs)?this.favoriteCount+=1:this.favoriteCount+=-1)}))}ngOnDestroy(){this.subscription.unsubscribe(),this.countSubscription.unsubscribe()}toggleFavorite(isFavorite){this.loading=!0,(isFavorite?this.favoritesService.addToFavorites([this.record.uuid]):this.favoritesService.removeFromFavorites([this.record.uuid])).subscribe({complete:()=>{this.loading=!1,this.changeDetector.detectChanges()},error:()=>{this.loading=!1,this.changeDetector.detectChanges()}})}}).ctorParameters=()=>[{type:FavoritesService},{type:AuthService},{type:core.ChangeDetectorRef},{type:ngx_translate_core.sK}],favorite_star_component_class.propDecorators={record:[{type:core.Input}],starToggleRef:[{type:core.ViewChild,args:[inputs_src.gI,{read:core.ElementRef}]}]},favorite_star_component_class);FavoriteStarComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-favorite-star",template:'<div>\n  <span class="align-text-top mr-1.5 favorite-count" *ngIf="hasFavoriteCount">{{\n    favoriteCount\n  }}</span>\n  <gn-ui-star-toggle\n    [toggled]="isFavorite$ | async"\n    (newValue)="toggleFavorite($event)"\n    [disabled]="loading || (isAnonymous$ | async)"\n  ></gn-ui-star-toggle>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[favorite_star_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[FavoritesService,AuthService,core.ChangeDetectorRef,ngx_translate_core.sK])],FavoriteStarComponent);var icon=__webpack_require__("./node_modules/@angular/material/fesm2022/icon.mjs");var filter_dropdown_componentngResource=__webpack_require__("./libs/feature/search/src/lib/filter-dropdown/filter-dropdown.component.css?ngResource"),filter_dropdown_componentngResource_default=__webpack_require__.n(filter_dropdown_componentngResource),startWith=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/startWith.js"),asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),firstValueFrom=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/firstValueFrom.js");class SimpleSearchField{constructor(esFieldName,order="asc",injector){this.esFieldName=esFieldName,this.order=order,this.injector=injector,this.esService=this.injector.get(shared_src.Hk),this.searchApiService=this.injector.get(src.uX)}getAggregations(){return{[this.esFieldName]:{terms:{size:1e3,field:this.esFieldName,order:{_key:this.order}}}}}getBucketLabel(bucket){return(0,asyncToGenerator.Z)((function*(){return bucket.key}))()}getAvailableValues(){var _this=this;return this.searchApiService.search("bucket",JSON.stringify(this.esService.getSearchRequestBody(this.getAggregations()))).pipe((0,map.U)((response=>response.aggregations[this.esFieldName]?.buckets||[])),(0,switchMap.w)((buckets=>{const bucketPromises=buckets.map(function(){var _ref=(0,asyncToGenerator.Z)((function*(bucket){return{label:`${yield _this.getBucketLabel(bucket)} (${bucket.doc_count})`,value:bucket.key.toString()}}));return function(_x){return _ref.apply(this,arguments)}}());return Promise.all(bucketPromises)})))}getFiltersForValues(values){return(0,of.of)({[this.esFieldName]:values.reduce(((acc,val)=>({...acc,[val.toString()]:!0})),{})})}getValuesForFilter(filters){const filter=filters[this.esFieldName];if(!filter)return(0,of.of)([]);const values="string"==typeof filter?[filter]:Object.keys(filter).filter((v=>filter[v]));return(0,of.of)(values)}}class TopicSearchField extends SimpleSearchField{constructor(injector){super("cl_topic.key","asc",injector),this.toolsApiService=this.injector.get(src.EM),this.allTranslations=this.toolsApiService.getTranslationsPackage1("gnui").pipe((0,shareReplay.d)(1))}getTopicTranslation(topicKey){var _this2=this;return(0,asyncToGenerator.Z)((function*(){return(0,firstValueFrom.z)(_this2.allTranslations.pipe((0,map.U)((translations=>translations[topicKey]))))}))()}getBucketLabel(bucket){var _this3=this;return(0,asyncToGenerator.Z)((function*(){return(yield _this3.getTopicTranslation(bucket.key))||bucket.key}))()}getAvailableValues(){return super.getAvailableValues().pipe((0,map.U)((values=>values.sort(((a,b)=>(new Intl.Collator).compare(a.label,b.label))))))}}class FullTextSearchField{getAvailableValues(){return(0,of.of)([])}getFiltersForValues(values){return(0,of.of)({any:values[0]})}getValuesForFilter(filters){return(0,of.of)(filters.any?[filters.any]:[])}}(0,biesbjerg_ngx_translate_extract_marker.J)("search.filters.isSpatial.yes"),(0,biesbjerg_ngx_translate_extract_marker.J)("search.filters.isSpatial.no");class IsSpatialSearchField extends SimpleSearchField{constructor(injector){super("isSpatial","asc",injector),this.translateService=this.injector.get(ngx_translate_core.sK),this.esService.registerRuntimeField("isSpatial","String result = 'no';\nString formats = doc.format.join('|').toLowerCase();\nif (formats.contains('geojson') || formats.contains('arcgis') || formats.contains('ogc') || formats.contains('shp')) result = 'yes';\nString protocols = doc.linkProtocol.join('|').toLowerCase();\nif (protocols.contains('esri') || protocols.contains('ogc')) result = 'yes';\nemit(result);")}getAggregations(){return{isSpatial:{terms:{size:2,field:"isSpatial"}}}}getBucketLabel(bucket){var _this4=this;return(0,asyncToGenerator.Z)((function*(){return(0,firstValueFrom.z)(_this4.translateService.get(`search.filters.isSpatial.${bucket.key}`))}))()}getFiltersForValues(values){const isSpatial={};return values.length>0&&(isSpatial[values[values.length-1]]=!0),(0,of.of)({isSpatial})}getValuesForFilter(filters){const filter=filters.isSpatial;if(!filter)return(0,of.of)([]);const keys=Object.keys(filter);return(0,of.of)(keys.length?[keys[0]]:[])}}(0,biesbjerg_ngx_translate_extract_marker.J)("search.filters.license.pddl"),(0,biesbjerg_ngx_translate_extract_marker.J)("search.filters.license.odbl"),(0,biesbjerg_ngx_translate_extract_marker.J)("search.filters.license.odc-by"),(0,biesbjerg_ngx_translate_extract_marker.J)("search.filters.license.cc-by-sa"),(0,biesbjerg_ngx_translate_extract_marker.J)("search.filters.license.cc-by"),(0,biesbjerg_ngx_translate_extract_marker.J)("search.filters.license.cc-zero"),(0,biesbjerg_ngx_translate_extract_marker.J)("search.filters.license.etalab-v2"),(0,biesbjerg_ngx_translate_extract_marker.J)("search.filters.license.etalab"),(0,biesbjerg_ngx_translate_extract_marker.J)("search.filters.license.unknown");class LicenseSearchField extends SimpleSearchField{constructor(injector){super("license","asc",injector),this.translateService=this.injector.get(ngx_translate_core.sK),this.esService.registerRuntimeField("license","String raw = '';\nif (doc.containsKey('licenseObject.default.keyword') && doc['licenseObject.default.keyword'].length > 0)\n  raw += doc['licenseObject.default.keyword'].join('|').toLowerCase();\nif (doc.containsKey('MD_LegalConstraintsUseLimitationObject.default.keyword') && doc['MD_LegalConstraintsUseLimitationObject.default.keyword'].length > 0)\n  raw += doc['MD_LegalConstraintsUseLimitationObject.default.keyword'].join('|').toLowerCase();\n\nboolean unknown = true;\nif (raw.contains('pddl') || raw.contains('public domain dedication and licence')) {\n  unknown = false;\n  emit('pddl');\n}\nif (raw.contains('odbl') || raw.contains('open database license')) {\n  unknown = false;\n  emit('odbl');\n}\nif (raw.contains('odc-by') || raw.contains('opendatacommons.org/licenses/by/summary/\"')) {\n  unknown = false;\n  emit('odc-by');\n}\n\nif (raw.contains('cc-by-sa') || raw.contains('creative commons attribution share-alike')) {\n  unknown = false;\n  emit('cc-by-sa');\n} else if (raw.contains('cc-by') || raw.contains('cc by') || raw.contains('creative commons attribution')) {\n  unknown = false;\n  emit('cc-by');\n} else if (raw.contains('cc0') || raw.contains('cc-0') || raw.contains('cczero') || raw.contains('cc-zero')) {\n  unknown = false;\n  emit('cc-zero');\n}\n\nif (raw.contains('etalab') && (raw.contains('v2') || raw.contains('2.0'))) {\n  unknown = false;\n  emit('etalab-v2');\n} else if (raw.contains('open licence') || raw.contains('licence ouverte') || raw.contains('licence_ouverte')) {\n  unknown = false;\n  emit('etalab');\n}\n\nif(unknown) emit('unknown');")}getAggregations(){return{license:{terms:{size:10,field:"license",order:{_count:"desc"}}}}}getBucketLabel(bucket){var _this5=this;return(0,asyncToGenerator.Z)((function*(){return(0,firstValueFrom.z)(_this5.translateService.get(`search.filters.license.${bucket.key}`))}))()}}class OrganizationSearchField{constructor(injector){this.injector=injector,this.orgsService=this.injector.get(catalog_src.eF)}getFiltersForValues(values){return this.orgsService.organisations$.pipe((0,map.U)((orgs=>values.map((name=>orgs.find((org=>org.name===name)))).filter((org=>void 0!==org)))),(0,switchMap.w)((selectedOrgs=>this.orgsService.getFiltersForOrgs(selectedOrgs))))}getValuesForFilter(filters){return this.orgsService.getOrgsFromFilters(filters).pipe((0,map.U)((orgs=>orgs.map((org=>org.name)))))}getAvailableValues(){return this.orgsService.organisations$.pipe((0,map.U)((organisations=>organisations.map((org=>({label:`${org.name} (${org.recordCount})`,value:org.name}))))),(0,map.U)((values=>values.sort(((a,b)=>(new Intl.Collator).compare(a.label,b.label))))))}}var fields_service_class,forkJoin=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js");let FieldsService=((fields_service_class=class FieldsService{get supportedFields(){return Object.keys(this.fields)}constructor(injector){this.injector=injector,this.fields={publisher:new OrganizationSearchField(this.injector),format:new SimpleSearchField("format","asc",this.injector),publicationYear:new SimpleSearchField("publicationYearForResource","desc",this.injector),topic:new TopicSearchField(this.injector),inspireKeyword:new SimpleSearchField("th_httpinspireeceuropaeutheme-theme_tree.default","asc",this.injector),documentStandard:new SimpleSearchField("documentStandard","asc",this.injector),isSpatial:new IsSpatialSearchField(this.injector),q:new FullTextSearchField,license:new LicenseSearchField(this.injector)}}getAvailableValues(fieldName){if(-1===this.supportedFields.indexOf(fieldName))throw new Error(`Unsupported search field: ${fieldName}`);return this.fields[fieldName].getAvailableValues()}getFiltersForValues(fieldName,values){return this.fields[fieldName].getFiltersForValues(values)}getValuesForFilters(fieldName,filters){return this.fields[fieldName].getValuesForFilter(filters)}buildFiltersFromFieldValues(fieldValues){const fieldNames=Object.keys(fieldValues).filter((fieldName=>this.supportedFields.includes(fieldName)));if(!fieldNames.length)return(0,of.of)({});const filtersByField$=fieldNames.map((fieldName=>{const values=Array.isArray(fieldValues[fieldName])?fieldValues[fieldName]:[fieldValues[fieldName]];return this.getFiltersForValues(fieldName,values)}));return(0,forkJoin.D)(filtersByField$).pipe((0,map.U)((filters=>filters.reduce(((prev,curr)=>({...prev,...curr})),{}))))}readFieldValuesFromFilters(filters){const fieldValues$=this.supportedFields.map((fieldName=>this.getValuesForFilters(fieldName,filters).pipe((0,map.U)((values=>({[fieldName]:values}))))));return(0,forkJoin.D)(fieldValues$).pipe((0,map.U)((fieldValues=>fieldValues.reduce(((prev,curr)=>({...prev,...curr})),{}))))}}).ctorParameters=()=>[{type:core.Injector}],fields_service_class);var filter_dropdown_component_class;FieldsService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"}),(0,tslib_es6.w6)("design:paramtypes",[core.Injector])],FieldsService);let FilterDropdownComponent=((filter_dropdown_component_class=class FilterDropdownComponent{onSelectedValues(values){this.fieldsService.buildFiltersFromFieldValues({[this.fieldName]:values}).subscribe((filters=>this.searchService.updateFilters(filters)))}constructor(searchFacade,searchService,fieldsService){this.searchFacade=searchFacade,this.searchService=searchService,this.fieldsService=fieldsService,this.selected$=this.searchFacade.searchFilters$.pipe((0,switchMap.w)((filters=>this.fieldsService.readFieldValuesFromFilters(filters))),(0,map.U)((fieldValues=>fieldValues[this.fieldName])),(0,filter.h)((selected=>!!selected)),(0,startWith.O)([]),(0,catchError.K)((()=>(0,of.of)([]))))}ngOnInit(){this.choices$=this.fieldsService.getAvailableValues(this.fieldName).pipe((0,startWith.O)([]),(0,map.U)((values=>values.map((v=>({...v,value:v.value.toString()}))))),(0,catchError.K)((()=>(0,of.of)([]))))}}).ctorParameters=()=>[{type:SearchFacade},{type:SearchService},{type:FieldsService}],filter_dropdown_component_class.propDecorators={fieldName:[{type:core.Input}],title:[{type:core.Input}]},filter_dropdown_component_class);FilterDropdownComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-filter-dropdown",template:'<gn-ui-dropdown-multiselect\n  class="w-full"\n  [title]="title"\n  [maxRows]="6"\n  [choices]="choices$ | async"\n  [selected]="selected$ | async"\n  [allowSearch]="true"\n  (selectValues)="onSelectedValues($event)"\n>\n</gn-ui-dropdown-multiselect>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[filter_dropdown_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[SearchFacade,SearchService,FieldsService])],FilterDropdownComponent);var widgets_src=__webpack_require__("./libs/ui/widgets/src/index.ts");const FILTER_GEOMETRY=new core.InjectionToken("filter-geometry"),RECORD_URL_TOKEN=new core.InjectionToken("record-url-token");let FeatureSearchModule=class FeatureSearchModule{};FeatureSearchModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[SortByComponent,ResultsLayoutComponent,FuzzySearchComponent,RecordsMetricsComponent,ResultsListContainerComponent,ResultsHitsContainerComponent,SearchStateContainerDirective,FavoriteStarComponent,FilterDropdownComponent],imports:[common.CommonModule,ngx_translate_core.aw.forChild(),ngrx_store.Aw.forFeature("searchState",(function reducer(state=initialState,action){const{id}=action;if(id){let stateSearch=state[id]||initSearch();if("[Search] Add search instance"!==action.type&&(stateSearch=function reducerSearch(state,action){switch(action.type){case SET_CONFIG_FILTERS:return{...state,config:{...state.config,filters:{...action.payload}}};case SET_FILTERS:return{...state,params:{...state.params,filters:{...action.payload}}};case UPDATE_FILTERS:return{...state,params:{...state.params,filters:{...state.params.filters,...action.payload}}};case SET_SEARCH:return{...state,params:{...action.payload}};case SET_SORT_BY:return{...state,params:{...state.params,sortBy:action.sortBy}};case SET_FAVORITES_ONLY:return{...state,params:{...state.params,favoritesOnly:action.favoritesOnly}};case SET_PAGINATION:{const{from,size}=action;return{...state,params:{...state.params,from,size}}}case CLEAR_PAGINATION:return{...state,params:{...state.params,from:0}};case SCROLL:case PAGINATE:{const delta=action.delta||state.params.size,from=Math.max(0,state.params.from+delta);return{...state,params:{...state.params,from}}}case SET_RESULTS_LAYOUT:return{...state,resultsLayout:action.resultsLayout};case ADD_RESULTS:return{...state,results:{...state.results,records:[...state.results.records,...action.payload]},loadingMore:!1};case CLEAR_RESULTS:return{...state,results:{...state.results,records:[]}};case REQUEST_MORE_RESULTS:return{...state,loadingMore:!0};case SET_RESULTS_HITS:return{...state,results:{...state.results,hits:action.payload}};case SET_RESULTS_AGGREGATIONS:return{...state,results:{...state.results,aggregations:action.payload}};case SET_CONFIG_AGGREGATIONS:return{...state,config:{...state.config,aggregations:action.payload}};case UPDATE_CONFIG_AGGREGATIONS:return{...state,config:{...state.config,aggregations:{...state.config.aggregations,...action.payload}}};case SET_CONFIG_REQUEST_FIELDS:return{...state,config:{...state.config,source:action.payload}};case UPDATE_REQUEST_AGGREGATION_TERM:{const config=state.config,aggregations=config.aggregations,terms=aggregations[action.key].terms,{increment,...patch}=action.patch;return increment&&(patch.size=(terms.size||0)+increment),{...state,config:{...config,aggregations:{...aggregations,[action.key]:{terms:{...terms,...patch}}}}}}case PATCH_RESULTS_AGGREGATIONS:{const clone=JSON.parse(JSON.stringify(state.results.aggregations));return clone[action.key].buckets=action.payload[action.key].buckets,{...state,results:{...state.results,aggregations:clone}}}case SET_ERROR:{const{code,message}=action;return{...state,error:{code,message},loadingMore:!1}}case CLEAR_ERROR:return{...state,error:null};case SET_SPATIAL_FILTER_ENABLED:return{...state,params:{...state.params,useSpatialFilter:action.enabled}}}return state}(stateSearch,action)),stateSearch)return{...state,[id]:stateSearch}}return state}),{initialState}),ngrx_effects.sQ.forFeature([SearchEffects]),http.JF,http.PD,search_src.mR,inputs_src.uU,elements_src.Zx,src.au,FacetsModule,icon.Ps,widgets_src.g],exports:[SortByComponent,ResultsLayoutComponent,FuzzySearchComponent,RecordsMetricsComponent,ResultsListContainerComponent,ResultsHitsContainerComponent,FacetsModule,SearchStateContainerDirective,FavoriteStarComponent,FilterDropdownComponent]})],FeatureSearchModule)},"./libs/ui/catalog/src/lib/catalog-title/catalog-title.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{N:()=>CatalogTitleComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,catalog_title_componentngResource=__webpack_require__("./libs/ui/catalog/src/lib/catalog-title/catalog-title.component.css?ngResource"),catalog_title_componentngResource_default=__webpack_require__.n(catalog_title_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");let CatalogTitleComponent=((_class=class CatalogTitleComponent{}).propDecorators={name:[{type:core.Input}],tooltip:[{type:core.Input}],description:[{type:core.Input}]},_class);CatalogTitleComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-catalog-title",template:'<div class="lg:flex lg:items-center lg:justify-between">\n  <div class="flex-1 min-w-0">\n    <h2\n      *ngIf="name"\n      [title]="tooltip"\n      class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:leading-9 sm:truncate"\n    >\n      {{ name }}\n    </h2>\n    <div\n      *ngIf="description"\n      class="mt-1 flex flex-col sm:mt-0 sm:flex-row sm:flex-wrap"\n    >\n      <div\n        class="mt-2 flex items-center text-sm leading-5 text-gray-500 sm:mr-6"\n      >\n        {{ description }}\n      </div>\n    </div>\n  </div>\n</div>\n',styles:[catalog_title_componentngResource_default()]})],CatalogTitleComponent)},"./libs/ui/catalog/src/lib/organisation-preview/organisation-preview.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{F:()=>OrganisationPreviewComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,organisation_preview_componentngResource=__webpack_require__("./libs/ui/catalog/src/lib/organisation-preview/organisation-preview.component.css?ngResource"),organisation_preview_componentngResource_default=__webpack_require__.n(organisation_preview_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");let OrganisationPreviewComponent=((_class=class OrganisationPreviewComponent{constructor(){this.clickedOrganisation=new core.EventEmitter}clickOrganisation(event){event.preventDefault(),this.clickedOrganisation.emit(this.organisation)}}).propDecorators={organisation:[{type:core.Input}],organisationUrl:[{type:core.Input}],clickedOrganisation:[{type:core.Output}]},_class);OrganisationPreviewComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-organisation-preview",template:'<a href (click)="clickOrganisation($event)" [attr.href]="organisationUrl">\n  <div\n    class="group cursor-pointer rounded-lg h-full flex flex-col"\n    [title]="organisation.name"\n  >\n    <div\n      class="flex-shrink-0 bg-gray-100 rounded-lg overflow-hidden w-full border border-gray-300 h-36 group-hover:shadow-xl group-hover:border-0"\n    >\n      <gn-ui-thumbnail\n        class="relative h-full w-full"\n        [thumbnailUrl]="organisation.logoUrl"\n        [fit]="\'contain\'"\n      >\n      </gn-ui-thumbnail>\n    </div>\n    <div\n      class="px-3 pb-2 capitalize flex flex-col flex-grow overflow-hidden"\n      data-cy="providerDesc"\n    >\n      <span\n        class="flex-shrink-0 mb-3 mt-5 font-title text-21 text-title group-hover:text-primary line-clamp-2 sm:mt-2"\n        data-cy="orgaName"\n      >\n        {{ organisation.name }}</span\n      >\n      <p\n        class="abstract mt-4 mb-5 sm:mb-2 sm:mt-0 flex-grow flex-shrink-1 overflow-hidden"\n      >\n        {{ organisation.description }}\n      </p>\n      <div class="flex-shrink-0 text-primary opacity-50 flex leading-6">\n        <mat-icon class="text-primary opacity-50 mr-1">folder_open </mat-icon>\n        <span class="mx-1">{{ organisation.recordCount }}</span>\n        <span translate>record.metadata.publications</span>\n      </div>\n    </div>\n  </div>\n</a>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[organisation_preview_componentngResource_default()]})],OrganisationPreviewComponent)},"./libs/ui/catalog/src/lib/organisations-sort/organisations-sort.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>OrganisationsSortComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,organisations_sort_componentngResource=__webpack_require__("./libs/ui/catalog/src/lib/organisations-sort/organisations-sort.component.css?ngResource"),organisations_sort_componentngResource_default=__webpack_require__.n(organisations_sort_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),biesbjerg_ngx_translate_extract_marker=__webpack_require__("./node_modules/@biesbjerg/ngx-translate-extract-marker/fesm5/biesbjerg-ngx-translate-extract-marker.js");(0,biesbjerg_ngx_translate_extract_marker.J)("organisations.sortBy.nameAsc"),(0,biesbjerg_ngx_translate_extract_marker.J)("organisations.sortBy.nameDesc"),(0,biesbjerg_ngx_translate_extract_marker.J)("organisations.sortBy.recordCountAsc"),(0,biesbjerg_ngx_translate_extract_marker.J)("organisations.sortBy.recordCountDesc");let OrganisationsSortComponent=((_class=class OrganisationsSortComponent{constructor(){this.choices=[{value:"name-asc",label:"organisations.sortBy.nameAsc"},{value:"name-desc",label:"organisations.sortBy.nameDesc"},{value:"recordCount-asc",label:"organisations.sortBy.recordCountAsc"},{value:"recordCount-desc",label:"organisations.sortBy.recordCountDesc"}],this.sortBy=new core.EventEmitter}selectOrderToDisplay(selectValue){this.sortBy.emit(selectValue)}}).propDecorators={sortBy:[{type:core.Output}]},_class);OrganisationsSortComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-organisations-sort",template:'<div\n  class="flex flex-wrap sm:flex-nowrap bg-primary text-white px-6 py-7 mt-4 mb-8 rounded-lg"\n>\n  <span class="grow mb-4 mr-4 sm:mb-0 sm:mr-16">\n    <p translate>organisation.sort.intro</p>\n  </span>\n  <span class="flex flex-wrap sm:flex-nowrap sm:shrink-0">\n    <span class="mt-2 mr-2 opacity-75" translate>\n      organisation.sort.sortBy\n    </span>\n    <gn-ui-dropdown-selector\n      [title]="\'\'"\n      class="shrink"\n      [choices]="choices"\n      [showTitle]="false"\n      (selectValue)="selectOrderToDisplay($event)"\n    ></gn-ui-dropdown-selector>\n  </span>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[organisations_sort_componentngResource_default()]})],OrganisationsSortComponent)},"./libs/ui/search/src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{cE:()=>results_layout_config.cE,V:()=>FacetsModule,z6:()=>results_layout_config.z6,W9:()=>record_preview_component.W,Ne:()=>results_layout_config.Ne,mR:()=>UiSearchModule});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),ngx_translate_core=__webpack_require__("./node_modules/@ngx-translate/core/fesm2020/ngx-translate-core.mjs"),facet_block_component=__webpack_require__("./libs/ui/search/src/lib/facets/facet-block/facet-block.component.ts"),facet_item_component=__webpack_require__("./libs/ui/search/src/lib/facets/facet-item/facet-item.component.ts"),facet_list_component=__webpack_require__("./libs/ui/search/src/lib/facets/facet-list/facet-list.component.ts");let FacetsModule=class FacetsModule{};FacetsModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[facet_item_component.Q,facet_block_component.V,facet_list_component.h],imports:[common.CommonModule,fesm2022_forms.u5,ngx_translate_core.aw.forChild()],exports:[facet_list_component.h]})],FacetsModule);__webpack_require__("./libs/ui/search/src/lib/facets/fixtures/index.ts");var icon=__webpack_require__("./node_modules/@angular/material/fesm2022/icon.mjs"),platform_browser=__webpack_require__("./node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs"),router=__webpack_require__("./node_modules/@angular/router/fesm2022/router.mjs"),src=__webpack_require__("./libs/util/shared/src/index.ts"),ngx_dropzone=__webpack_require__("./node_modules/ngx-dropzone/fesm2020/ngx-dropzone.mjs"),record_metric_component=__webpack_require__("./libs/ui/search/src/lib/record-metric/record-metric.component.ts"),record_preview_card_component=__webpack_require__("./libs/ui/search/src/lib/record-preview-card/record-preview-card.component.ts"),record_preview_list_component=__webpack_require__("./libs/ui/search/src/lib/record-preview-list/record-preview-list.component.ts"),record_preview_row_component=__webpack_require__("./libs/ui/search/src/lib/record-preview-row/record-preview-row.component.ts"),record_preview_text_component=__webpack_require__("./libs/ui/search/src/lib/record-preview-text/record-preview-text.component.ts"),record_preview_title_component=__webpack_require__("./libs/ui/search/src/lib/record-preview-title/record-preview-title.component.ts"),results_hits_number_component=__webpack_require__("./libs/ui/search/src/lib/results-hits-number/results-hits-number.component.ts"),results_layout_config=__webpack_require__("./libs/ui/search/src/lib/results-list/results-layout.config.ts"),results_list_component=__webpack_require__("./libs/ui/search/src/lib/results-list/results-list.component.ts"),record_preview_component=__webpack_require__("./libs/ui/search/src/lib/record-preview/record-preview.component.ts"),ngx_chips=__webpack_require__("./node_modules/ngx-chips/fesm2020/ngx-chips.mjs"),animations=__webpack_require__("./node_modules/@angular/platform-browser/fesm2022/animations.mjs"),results_list_item_component=__webpack_require__("./libs/ui/search/src/lib/results-list-item/results-list-item.component.ts"),widgets_src=__webpack_require__("./libs/ui/widgets/src/index.ts"),elements_src=__webpack_require__("./libs/ui/elements/src/index.ts"),record_preview_feed_component=__webpack_require__("./libs/ui/search/src/lib/record-preview-feed/record-preview-feed.component.ts");var _class,record_table_componentngResource=__webpack_require__("./libs/ui/search/src/lib/record-table/record-table.component.css?ngResource"),record_table_componentngResource_default=__webpack_require__.n(record_table_componentngResource),lib_fixtures=__webpack_require__("./libs/util/shared/src/lib/fixtures/index.ts");let RecordTableComponent=((_class=class RecordTableComponent{constructor(){this.records=lib_fixtures.wI,this.recordSelect=new core.EventEmitter}dateToString(date){return date?.toLocaleDateString(void 0,{year:"numeric",month:"long",day:"numeric",timeZone:"UTC"})}getStatus(isPublishedToAll){return!0===isPublishedToAll?"published":"not published"}formatUserInfo(userInfo){const infos=userInfo?.split("|");if(infos&&4===infos.length)return`${infos[2]} ${infos[1]}`}}).propDecorators={records:[{type:core.Input}],recordSelect:[{type:core.Output}]},_class);RecordTableComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-record-table",template:'<div class="grid grid-cols-[repeat(5,minmax(0,max-content))] gap-x-4 gap-y-1">\n  <div class="contents text-sm">\n    <div translate="" class="record-table-header">record.metadata.title</div>\n    <div translate="" class="record-table-header">record.metadata.status</div>\n    <div translate="" class="record-table-header">\n      record.metadata.administrator\n    </div>\n    <div translate="" class="record-table-header">\n      record.metadata.updatedOn\n    </div>\n    <div translate="" class="record-table-header">\n      record.metadata.createdOn\n    </div>\n  </div>\n  <div\n    class="contents hover:text-gray-800 cursor-pointer"\n    (click)="recordSelect.emit(record)"\n    *ngFor="let record of records"\n  >\n    <div class="record-table-col">\n      {{ record.title }}\n    </div>\n    <div class="record-table-col">\n      <span class="badge-btn btn-active text-sm">{{\n        getStatus(record.isPublishedToAll)\n      }}</span>\n    </div>\n    <div class="record-table-col flex items-center gap-2">\n      <mat-icon class="material-icons-outlined"> person </mat-icon>\n      <span class="text-gray-800">{{ formatUserInfo(record.ownerInfo) }}</span>\n    </div>\n    <div class="record-table-col">{{ dateToString(record.updatedOn) }}</div>\n    <div class="record-table-col">{{ dateToString(record.createdOn) }}</div>\n  </div>\n</div>\n',styles:[record_table_componentngResource_default()]})],RecordTableComponent);let UiSearchModule=class UiSearchModule{};UiSearchModule=(0,tslib_es6.gn)([(0,core.NgModule)({declarations:[record_preview_component.W,record_preview_list_component.J,record_preview_card_component.D,record_preview_text_component.j,record_preview_title_component._,record_metric_component.s,results_list_component.I,results_hits_number_component.w,results_list_item_component.Z,record_preview_feed_component.B,record_preview_row_component.E,RecordTableComponent],imports:[platform_browser.BrowserModule,ngx_translate_core.aw.forChild(),ngx_dropzone.bB,FacetsModule,animations.BrowserAnimationsModule,fesm2022_forms.u5,fesm2022_forms.UX,ngx_chips.vO,src.Lt,widgets_src.g,elements_src.Zx,icon.Ps,router.rH],exports:[record_preview_list_component.J,record_preview_card_component.D,record_preview_text_component.j,record_preview_title_component._,record_metric_component.s,results_list_component.I,FacetsModule,record_preview_component.W,results_hits_number_component.w,record_preview_feed_component.B,record_preview_row_component.E,RecordTableComponent],providers:[{provide:results_layout_config.z6,useValue:results_layout_config.cE}]})],UiSearchModule)},"./libs/ui/search/src/lib/facets/facet-block/facet-block.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{V:()=>FacetBlockComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,_class2,facet_block_componentngResource=__webpack_require__("./libs/ui/search/src/lib/facets/facet-block/facet-block.component.css?ngResource"),facet_block_componentngResource_default=__webpack_require__.n(facet_block_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),src=__webpack_require__("./libs/util/shared/src/index.ts"),Subscription=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subscription.js"),fromEvent=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js"),debounceTime=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js");let FacetBlockComponent=((_class=class FacetBlockComponent{constructor(){this.filterChange=new core.EventEmitter,this.itemChange=new core.EventEmitter,this.more=new core.EventEmitter,this.subscription=new Subscription.w0}ngOnInit(){this.hasItems=this.countItems()>0,this.title=this.model.key}ngAfterViewInit(){this.eltFilterInputRef&&this.subscription.add((0,fromEvent.R)(this.eltFilterInputRef.nativeElement,"keyup").pipe((0,debounceTime.b)(300)).subscribe((event=>this.onFilterChange(event.path[0].value))))}get canFilter(){return this.model.includeFilter}countItems(){return this.model.type===src.Tn.FILTERS?this.model.items.reduce(((sum,current)=>sum+current.count),0):this.model.items.length}toggleCollapsed(){this.collapsed=!this.collapsed}onFilterChange(value){this.filterChange.emit(value)}isItemSelected(item){return this.selectedPaths.map((path=>JSON.stringify(path))).includes(JSON.stringify(item.path))}emitItemChange(item){const eventOutput={item,block:this.model};this.itemChange.emit(eventOutput)}onItemSelectedChange(selected,item){item.selected=selected,this.emitItemChange(item)}onItemInvertedChange(inverted,item){item.inverted=inverted,this.emitItemChange(item)}onMoreClick(event){event.preventDefault(),this.more.emit()}getItems(){return this.model.items}canShowMore(){return this.model.more}ngOnDestroy(){this.subscription.unsubscribe()}ngOnChanges(changes){changes.model&&(this.hasItems=this.countItems()>0)}}).propDecorators={collapsed:[{type:core.Input}],filter:[{type:core.Input}],model:[{type:core.Input}],selectedPaths:[{type:core.Input}],eltFilterInputRef:[{type:core.ViewChild,args:["filterInput"]}],filterChange:[{type:core.Output}],itemChange:[{type:core.Output}],more:[{type:core.Output}]},_class);FacetBlockComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-facet-block",template:'<div\n  class="flex flex-row items-center group"\n  *ngIf="hasItems"\n  (click)="toggleCollapsed()"\n>\n  <span\n    class="flex-initial truncate font-bold cursor-pointer group-hover:text-black span-title"\n    >{{ \'facets.block.title.\' + title | translate }}</span\n  >\n  <div\n    *ngIf="!collapsed"\n    class="shrink-0 cursor-pointer group-hover:text-black icon-collapse"\n    style="min-width: 20px"\n  >\n    \x3c!-- chevron-down svg --\x3e\n    <svg\n      class="h-5 w-5"\n      xmlns="http://www.w3.org/2000/svg"\n      viewBox="0 0 20 20"\n      fill="currentColor"\n    >\n      <path\n        fill-rule="evenodd"\n        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"\n        clip-rule="evenodd"\n      />\n    </svg>\n  </div>\n  <div\n    *ngIf="collapsed"\n    class="shrink-0 cursor-pointer group-hover:text-black icon-expand"\n    style="min-width: 20px"\n  >\n    \x3c!-- chevron-right svg --\x3e\n    <svg\n      class="h-5 w-5"\n      xmlns="http://www.w3.org/2000/svg"\n      viewBox="0 0 20 20"\n      fill="currentColor"\n    >\n      <path\n        fill-rule="evenodd"\n        d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"\n        clip-rule="evenodd"\n      />\n    </svg>\n  </div>\n</div>\n<div [hidden]="collapsed || !hasItems" class="ml-4 collapsible-content">\n  <div *ngIf="canFilter" class="relative mt-2">\n    <input\n      type="text"\n      class="w-full rounded border border-1 border-gray-300 input-filter py-1 px-2 pl-8 focus:outline-none focus:border-blue-400"\n      #filterInput\n    />\n    <div\n      class="pointer-events-none absolute flex items-center px-2"\n      style="left: 0px; top: 0px"\n    >\n      <svg\n        class="h-4 w-4 my-2"\n        xmlns="http://www.w3.org/2000/svg"\n        fill="none"\n        viewBox="0 0 24 24"\n        stroke="currentColor"\n      >\n        <path\n          stroke-linecap="round"\n          stroke-linejoin="round"\n          stroke-width="2"\n          d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"\n        />\n      </svg>\n    </div>\n  </div>\n  <gn-ui-facet-item\n    class="mt-2"\n    *ngFor="let item of getItems()"\n    [label]="item.value"\n    [count]="item.count"\n    [selected]="isItemSelected(item)"\n    (selectedChange)="onItemSelectedChange($event, item)"\n    (invertedChange)="onItemInvertedChange($event, item)"\n  ></gn-ui-facet-item>\n  <a href *ngIf="canShowMore()" class="a-more" (click)="onMoreClick($event)"\n    >more</a\n  >\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[facet_block_componentngResource_default()]})],FacetBlockComponent);let FacetBlockStubComponent=((_class2=class FacetBlockStubComponent{constructor(){this.filterChange=new core.EventEmitter,this.itemSelected=new core.EventEmitter,this.itemUnselected=new core.EventEmitter}}).propDecorators={title:[{type:core.Input}],model:[{type:core.Input}],selectedPaths:[{type:core.Input}],filterChange:[{type:core.Output}],itemSelected:[{type:core.Output}],itemUnselected:[{type:core.Output}]},_class2);FacetBlockStubComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-facet-block",template:""})],FacetBlockStubComponent)},"./libs/ui/search/src/lib/facets/facet-item/facet-item.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Q:()=>FacetItemComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,_class2,facet_item_componentngResource=__webpack_require__("./libs/ui/search/src/lib/facets/facet-item/facet-item.component.css?ngResource"),facet_item_componentngResource_default=__webpack_require__.n(facet_item_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");let FacetItemComponent=((_class=class FacetItemComponent{constructor(){this.selectedChange=new core.EventEmitter,this.invertedChange=new core.EventEmitter}onSelectedChange(value){this.selectedChange.emit(value)}onInvertedChange(value){this.invertedChange.emit(value)}toggleInverted(){this.inverted=!this.inverted,this.onInvertedChange(this.inverted)}}).propDecorators={label:[{type:core.Input}],count:[{type:core.Input}],selected:[{type:core.Input}],inverted:[{type:core.Input}],selectedChange:[{type:core.Output}],invertedChange:[{type:core.Output}]},_class);FacetItemComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-facet-item",template:'<div\n  class="flex flex-row items-center group px-1 my-1 hover:bg-gray-100 rounded-sm"\n>\n  <label class="grow shrink truncate cursor-pointer group-hover:text-black">\n    <input\n      type="checkbox"\n      class="cursor-pointer"\n      [ngModel]="selected"\n      (ngModelChange)="onSelectedChange($event)"\n    />\n    {{ label | translate }}\n    <span class="group-hover:text-black">({{ count }})</span>\n  </label>\n  <div\n    *ngIf="!inverted"\n    class="shrink-0 cursor-pointer invisible group-hover:visible icon-exclude"\n    style="min-width: 20px"\n    (click)="toggleInverted()"\n  >\n    \x3c!-- minus svg --\x3e\n    <svg\n      xmlns="http://www.w3.org/2000/svg"\n      viewBox="0 0 20 20"\n      fill="currentColor"\n    >\n      <path\n        fill-rule="evenodd"\n        d="M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"\n        clip-rule="evenodd"\n      />\n    </svg>\n  </div>\n  <div\n    *ngIf="inverted"\n    class="shrink-0 cursor-pointer invisible group-hover:visible icon-include"\n    style="min-width: 20px"\n    (click)="toggleInverted()"\n  >\n    \x3c!-- check svg --\x3e\n    <svg\n      xmlns="http://www.w3.org/2000/svg"\n      viewBox="0 0 20 20"\n      fill="currentColor"\n    >\n      <path\n        fill-rule="evenodd"\n        d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"\n        clip-rule="evenodd"\n      />\n    </svg>\n  </div>\n</div>\n',styles:[facet_item_componentngResource_default()]})],FacetItemComponent);let FacetItemStubComponent=((_class2=class FacetItemStubComponent{constructor(){this.selectedChange=new core.EventEmitter,this.invertedChange=new core.EventEmitter}}).propDecorators={label:[{type:core.Input}],count:[{type:core.Input}],selected:[{type:core.Input}],inverted:[{type:core.Input}],selectedChange:[{type:core.Output}],invertedChange:[{type:core.Output}]},_class2);FacetItemStubComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-facet-item",template:""})],FacetItemStubComponent)},"./libs/ui/search/src/lib/facets/facet-list/facet-list.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{h:()=>FacetListComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,facet_list_componentngResource=__webpack_require__("./libs/ui/search/src/lib/facets/facet-list/facet-list.component.css?ngResource"),facet_list_componentngResource_default=__webpack_require__.n(facet_list_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");let FacetListComponent=((_class=class FacetListComponent{constructor(){this.itemChange=new core.EventEmitter,this.more=new core.EventEmitter,this.filterChange=new core.EventEmitter}getBlockSelectedPaths(model){return this.selectedPaths.filter((path=>{const sPath=JSON.stringify(path),sModelPath=JSON.stringify(model.path),startModelPath=sModelPath.substring(0,sModelPath.length-1);return sPath.startsWith(startModelPath)}))}trackByIndexKey(index,model){return model.key}onItemChange(facetEvent){this.itemChange.emit(facetEvent)}onMore(key){this.more.emit(key)}onFilterChange(field,include){this.filterChange.emit({field,include})}}).propDecorators={models:[{type:core.Input}],selectedPaths:[{type:core.Input}],itemChange:[{type:core.Output}],more:[{type:core.Output}],filterChange:[{type:core.Output}]},_class);FacetListComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-facet-list",template:'<gn-ui-facet-block\n  *ngFor="let model of models; trackBy: trackByIndexKey"\n  [model]="model"\n  [selectedPaths]="getBlockSelectedPaths(model)"\n  (itemChange)="onItemChange($event)"\n  (filterChange)="onFilterChange(model.key, $event)"\n  (more)="onMore(model.key)"\n></gn-ui-facet-block>\n',styles:[facet_list_componentngResource_default()]})],FacetListComponent)},"./libs/ui/search/src/lib/facets/fixtures/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{ZG:()=>BLOCK_MODEL_FIXTURE});var src=__webpack_require__("./libs/util/shared/src/index.ts");const BLOCK_MODEL_FIXTURE={key:"tag",items:[{value:"Hungary",count:20,path:["tag","Hungary"]},{value:"Austria",count:17,path:["tag","Austria"]},{value:"Belgium",count:17,path:["tag","Belgium"]},{value:"Bulgaria",count:17,path:["tag","Bulgaria"]},{value:"Croatia",count:17,path:["tag","Croatia"]},{value:"Cyprus",count:17,path:["tag","Cyprus"]},{value:"Czechia",count:17,path:["tag","Czechia"]},{value:"Denmark",count:17,path:["tag","Denmark"]},{value:"Estonia",count:17,path:["tag","Estonia"]},{value:"Finland",count:17,path:["tag","Finland"]},{value:"France",count:17,path:["tag","France"]},{value:"Germany",count:17,path:["tag","Germany"]},{value:"Italy",count:17,path:["tag","Italy"]},{value:"Latvia",count:17,path:["tag","Latvia"]},{value:"Luxembourg",count:17,path:["tag","Luxembourg"]},{value:"Malta",count:17,path:["tag","Malta"]},{value:"Netherlands",count:17,path:["tag","Netherlands"]},{value:"Poland",count:17,path:["tag","Poland"]},{value:"Portugal",count:17,path:["tag","Portugal"]},{value:"Romania",count:17,path:["tag","Romania"]},{value:"Slovakia",count:17,path:["tag","Slovakia"]}],path:["tag"],type:src.Tn.TERMS,size:21,more:!0,includeFilter:!0,excludeFilter:!1};src.Tn.TERMS},"./libs/ui/search/src/lib/record-metric/record-metric.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{s:()=>RecordMetricComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,record_metric_componentngResource=__webpack_require__("./libs/ui/search/src/lib/record-metric/record-metric.component.css?ngResource"),record_metric_componentngResource_default=__webpack_require__.n(record_metric_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),src=__webpack_require__("./libs/util/shared/src/index.ts");let RecordMetricComponent=((_class=class RecordMetricComponent{constructor(){this.icon="◔"}ngOnInit(){this.color=src.fY.generateLabelColor(this.label,.6,.5)}}).propDecorators={count:[{type:core.Input}],label:[{type:core.Input}],icon:[{type:core.Input}]},_class);RecordMetricComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-record-metric",template:'<div\n  class="p-2 rounded flex flex-row items-center relative cursor-pointer hover:bg-background hover:border-gray-200 border border-gray-100 hover:shadow-sm"\n>\n  <div\n    class="h-8 w-8 rounded-full bg-opacity-50 bg-gray-900 shrink-0 text-white text-lg text-center"\n    style="background-color: {{ color }};"\n  >\n    {{ icon }}\n  </div>\n  <span\n    class="px-3 truncate text-sm text-main label grow shrink"\n    [title]="label"\n    >{{ label }}</span\n  >\n  <div\n    class="text-gray-600 text-sm border-gray-300 border-l px-3 shrink-0"\n    style="min-width: 7rem"\n  >\n    <strong class="count text-gray-600">{{ count }}</strong\n    >&nbsp;<span translate>records</span>.\n  </div>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[record_metric_componentngResource_default()]})],RecordMetricComponent)},"./libs/ui/search/src/lib/record-preview-card/record-preview-card.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{D:()=>RecordPreviewCardComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var record_preview_card_componentngResource=__webpack_require__("./libs/ui/search/src/lib/record-preview-card/record-preview-card.component.scss?ngResource"),record_preview_card_componentngResource_default=__webpack_require__.n(record_preview_card_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),record_preview_component=__webpack_require__("./libs/ui/search/src/lib/record-preview/record-preview.component.ts");let RecordPreviewCardComponent=class RecordPreviewCardComponent extends record_preview_component.W{};RecordPreviewCardComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-record-preview-card",template:'<div\n  class="h-full border bg-white rounded-sm overflow-hidden transition duration-200 transform hover:scale-105 hover:bg-gray-50 border-gray-300 hover:border-primary hover:text-primary"\n>\n  <a\n    [href]="record.metadataUrl"\n    [title]="record.abstract"\n    [target]="linkTarget"\n  >\n    <div class="flex flex-col min-h-full">\n      <gn-ui-thumbnail\n        class="lg:h-48 md:h-36 border-b border-gray-200 bg-gray-100"\n        [thumbnailUrl]="record.thumbnailUrl"\n      ></gn-ui-thumbnail>\n\n      <div class="grow p-4">\n        <h1 class="title-font text-lg font-medium mb-3 clamp-2">\n          {{ record.title }}\n        </h1>\n        <p class="leading-relaxed text-sm text-gray-700 clamp-3">\n          {{ record.abstract }}\n        </p>\n      </div>\n    </div>\n  </a>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[record_preview_card_componentngResource_default()]})],RecordPreviewCardComponent)},"./libs/ui/search/src/lib/record-preview-feed/record-preview-feed.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{B:()=>RecordPreviewFeedComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,record_preview_feed_componentngResource=__webpack_require__("./libs/ui/search/src/lib/record-preview-feed/record-preview-feed.component.css?ngResource"),record_preview_feed_componentngResource_default=__webpack_require__.n(record_preview_feed_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),record_preview_component=__webpack_require__("./libs/ui/search/src/lib/record-preview/record-preview.component.ts"),ngx_translate_core=__webpack_require__("./node_modules/@ngx-translate/core/fesm2020/ngx-translate-core.mjs"),duration_relativetimeformat=__webpack_require__("./node_modules/duration-relativetimeformat/index.js"),duration_relativetimeformat_default=__webpack_require__.n(duration_relativetimeformat);let RecordPreviewFeedComponent=((_class=class RecordPreviewFeedComponent extends record_preview_component.W{constructor(elementRef,translate){super(elementRef),this.elementRef=elementRef,this.translate=translate,this.timeFormat=new(duration_relativetimeformat_default())(this.translate.currentLang,{})}get hasOrganization(){return this.contact&&this.contact.organisation}get hasLogo(){return this.contact&&this.contact.logoUrl}get hasOnlyPerson(){return this.contact&&!this.contact.organisation&&this.contact.name}get time(){return this.timeFormat.format(this.record.createdOn,Date.now())}}).ctorParameters=()=>[{type:core.ElementRef},{type:ngx_translate_core.sK}],_class);RecordPreviewFeedComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-record-preview-feed",template:'<div\n  class="mx-[18px] pl-[18px] pb-[18px] border-solid border-l-2 border-gray-100"\n>\n  <a\n    class="record-container block rounded-lg bg-white border border-white card-shadow"\n    [attr.href]="linkHref"\n    [target]="linkTarget"\n  >\n    <div\n      class="record-header py-4 px-4 border-b border-gray-300 flex flex-row items-center relative transition duration-200"\n    >\n      <div\n        class="absolute w-3 h-3 bg-secondary rounded-full"\n        style="right: calc(100% + 14px)"\n      ></div>\n      <div\n        class="record-header-image border border-gray-300 bg-white rounded-full w-16 h-16 object-contain mr-4 overflow-hidden transition duration-200 shrink-0"\n      >\n        <mat-icon\n          *ngIf="!hasLogo"\n          class="text-gray-200"\n          style="width: 42px; height: 42px; font-size: 42px; margin: 10px"\n          >{{ hasOnlyPerson ? \'face\' : \'home_work\' }}</mat-icon\n        >\n        <gn-ui-thumbnail\n          *ngIf="hasLogo"\n          [thumbnailUrl]="contact.logoUrl"\n        ></gn-ui-thumbnail>\n      </div>\n      <div class="flex flex-col overflow-hidden items-start">\n        <span\n          *ngIf="hasOrganization"\n          class="font-bold transition duration-200 text-primary truncate max-w-full"\n        >\n          {{ contact.organisation }}\n        </span>\n        <span\n          *ngIf="hasOnlyPerson"\n          class="font-bold transition duration-200 text-primary truncate max-w-full"\n        >\n          {{ contact.name }}\n        </span>\n        <p class="text-gray-900">\n          <span translate [translateParams]="{ time }"\n            >record.was.created.time</span\n          >\n        </p>\n      </div>\n    </div>\n    <div class="pt-5 pb-5 px-10 relative">\n      <div class="absolute top-[0.85em] right-[0.85em]">\n        <ng-container\n          [ngTemplateOutlet]="favoriteTemplate"\n          [ngTemplateOutletContext]="{ $implicit: record }"\n        ></ng-container>\n      </div>\n      <h1 class="font-title text-[21px] font-medium mb-3 pr-8">\n        {{ record.title }}\n      </h1>\n      <p class="text-gray-900 line-clamp-3">{{ abstract }}</p>\n      <gn-ui-thumbnail\n        *ngIf="record.thumbnailUrl"\n        class="block mt-3 w-full h-[136px] border border-gray-100 rounded-lg overflow-hidden"\n        [thumbnailUrl]="record.thumbnailUrl"\n      ></gn-ui-thumbnail>\n      <div class="flex flex-row mt-3" *ngIf="isDownloadable || isViewable">\n        <mat-icon\n          *ngIf="isDownloadable"\n          class="material-icons-outlined text-primary opacity-45 mr-3"\n          >cloud_download\n        </mat-icon>\n        <mat-icon\n          *ngIf="isViewable"\n          class="material-icons-outlined text-primary opacity-45 mr-3"\n          >map\n        </mat-icon>\n      </div>\n    </div>\n  </a>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[record_preview_feed_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[core.ElementRef,ngx_translate_core.sK])],RecordPreviewFeedComponent)},"./libs/ui/search/src/lib/record-preview-list/record-preview-list.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{J:()=>RecordPreviewListComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var record_preview_list_componentngResource=__webpack_require__("./libs/ui/search/src/lib/record-preview-list/record-preview-list.component.scss?ngResource"),record_preview_list_componentngResource_default=__webpack_require__.n(record_preview_list_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),record_preview_component=__webpack_require__("./libs/ui/search/src/lib/record-preview/record-preview.component.ts");let RecordPreviewListComponent=class RecordPreviewListComponent extends record_preview_component.W{};RecordPreviewListComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-record-preview-list",template:'<div\n  class="h-40 bg-white transition duration-200 border border-gray-200 rounded-md hover:bg-gray-50 hover:border-primary hover:text-primary"\n>\n  <a\n    [href]="record.metadataUrl"\n    [target]="linkTarget"\n    [title]="record.abstract"\n  >\n    <div class="h-full flex flex-row items-center shadow-sm">\n      <gn-ui-thumbnail\n        class="w-40 h-full shrink-0 border-r border-gray-200 bg-gray-100"\n        [thumbnailUrl]="record.thumbnailUrl"\n      ></gn-ui-thumbnail>\n\n      <div class="grow h-full px-6 py-4 flex flex-col overflow-hidden">\n        <div class="title-font text-lg font-medium mb-2">\n          <h1 class="truncate">{{ record.title }}</h1>\n        </div>\n        <p class="leading-relaxed clamp-3 text-sm text-gray-700">\n          {{ record.abstract }}\n        </p>\n        <div class="grow"></div>\n        <div class="flex flex-row items-center">\n          <div\n            class="text-gray-500 text-xs truncate capitalize border-r mr-4 pr-4"\n            *ngIf="record.updateFrequency"\n          >\n            <span translate>{{ record.updateFrequency }}</span>\n          </div>\n          <div\n            class="text-gray-500 text-xs border-gray-300 truncate viewable-downloadable"\n            *ngIf="isViewable || isDownloadable"\n          >\n            <span *ngIf="isViewable" translate>record.action.view</span>\n            <span *ngIf="isViewable && isDownloadable">,&nbsp;</span>\n            <span *ngIf="isDownloadable" translate>record.action.download</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </a>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[record_preview_list_componentngResource_default()]})],RecordPreviewListComponent)},"./libs/ui/search/src/lib/record-preview-row/record-preview-row.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{E:()=>RecordPreviewRowComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,record_preview_row_componentngResource=__webpack_require__("./libs/ui/search/src/lib/record-preview-row/record-preview-row.component.css?ngResource"),record_preview_row_componentngResource_default=__webpack_require__.n(record_preview_row_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),record_preview_component=__webpack_require__("./libs/ui/search/src/lib/record-preview/record-preview.component.ts");let RecordPreviewRowComponent=((_class=class RecordPreviewRowComponent extends record_preview_component.W{constructor(elementRef){super(elementRef),this.elementRef=elementRef}}).ctorParameters=()=>[{type:core.ElementRef}],_class);RecordPreviewRowComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-record-preview-row",template:'<a\n  class="group container-lg mx-auto flex cursor-pointer flex-wrap sm:flex-nowrap"\n  [title]="record.title"\n  [attr.href]="linkHref"\n>\n  <div class="shrink-0 w-full sm:w-52">\n    <div\n      class="overflow-hidden bg-gray-100 rounded-lg w-full border border-gray-300 h-36"\n    >\n      <gn-ui-thumbnail\n        class="relative h-full w-full object-cover object-left-top"\n        [thumbnailUrl]="[record.thumbnailUrl, contact.logoUrl]"\n        [fit]="[\'cover\', \'contain\']"\n      ></gn-ui-thumbnail>\n    </div>\n  </div>\n  <div\n    class="content grid grow relative sm:pl-6 sm:pr-12"\n    style="grid-template-columns: auto 70px"\n  >\n    <div class="mb-3 mt-5 sm:mt-2">\n      <div\n        class="font-title text-21 text-title line-clamp-2 col-start-1 col-span-2 sm:line-clamp-1 group-hover:text-primary"\n        data-cy="recordTitle"\n      >\n        {{ record.title }}\n      </div>\n    </div>\n    <div\n      class="abstract mt-4 mb-5 h-36 line-clamp-6 col-start-1 col-span-2 row-start-3 sm:mb-2 sm:h-[4.5rem] sm:line-clamp-3 sm:row-start-2 sm:mt-0"\n      data-cy="recordAbstract"\n    >\n      {{ abstract }}\n    </div>\n    <div\n      class="text-primary opacity-45 uppercase col-start-1 col-span-2 row-start-2 sm:truncate sm:row-start-3 sm:col-span-1"\n      data-cy="recordOrg"\n    >\n      {{ contact?.organisation }}\n    </div>\n    <div\n      class="icons flex flex-row col-start-1 row-start-4 sm:col-start-2 sm:row-start-3 sm:absolute sm:right-[0.4em]"\n    >\n      <mat-icon\n        *ngIf="isDownloadable"\n        class="material-icons-outlined text-primary opacity-45 mx-1"\n        >cloud_download</mat-icon\n      >\n      <mat-icon\n        *ngIf="isViewable"\n        class="material-icons-outlined text-primary opacity-45 mx-1"\n        >map</mat-icon\n      >\n    </div>\n    <div\n      class="text-right col-start-2 row-start-4 sm:absolute sm:col-start-2 sm:row-start-1 sm:top-[-1.125em] sm:right-[0.4em]"\n      data-cy="recordFav"\n    >\n      <ng-container\n        [ngTemplateOutlet]="favoriteTemplate"\n        [ngTemplateOutletContext]="{ $implicit: record }"\n      ></ng-container>\n    </div>\n  </div>\n</a>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[record_preview_row_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[core.ElementRef])],RecordPreviewRowComponent)},"./libs/ui/search/src/lib/record-preview-text/record-preview-text.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{j:()=>RecordPreviewTextComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var record_preview_text_componentngResource=__webpack_require__("./libs/ui/search/src/lib/record-preview-text/record-preview-text.component.scss?ngResource"),record_preview_text_componentngResource_default=__webpack_require__.n(record_preview_text_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),record_preview_component=__webpack_require__("./libs/ui/search/src/lib/record-preview/record-preview.component.ts");let RecordPreviewTextComponent=class RecordPreviewTextComponent extends record_preview_component.W{};RecordPreviewTextComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-record-preview-text",template:'\x3c!-- Record list item: List Small --\x3e\n<div class="mb-4">\n  <div\n    class="flex sm:flex-row flex-col p-5 items-center sm:justify-start justify-center text-center sm:text-left bg-white border-gray-200 border rounded-sm transition duration-200 hover:bg-gray-50 hover:border-primary hover:text-primary"\n  >\n    <div class="grow">\n      <h1 class="title-font text-lg font-medium mb-3">\n        {{ record.title }}\n      </h1>\n      <p\n        class="leading-relaxed mb-3 text-gray-700 text-sm whitespace-pre-line clamp-3"\n      >\n        {{ record.abstract }}\n      </p>\n\n      <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">\n        <a\n          class="inline-flex items-center md:mb-2 lg:mb-0 hover:underline"\n          [href]="record.metadataUrl"\n        >\n          <span translate>record.more.details</span>\n          <svg\n            class="h-5 w-5"\n            xmlns="http://www.w3.org/2000/svg"\n            fill="none"\n            viewBox="0 0 24 24"\n            stroke="currentColor"\n          >\n            <path\n              stroke-linecap="round"\n              stroke-linejoin="round"\n              stroke-width="2"\n              d="M9 5l7 7-7 7"\n            />\n          </svg>\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[record_preview_text_componentngResource_default()]})],RecordPreviewTextComponent)},"./libs/ui/search/src/lib/record-preview-title/record-preview-title.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{_:()=>RecordPreviewTitleComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var record_preview_title_componentngResource=__webpack_require__("./libs/ui/search/src/lib/record-preview-title/record-preview-title.component.scss?ngResource"),record_preview_title_componentngResource_default=__webpack_require__.n(record_preview_title_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),record_preview_component=__webpack_require__("./libs/ui/search/src/lib/record-preview/record-preview.component.ts");let RecordPreviewTitleComponent=class RecordPreviewTitleComponent extends record_preview_component.W{};RecordPreviewTitleComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-record-preview-title",template:'\x3c!-- Record list item: List Small --\x3e\n<div\n  class="h-10 w-full border-b border-gray-200 transition duration-200 rounded-sm hover:text-primary"\n>\n  <a\n    [href]="record.metadataUrl"\n    [target]="linkTarget"\n    [title]="record.abstract"\n  >\n    <div class="h-full flex flex-row items-center">\n      <gn-ui-thumbnail\n        class="w-10 h-full shrink-0 border-r border-gray-200 bg-gray-100"\n        [thumbnailUrl]="record.thumbnailUrl"\n      ></gn-ui-thumbnail>\n\n      <div class="grow px-3 py-1 flex flex-col overflow-hidden">\n        <h1 class="title-font text-sm font-bold truncate md:text-clip">\n          {{ record.title }}\n        </h1>\n      </div>\n    </div>\n  </a>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[record_preview_title_componentngResource_default()]})],RecordPreviewTitleComponent)},"./libs/ui/search/src/lib/record-preview/record-preview.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{W:()=>RecordPreviewComponent});var _class,tslib__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./libs/util/shared/src/index.ts"),rxjs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subscription.js"),rxjs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js");let RecordPreviewComponent=((_class=class RecordPreviewComponent{get isViewable(){return this.record.hasMaps}get isDownloadable(){return this.record.hasDownloads}get contact(){return this.record.resourceContacts?.[0]||this.record.contact}constructor(elementRef){this.elementRef=elementRef,this.linkTarget="_blank",this.linkHref=null,this.mdSelect=new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter,this.subscription=new rxjs__WEBPACK_IMPORTED_MODULE_2__.w0}ngOnInit(){this.abstract=(0,_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_0__.Vt)(this.record?.abstract),this.subscription.add((0,rxjs__WEBPACK_IMPORTED_MODULE_3__.R)(this.elementRef.nativeElement,"click").subscribe((event=>{event.preventDefault(),(0,_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_0__.Yr)(event),this.mdSelect.emit(this.record)})))}ngOnDestroy(){this.subscription.unsubscribe()}}).ctorParameters=()=>[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef}],_class.propDecorators={record:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],linkTarget:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],favoriteTemplate:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],linkHref:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],mdSelect:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Output}]},_class);RecordPreviewComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_4__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Component)({selector:"gn-ui-record-preview",template:""}),(0,tslib__WEBPACK_IMPORTED_MODULE_4__.w6)("design:paramtypes",[_angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef])],RecordPreviewComponent)},"./libs/ui/search/src/lib/results-hits-number/results-hits-number.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{w:()=>ResultsHitsNumberComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");let ResultsHitsNumberComponent=((_class=class ResultsHitsNumberComponent{}).propDecorators={hits:[{type:core.Input}],loading:[{type:core.Input}]},_class);ResultsHitsNumberComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-results-hits-number",template:'<div *ngIf="!loading" class="w-full">\n  <ng-container *ngIf="hits">\n    <span translate [translateParams]="{ hits: hits.value }"\n      >results.records.hits.found</span\n    >\n    <p\n      *ngIf="hits.value === 0"\n      class="mt-4"\n      [innerHtml]="\'results.records.hits.empty.help.html\' | translate"\n    ></p>\n  </ng-container>\n</div>\n'})],ResultsHitsNumberComponent)},"./libs/ui/search/src/lib/results-list-item/results-list-item.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Z:()=>ResultsListItemComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,results_list_item_componentngResource=__webpack_require__("./libs/ui/search/src/lib/results-list-item/results-list-item.component.css?ngResource"),results_list_item_componentngResource_default=__webpack_require__.n(results_list_item_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");__webpack_require__("./libs/ui/search/src/lib/results-list/results-layout.config.ts");let ResultsListItemComponent=((_class=class ResultsListItemComponent{constructor(componentFactoryResolver){this.componentFactoryResolver=componentFactoryResolver,this.mdSelect=new core.EventEmitter,this.initialized=!1}ngAfterViewInit(){this.initialized=!0,this.loadComponent()}ngOnChanges(){this.initialized&&this.loadComponent()}loadComponent(){const resolver=this.componentFactoryResolver.resolveComponentFactory(this.layoutConfig.component);this.cardRef.clear();const componentFactory=this.cardRef.createComponent(resolver);componentFactory.instance.record=this.record,componentFactory.instance.favoriteTemplate=this.favoriteTemplate,componentFactory.instance.mdSelect.subscribe((record=>this.mdSelect.emit(record))),componentFactory.instance.linkHref=this.linkHref,componentFactory.changeDetectorRef.detectChanges()}}).ctorParameters=()=>[{type:core.ComponentFactoryResolver}],_class.propDecorators={layoutConfig:[{type:core.Input}],record:[{type:core.Input}],favoriteTemplate:[{type:core.Input}],linkHref:[{type:core.Input}],mdSelect:[{type:core.Output}],cardRef:[{type:core.ViewChild,args:["card",{read:core.ViewContainerRef}]}]},_class);ResultsListItemComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-results-list-item",template:"<ng-template #card></ng-template>\n",changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[results_list_item_componentngResource_default()]}),(0,tslib_es6.w6)("design:paramtypes",[core.ComponentFactoryResolver])],ResultsListItemComponent)},"./libs/ui/search/src/lib/results-list/results-layout.config.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Ne:()=>ResultsLayoutConfigItem,cE:()=>DEFAULT_RESULTS_LAYOUT_CONFIG,z6:()=>RESULTS_LAYOUT_CONFIG});var _angular_core__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_record_preview_card_record_preview_card_component__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./libs/ui/search/src/lib/record-preview-card/record-preview-card.component.ts"),_record_preview_feed_record_preview_feed_component__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./libs/ui/search/src/lib/record-preview-feed/record-preview-feed.component.ts"),_record_preview_list_record_preview_list_component__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./libs/ui/search/src/lib/record-preview-list/record-preview-list.component.ts"),_record_preview_row_record_preview_row_component__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./libs/ui/search/src/lib/record-preview-row/record-preview-row.component.ts"),_record_preview_text_record_preview_text_component__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./libs/ui/search/src/lib/record-preview-text/record-preview-text.component.ts"),_record_preview_title_record_preview_title_component__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./libs/ui/search/src/lib/record-preview-title/record-preview-title.component.ts");class ResultsLayoutConfigItem{constructor(component,itemClass="pb-4",itemStyle="",containerClass="gap-4 p-4"){this.component=component,this.itemClass=itemClass,this.itemStyle=itemStyle,this.containerClass=containerClass}}const RESULTS_LAYOUT_CONFIG=new _angular_core__WEBPACK_IMPORTED_MODULE_6__.InjectionToken("results-layout.config"),DEFAULT_RESULTS_LAYOUT_CONFIG={CARD:new ResultsLayoutConfigItem(_record_preview_card_record_preview_card_component__WEBPACK_IMPORTED_MODULE_0__.D,"","height: 24em;","grid md:grid-cols-2 lg:grid-cols-4 gap-4 p-4"),ROW:new ResultsLayoutConfigItem(_record_preview_row_record_preview_row_component__WEBPACK_IMPORTED_MODULE_3__.E,"pt-4 pb-5 sm:py-7","","grid grid-cols-1 divide-y divide-gray-300"),FEED:new ResultsLayoutConfigItem(_record_preview_feed_record_preview_feed_component__WEBPACK_IMPORTED_MODULE_1__.B,"p-0",void 0,"gap-0 p-0"),LIST:new ResultsLayoutConfigItem(_record_preview_list_record_preview_list_component__WEBPACK_IMPORTED_MODULE_2__.J),TEXT:new ResultsLayoutConfigItem(_record_preview_text_record_preview_text_component__WEBPACK_IMPORTED_MODULE_4__.j),TITLE:new ResultsLayoutConfigItem(_record_preview_title_record_preview_title_component__WEBPACK_IMPORTED_MODULE_5__._)}},"./libs/ui/search/src/lib/results-list/results-list.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{I:()=>ResultsListComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var _class,results_list_componentngResource=__webpack_require__("./libs/ui/search/src/lib/results-list/results-list.component.css?ngResource"),results_list_componentngResource_default=__webpack_require__.n(results_list_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),results_layout_config=__webpack_require__("./libs/ui/search/src/lib/results-list/results-layout.config.ts");let ResultsListComponent=((_class=class ResultsListComponent{constructor(){this.layoutConfig=results_layout_config.cE.CARD,this.mdSelect=new core.EventEmitter}}).propDecorators={records:[{type:core.Input}],layoutConfig:[{type:core.Input}],favoriteTemplate:[{type:core.Input}],recordUrlGetter:[{type:core.Input}],mdSelect:[{type:core.Output}]},_class);ResultsListComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"gn-ui-results-list",template:'<ng-container>\n  <div [ngClass]="layoutConfig.containerClass">\n    <div\n      [ngClass]="layoutConfig.itemClass"\n      [style]="layoutConfig.itemStyle"\n      *ngFor="let record of records"\n    >\n      <gn-ui-results-list-item\n        [record]="record"\n        [layoutConfig]="layoutConfig"\n        (mdSelect)="mdSelect.emit($event)"\n        [favoriteTemplate]="favoriteTemplate"\n        [linkHref]="recordUrlGetter(record)"\n      ></gn-ui-results-list-item>\n    </div>\n  </div>\n</ng-container>\n\n\x3c!--\n<ng-template #block>\n  <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-4 p-4">\n    <gn-ui-record-preview-card\n      *ngFor="let record of records"\n      [record]="record"\n      (mdSelect)="mdSelect.emit($event)"\n      linkTarget="_blank"\n      style="height: 24em"\n    ></gn-ui-record-preview-card>\n  </div>\n</ng-template>\n--\x3e\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[results_list_componentngResource_default()]})],ResultsListComponent)},"./libs/feature/catalog/src/lib/organisations/organisations.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/catalog/src/lib/site-title/site-title.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/catalog/src/lib/source-label/source-label.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/dataviz/src/lib/geo-table-view/geo-table-view.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/map/src/lib/add-layer-from-catalog/add-layer-from-catalog.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"/* TODO(mdc-migration): The following rule targets internal classes of tabs that may no longer apply for the MDC version. */\n::ng-deep .mat-tab-body-wrapper {\n  flex-grow: 1;\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/map/src/lib/add-layer-from-catalog/add-layer-record-preview/add-layer-record-preview.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/map/src/lib/map-container/map-container.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/search/src/lib/facets/facets-container/facets-container.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/search/src/lib/favorites/favorite-star/favorite-star.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/search/src/lib/filter-dropdown/filter-dropdown.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/search/src/lib/fuzzy-search/fuzzy-search.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/search/src/lib/records-metrics/records-metrics.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/search/src/lib/results-list/results-list.container.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/catalog/src/lib/catalog-title/catalog-title.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/catalog/src/lib/language-switcher/language-switcher.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/catalog/src/lib/organisation-preview/organisation-preview.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".abstract {\n  position: relative;\n}\n\n.abstract::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: linear-gradient(0deg, white, transparent);\n  height: 10px;\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/catalog/src/lib/organisations-sort/organisations-sort.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/facets/facet-block/facet-block.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/facets/facet-item/facet-item.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/facets/facet-list/facet-list.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/record-metric/record-metric.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/record-preview-feed/record-preview-feed.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".record-container:hover .record-header,\n.record-container:hover .record-header-image {\n  border-color: var(--color-primary-lightest);\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/record-preview-row/record-preview-row.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/record-table/record-table.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".record-table-col {\n\n    align-items: center;\n\n    overflow: hidden;\n\n    text-overflow: ellipsis;\n\n    white-space: nowrap;\n\n    padding-left: 1.25rem;\n\n    padding-right: 1.25rem;\n\n    padding-top: 0.75rem;\n\n    padding-bottom: 0.75rem\n}\n\n.record-table-header {\n\n    text-transform: capitalize;\n\n    align-items: center;\n\n    overflow: hidden;\n\n    text-overflow: ellipsis;\n\n    white-space: nowrap;\n\n    padding-left: 1.25rem;\n\n    padding-right: 1.25rem;\n\n    padding-top: 0.75rem;\n\n    padding-bottom: 0.75rem\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/results-list-item/results-list-item.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/results-list/results-list.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/feature/map/src/lib/layers-panel/layers-panel.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/record-preview-card/record-preview-card.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/record-preview-list/record-preview-list.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".viewable-downloadable :first-child {\n  text-transform: capitalize;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/record-preview-text/record-preview-text.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/ui/search/src/lib/record-preview-title/record-preview-title.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()}}]);