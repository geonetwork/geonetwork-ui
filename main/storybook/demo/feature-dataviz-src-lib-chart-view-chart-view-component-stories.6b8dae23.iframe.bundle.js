(self.webpackChunkgeonetwork_ui=self.webpackChunkgeonetwork_ui||[]).push([[6212],{"./libs/feature/dataviz/src/lib/chart-view/chart-view.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{L:()=>ChartViewComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var chart_view_componentngResource=__webpack_require__("./libs/feature/dataviz/src/lib/chart-view/chart-view.component.css?ngResource"),chart_view_componentngResource_default=__webpack_require__.n(chart_view_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),biesbjerg_ngx_translate_extract_marker=__webpack_require__("./node_modules/@biesbjerg/ngx-translate-extract-marker/fesm5/biesbjerg-ngx-translate-extract-marker.js"),src=__webpack_require__("./libs/util/data-fetcher/src/index.ts"),inputs_src=__webpack_require__("./libs/ui/inputs/src/index.ts"),BehaviorSubject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js"),combineLatest=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js"),empty=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/empty.js"),filter=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/filter.js"),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),switchMap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"),catchError=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/catchError.js"),shareReplay=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js"),tap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js"),startWith=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/startWith.js"),data_service=__webpack_require__("./libs/feature/dataviz/src/lib/service/data.service.ts"),ngx_translate_core=__webpack_require__("./node_modules/@ngx-translate/core/dist/fesm2022/ngx-translate-core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),dataviz_src=__webpack_require__("./libs/ui/dataviz/src/index.ts"),widgets_src=__webpack_require__("./libs/ui/widgets/src/index.ts");(0,biesbjerg_ngx_translate_extract_marker.x)("chart.type.bar"),(0,biesbjerg_ngx_translate_extract_marker.x)("chart.type.barHorizontal"),(0,biesbjerg_ngx_translate_extract_marker.x)("chart.type.line"),(0,biesbjerg_ngx_translate_extract_marker.x)("chart.type.lineSmooth"),(0,biesbjerg_ngx_translate_extract_marker.x)("chart.type.pie"),(0,biesbjerg_ngx_translate_extract_marker.x)("chart.aggregation.sum"),(0,biesbjerg_ngx_translate_extract_marker.x)("chart.aggregation.max"),(0,biesbjerg_ngx_translate_extract_marker.x)("chart.aggregation.min"),(0,biesbjerg_ngx_translate_extract_marker.x)("chart.aggregation.average"),(0,biesbjerg_ngx_translate_extract_marker.x)("chart.aggregation.count");let ChartViewComponent=class ChartViewComponent{set link(value){this.currentLink$.next(value)}set aggregation(value){this.aggregation$.next(value)}set xProperty(value){this.xProperty$.next(value)}set yProperty(value){this.yProperty$.next(value)}set chartType(value){this.chartType$.next(value)}get aggregationChoices(){return this.yProperty$.value?[{label:"chart.aggregation.sum",value:"sum"},{label:"chart.aggregation.max",value:"max"},{label:"chart.aggregation.min",value:"min"},{label:"chart.aggregation.average",value:"average"},{label:"chart.aggregation.count",value:"count"}]:[{label:"chart.aggregation.count",value:"count"}]}get labelProperty(){return this.xProperty$.value?`distinct(${this.xProperty$.value})`:""}get valueProperty(){return this.isCountAggregation?"count()":`${this.aggregation$.value}(${this.yProperty$.value})`}get isCountAggregation(){return"count"===this.aggregation$.value}constructor(dataService,changeDetector,translateService){this.dataService=dataService,this.changeDetector=changeDetector,this.translateService=translateService,this.cacheActive=!0,this.currentLink$=new BehaviorSubject.t(null),this.aggregation$=new BehaviorSubject.t("sum"),this.xProperty$=new BehaviorSubject.t(void 0),this.yProperty$=new BehaviorSubject.t(void 0),this.chartType$=new BehaviorSubject.t("bar"),this.chartConfig$=(0,combineLatest.z)([this.xProperty$.pipe((0,filter.p)((value=>void 0!==value))),this.yProperty$.pipe((0,filter.p)((value=>void 0!==value))),this.aggregation$,this.chartType$]).pipe((0,map.T)((([xProperty,yProperty,aggregation,chartType])=>({aggregation,xProperty,yProperty,chartType})))),this.loading=!1,this.error=null,this.errorInfo=null,this.typeChoices=[{label:"chart.type.bar",value:"bar"},{label:"chart.type.barHorizontal",value:"bar-horizontal"},{label:"chart.type.line",value:"line"},{label:"chart.type.lineSmooth",value:"line-interpolated"},{label:"chart.type.pie",value:"pie"}],this.dataset$=this.currentLink$.pipe((0,filter.p)((link=>!!link)),(0,switchMap.n)((link=>(this.error=null,this.loading=!0,this.dataService.getDataset(link,this.cacheActive).pipe((0,catchError.W)((error=>(this.handleError(error),empty.w))))))),(0,shareReplay.t)(1)),this.properties$=this.dataset$.pipe((0,switchMap.n)((dataset=>dataset.properties.catch((error=>(this.handleError(error),[]))))),(0,shareReplay.t)(1)),this.yChoices$=this.properties$.pipe((0,map.T)((properties=>properties.filter((prop=>"number"===prop.type||"date"===prop.type)).map((prop=>({value:prop.name,label:prop.label||prop.name}))))),(0,tap.M)((choices=>{if(!choices.find((choice=>choice.value===this.yProperty$.value))){const newProp=choices[0]?.value||"";newProp||"count"===this.aggregation$.value||this.aggregation$.next("count"),this.yProperty$.next(newProp)}}))),this.xChoices$=this.properties$.pipe((0,map.T)((properties=>properties.filter((prop=>"string"===prop.type)).map((prop=>({value:prop.name,label:prop.label||prop.name}))))),(0,tap.M)((choices=>{choices.find((choice=>choice.value===this.xProperty$.value))||this.xProperty$.next(choices[0]?.value||"")}))),this.chartData$=(0,combineLatest.z)([this.dataset$,this.xProperty$.pipe((0,filter.p)((value=>void 0!==value))),this.yProperty$.pipe((0,filter.p)((value=>void 0!==value))),this.aggregation$]).pipe((0,switchMap.n)((([dataset,xProp,yProp,aggregation])=>{const fieldAgg="count"===aggregation?["count"]:[aggregation,yProp];return dataset.groupBy(["distinct",xProp]).aggregate(fieldAgg).read().catch((error=>(this.handleError(error),[]))).finally((()=>{this.loading=!1}))})),(0,map.T)(src.PJ),(0,startWith.Z)([]),(0,shareReplay.t)(1))}handleError(error){error instanceof src.fk?(this.error=this.translateService.instant(`dataset.error.${error.type}`,{info:error.info}),console.warn(error.message)):error instanceof Error?(this.error=this.translateService.instant(error.message),console.warn(error.stack||error)):(this.error=this.translateService.instant(error),console.warn(error)),this.loading=!1,this.changeDetector.detectChanges()}static{this.ctorParameters=()=>[{type:data_service.u},{type:core.ChangeDetectorRef},{type:ngx_translate_core.c$}]}static{this.propDecorators={cacheActive:[{type:core.Input}],link:[{type:core.Input}],aggregation:[{type:core.Input}],xProperty:[{type:core.Input}],yProperty:[{type:core.Input}],chartType:[{type:core.Input}],chartConfig$:[{type:core.Output}]}}};ChartViewComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"gn-ui-chart-view",template:'<div class="w-full h-full flex flex-col">\n  <div\n    class="flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2 justify-between text-[13px]"\n  >\n    <gn-ui-dropdown-selector\n      class="basis-1/4"\n      [choices]="typeChoices"\n      [extraBtnClass]="\'secondary min-w-full\'"\n      (selectValue)="chartType$.next($event)"\n      [selected]="chartType$.value"\n      [title]="\'chart.dropdown.type\' | translate"\n    ></gn-ui-dropdown-selector>\n    <gn-ui-dropdown-selector\n      class="basis-1/4"\n      [choices]="xChoices$ | async"\n      [extraBtnClass]="\'secondary min-w-full\'"\n      (selectValue)="xProperty$.next($event)"\n      [selected]="xProperty$.value"\n      [title]="\'chart.dropdown.xProperty\' | translate"\n    ></gn-ui-dropdown-selector>\n    <gn-ui-dropdown-selector\n      class="basis-1/4"\n      *ngIf="!isCountAggregation"\n      [choices]="yChoices$ | async"\n      (selectValue)="yProperty$.next($event)"\n      [selected]="yProperty$.value"\n      [title]="\'chart.dropdown.yProperty\' | translate"\n      class="select-y-prop"\n    ></gn-ui-dropdown-selector>\n    <gn-ui-dropdown-selector\n      class="basis-1/4"\n      [choices]="aggregationChoices"\n      class="aggregation-choices"\n      (selectValue)="aggregation$.next($event)"\n      [selected]="aggregation$.value"\n      [title]="\'chart.dropdown.aggregation\' | translate"\n    ></gn-ui-dropdown-selector>\n  </div>\n  <div\n    class="relative h-full mt-2 bg-white border border-gray-300 rounded-lg overflow-hidden"\n  >\n    <gn-ui-chart\n      *ngIf="!error"\n      [data]="chartData$ | async"\n      [type]="chartType$.value"\n      [labelProperty]="labelProperty"\n      [valueProperty]="valueProperty"\n    ></gn-ui-chart>\n    <gn-ui-loading-mask\n      *ngIf="loading"\n      class="absolute inset-0"\n      [message]="\'chart.loading.data\' | translate"\n    ></gn-ui-loading-mask>\n    <gn-ui-popup-alert\n      *ngIf="error"\n      type="warning"\n      icon="matErrorOutlineOutline"\n      class="absolute m-2 inset-0"\n    >\n      <span>{{ error }}</span>\n    </gn-ui-popup-alert>\n  </div>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,imports:[common.CommonModule,inputs_src.$j,ngx_translate_core.h,dataviz_src.Qe,widgets_src.OR,widgets_src.oz],standalone:!0,styles:[chart_view_componentngResource_default()]}),(0,tslib_es6.Sn)("design:paramtypes",[data_service.u,core.ChangeDetectorRef,ngx_translate_core.c$])],ChartViewComponent)},"./libs/feature/dataviz/src/lib/service/data.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{u:()=>DataService});var _home_runner_work_geonetwork_ui_geonetwork_ui_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),tslib__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@biesbjerg/ngx-translate-extract-marker/fesm5/biesbjerg-ngx-translate-extract-marker.js"),_camptocamp_ogc_client__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@camptocamp/ogc-client/dist/index.js"),_geonetwork_ui_data_fetcher__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./libs/util/data-fetcher/src/index.ts"),_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./libs/util/shared/src/index.ts"),rxjs__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/from.js"),rxjs__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/throwError.js"),rxjs_operators__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/catchError.js"),rxjs_operators__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),rxjs_operators__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"),rxjs_operators__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js");(0,_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__.x)("wfs.unreachable.cors"),(0,_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__.x)("wfs.unreachable.http"),(0,_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__.x)("dataset.error.forbidden"),(0,_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__.x)("wfs.unreachable.unknown"),(0,_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__.x)("wfs.featuretype.notfound"),(0,_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__.x)("wfs.geojsongml.notsupported"),(0,_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__.x)("ogc.unreachable.unknown"),(0,_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__.x)("dataset.error.network"),(0,_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__.x)("dataset.error.http"),(0,_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__.x)("dataset.error.parse"),(0,_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__.x)("dataset.error.unsupportedType"),(0,_biesbjerg_ngx_translate_extract_marker__WEBPACK_IMPORTED_MODULE_3__.x)("dataset.error.unknown");let DataService=class DataService{constructor(proxy){this.proxy=proxy}getWfsEndpoint(wfsUrl){return(0,rxjs__WEBPACK_IMPORTED_MODULE_4__.H)(new _camptocamp_ogc_client__WEBPACK_IMPORTED_MODULE_0__.ym(this.proxy.getProxiedUrl(wfsUrl)).isReady()).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.W)((error=>{if(error instanceof Error)throw new Error("wfs.unreachable.unknown");if("network"===error.type)throw new Error("wfs.unreachable.cors");if("http"===error.type)throw new Error("wfs.unreachable.http");if("parse"===error.type)throw new Error("wfs.unreachable.parse");throw"unsupportedType"===error.type?new Error("wfs.unreachable.unsupportedType"):new Error("wfs.unreachable.unknown")})))}getDownloadUrlsFromWfs(wfsUrl,featureTypeName){return this.getWfsEndpoint(wfsUrl).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.T)((endpoint=>{const featureTypes=endpoint.getFeatureTypes(),featureType=endpoint.getFeatureTypeSummary(1!==featureTypes.length||featureTypeName?featureTypeName:featureTypes[0].name);if(!featureType)throw new Error("wfs.featuretype.notfound");return{all:featureType.outputFormats.reduce(((prev,curr)=>({...prev,[curr]:endpoint.getFeatureUrl(featureType.name,{outputFormat:curr})})),{}),geojson:endpoint.supportsJson(featureType.name)?endpoint.getFeatureUrl(featureType.name,{asJson:!0,outputCrs:"EPSG:4326"}):null,gml:featureType.outputFormats.find((f=>f.toLowerCase().includes("gml")))&&("EPSG:4326"===featureType.defaultCrs||featureType.otherCrs?.includes("EPSG:4326"))?{featureUrl:endpoint.getFeatureUrl(featureType.name,{outputFormat:featureType.outputFormats.find((f=>f.toLowerCase().includes("gml"))),outputCrs:"EPSG:4326"}),namespace:featureType.name,wfsVersion:endpoint.getVersion()}:null}})))}getWfsFeatureCount(wfsUrl,featureTypeName){return this.getWfsEndpoint(wfsUrl).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.n)((endpoint=>(0,rxjs__WEBPACK_IMPORTED_MODULE_4__.H)(endpoint.getFeatureTypeFull(featureTypeName)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.T)((featureType=>{if(!featureType)throw new Error("wfs.featuretype.notfound");return featureType.objectCount}))))))}getDownloadUrlFromEsriRest(apiUrl,format){return this.proxy.getProxiedUrl(`${apiUrl}/query?f=${format}&where=1=1&outFields=*`)}getDownloadLinksFromWfs(wfsLink){return this.getDownloadUrlsFromWfs(wfsLink.url.toString(),wfsLink.name).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.T)((urls=>(urls.geojson&&(urls.all["application/json"]=urls.geojson),urls))),(0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.T)((urls=>Object.keys(urls.all).map((format=>({...wfsLink,name:wfsLink.name,type:"download",url:new URL(urls.all[format]),mimeType:(0,_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_2__.pY)((0,_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_2__.i8)(format))}))))))}getDownloadLinksFromOgcApiFeatures(ogcApiLink){var _this=this;return(0,_home_runner_work_geonetwork_ui_geonetwork_ui_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_8__.A)((function*(){const collectionInfo=yield _this.getDownloadUrlsFromOgcApi(ogcApiLink.url.href);return Object.keys(collectionInfo.bulkDownloadLinks).map((downloadLink=>({...ogcApiLink,name:collectionInfo.id,type:"download",url:new URL(collectionInfo.bulkDownloadLinks[downloadLink]),mimeType:(0,_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_2__.pY)((0,_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_2__.i8)(downloadLink))})))}))()}getDownloadUrlsFromOgcApi(url){return(0,_home_runner_work_geonetwork_ui_geonetwork_ui_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_8__.A)((function*(){const endpoint=new _camptocamp_ogc_client__WEBPACK_IMPORTED_MODULE_0__.TL(url);return yield endpoint.allCollections.then((collections=>endpoint.getCollectionInfo(collections[0].name))).catch((error=>{throw new Error("ogc.unreachable.unknown")}))}))()}getItemsFromOgcApi(url){return(0,_home_runner_work_geonetwork_ui_geonetwork_ui_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_8__.A)((function*(){const endpoint=new _camptocamp_ogc_client__WEBPACK_IMPORTED_MODULE_0__.TL(url);return yield endpoint.featureCollections.then((collections=>collections.length?endpoint.getCollectionItem(collections[0],"1"):null)).catch((error=>{throw new Error("ogc.unreachable.unknown")}))}))()}getDownloadLinksFromEsriRest(esriRestLink){return["json","geojson"].map((format=>({...esriRestLink,url:new URL(this.getDownloadUrlFromEsriRest(esriRestLink.url.toString(),format)),mimeType:(0,_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_2__.pY)((0,_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_2__.i8)(format))})))}readAsGeoJson(link,cacheActive){return this.getDataset(link,cacheActive).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.n)((dataset=>dataset.selectAll().read())),(0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.T)((features=>({type:"FeatureCollection",features}))))}getDataset(link,cacheActive){if("service"===link.type&&"wfs"===link.accessServiceProtocol){const wfsUrlEndpoint=this.proxy.getProxiedUrl(link.url.toString());return(0,rxjs__WEBPACK_IMPORTED_MODULE_4__.H)((0,_geonetwork_ui_data_fetcher__WEBPACK_IMPORTED_MODULE_1__.Jp)(wfsUrlEndpoint,"wfs",{wfsFeatureType:link.name},cacheActive))}if("download"===link.type){const linkProxifiedUrl=this.proxy.getProxiedUrl(link.url.toString()),format=(0,_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_2__.uL)(link),supportedType=_geonetwork_ui_data_fetcher__WEBPACK_IMPORTED_MODULE_1__.S5.indexOf(format)>-1?format:void 0;return(0,rxjs__WEBPACK_IMPORTED_MODULE_4__.H)((0,_geonetwork_ui_data_fetcher__WEBPACK_IMPORTED_MODULE_1__.Jp)(linkProxifiedUrl,supportedType,void 0,cacheActive)).pipe()}if("service"===link.type&&"esriRest"===link.accessServiceProtocol){const url=this.getDownloadUrlFromEsriRest(link.url.toString(),"geojson");return(0,rxjs__WEBPACK_IMPORTED_MODULE_4__.H)((0,_geonetwork_ui_data_fetcher__WEBPACK_IMPORTED_MODULE_1__.Jp)(url,"geojson",void 0,cacheActive)).pipe()}return"service"===link.type&&"ogcFeatures"===link.accessServiceProtocol?(0,rxjs__WEBPACK_IMPORTED_MODULE_4__.H)(this.getDownloadUrlsFromOgcApi(link.url.href)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.n)((collectionInfo=>{const geojsonUrl=collectionInfo.jsonDownloadLink;return(0,_geonetwork_ui_data_fetcher__WEBPACK_IMPORTED_MODULE_1__.Jp)(geojsonUrl,"geojson",void 0,cacheActive)})),(0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.M)((url=>{if(null===url)throw new Error("wfs.geojsongml.notsupported")}))):(0,rxjs__WEBPACK_IMPORTED_MODULE_10__.$)((()=>"protocol not supported"))}static{this.ctorParameters=()=>[{type:_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_2__.Uk}]}};DataService=(0,tslib__WEBPACK_IMPORTED_MODULE_11__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_12__.Injectable)({providedIn:"root"}),(0,tslib__WEBPACK_IMPORTED_MODULE_11__.Sn)("design:paramtypes",[_geonetwork_ui_util_shared__WEBPACK_IMPORTED_MODULE_2__.Uk])],DataService)},"./node_modules/rxjs/dist/esm5/internal/observable/throwError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{$:()=>throwError});var _Observable__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Observable.js"),_util_isFunction__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/isFunction.js");function throwError(errorOrErrorFactory,scheduler){var errorFactory=(0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.T)(errorOrErrorFactory)?errorOrErrorFactory:function(){return errorOrErrorFactory},init=function(subscriber){return subscriber.error(errorFactory())};return new _Observable__WEBPACK_IMPORTED_MODULE_1__.c(scheduler?function(subscriber){return scheduler.schedule(init,0,subscriber)}:init)}},"./libs/feature/dataviz/src/lib/chart-view/chart-view.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _angular_common_http__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@angular/common/fesm2022/http.mjs"),_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@angular/platform-browser/fesm2022/animations.mjs"),_geonetwork_ui_util_i18n__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./libs/util/i18n/src/index.ts"),_ngx_translate_core__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@ngx-translate/core/dist/fesm2022/ngx-translate-core.mjs"),_storybook_angular__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),_chart_view_component__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./libs/feature/dataviz/src/lib/chart-view/chart-view.component.ts"),_geonetwork_ui_ui_dataviz__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./libs/ui/dataviz/src/index.ts"),_angular_core__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_geonetwork_ui_ui_inputs__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./libs/ui/inputs/src/index.ts"),_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@angular/cdk/fesm2022/overlay.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"Smart/Dataviz/ChartView",component:_chart_view_component__WEBPACK_IMPORTED_MODULE_2__.L,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_1__.moduleMetadata)({imports:[_geonetwork_ui_ui_dataviz__WEBPACK_IMPORTED_MODULE_3__.Qe,_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_5__.z_,_ngx_translate_core__WEBPACK_IMPORTED_MODULE_6__.h.forRoot(_geonetwork_ui_util_i18n__WEBPACK_IMPORTED_MODULE_0__.sU),_geonetwork_ui_ui_inputs__WEBPACK_IMPORTED_MODULE_4__.cc]}),(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_1__.applicationConfig)({providers:[(0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.importProvidersFrom)(_geonetwork_ui_ui_dataviz__WEBPACK_IMPORTED_MODULE_3__.A5),(0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.importProvidersFrom)(_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_8__.BrowserAnimationsModule),(0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.importProvidersFrom)(_angular_common_http__WEBPACK_IMPORTED_MODULE_9__.q1)]}),(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_1__.componentWrapperDecorator)((story=>`<div class="border border-gray-300 h-[500px] w-[800px] p-[10px]" style="resize: both; overflow: auto">${story}</div>`))]},LINKS={wfs:{description:"US states",name:"topp:states",url:new URL("https://ahocevar.com/geoserver/wfs?service=WFS&version=1.1.0&request=GetCapabilities"),type:"service",accessServiceProtocol:"wfs"},csv:{description:"France departments",url:new URL("https://www.data.gouv.fr/fr/datasets/r/70cef74f-70b1-495a-8500-c089229c0254"),type:"download"}},Primary={args:{link:"wfs"},argTypes:{link:{control:"radio",options:Object.keys(LINKS)}},render:args=>({props:{...args,link:LINKS[args.link]}})},__namedExportsOrder=["Primary"];Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"{\n  args: {\n    link: 'wfs'\n  },\n  argTypes: {\n    link: {\n      control: 'radio',\n      options: Object.keys(LINKS)\n    }\n  },\n  render: args => ({\n    props: {\n      ...args,\n      link: LINKS[args.link]\n    }\n  })\n}",...Primary.parameters?.docs?.source}}}},"./libs/feature/dataviz/src/lib/chart-view/chart-view.component.css?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()}}]);