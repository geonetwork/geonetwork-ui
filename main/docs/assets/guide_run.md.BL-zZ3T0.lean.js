import{_ as s,c as a,a3 as e,o as t}from"./chunks/framework.BU4YErrW.js";const c=JSON.parse('{"title":"How to run GeoNetwork-UI applications","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/run.md","filePath":"guide/run.md"}'),n={name:"guide/run.md"};function l(o,i,h,p,r,d){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="how-to-run-geonetwork-ui-applications" tabindex="-1">How to run GeoNetwork-UI applications <a class="header-anchor" href="#how-to-run-geonetwork-ui-applications" aria-label="Permalink to &quot;How to run GeoNetwork-UI applications&quot;">​</a></h1><p>The following GeoNetwork-UI applications are available as docker images or ZIP archives:</p><ul><li><a href="./../apps/datahub.html">Datahub</a></li><li><a href="./../apps/editor.html">Metadata Editor</a></li><li><a href="./../apps/datafeeder.html">Datafeeder</a></li></ul><h2 id="with-docker" tabindex="-1">With docker <a class="header-anchor" href="#with-docker" aria-label="Permalink to &quot;With docker&quot;">​</a></h2><p>All docker images are named similarly: <code>geonetwork/geonetwork-ui-&lt;application&gt;</code>, and stored on Docker Hub: <a href="https://hub.docker.com/u/geonetwork" target="_blank" rel="noreferrer">https://hub.docker.com/u/geonetwork</a></p><p>To run it on the 8080 port with a custom GN4 API url and proxy path, use:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GN4_API_URL=https://gn4.custom/geonetwork/srv/api</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROXY_PATH=/proxy?url=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             geonetwork/geonetwork-ui-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">applicatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Notice how the <code>GN4_API_URL</code> and <code>PROXY_PATH</code> variables are used to override any values present in the app configuration file. <strong>This override will happen everytime the docker container is started.</strong></p><p>The application will be available on <a href="http://localhost:8080/application/" target="_blank" rel="noreferrer">http://localhost:8080/application/</a>.</p><h3 id="specifying-a-custom-configuration-file" tabindex="-1">Specifying a custom configuration file <a class="header-anchor" href="#specifying-a-custom-configuration-file" aria-label="Permalink to &quot;Specifying a custom configuration file&quot;">​</a></h3><p>If the <code>GN4_API_URL</code> and <code>PROXY_PATH</code> environment variables are not enough and you want to specify a full configuration file, you can do so like this:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># this assumes a file named \`default.toml\` is located in the /home/user/custom-conf directory:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/user/custom-conf:/conf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             geonetwork/geonetwork-ui-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">applicatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>If a file named <code>default.toml</code> is found in the <code>/conf</code> folder <em>of the app container</em> at startup, it will be used by the application.</p><p>You can specify a different directory to look for the <code>default.toml</code> file using the <code>CONFIG_DIRECTORY_OVERRIDE</code> env variable, like so:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># this assumes a file named \`default.toml\` is located in the /home/user/custom-conf directory:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/user/custom-conf:/some/random/path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CONFIG_DIRECTORY_OVERRIDE=/some/random/path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             geonetwork/geonetwork-ui-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">applicatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>This can be useful when dealing with existing volumes having their own directory structure.</p><h3 id="adding-custom-assets-to-the-docker-container" tabindex="-1">Adding custom assets to the docker container <a class="header-anchor" href="#adding-custom-assets-to-the-docker-container" aria-label="Permalink to &quot;Adding custom assets to the docker container&quot;">​</a></h3><p>Any file found in the <code>/assets</code> folder <em>of the app container</em> at startup will be copied along with the other assets already present. Existing assets with conflicting names will be replaced. Directory structure in the <code>/assets</code> folder will be preserved.</p><p>For each image file present in the copied assets, a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload" target="_blank" rel="noreferrer">preload link</a> will be created in the <code>index.html</code> file of the application. This will help reducing the time to first significant draw for new visitors, especially for header backgrounds and the like.</p><p>You can specify a different directory to look for the custom assets using the <code>ASSETS_DIRECTORY_OVERRIDE</code> env variable, like so:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># custom assets are located in the /home/user/my-assets directory:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/user/my-assets:/some/random/path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ASSETS_DIRECTORY_OVERRIDE=/some/random/path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             geonetwork/geonetwork-ui-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">applicatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="adding-custom-scripts-when-deploying-an-application" tabindex="-1">Adding custom scripts when deploying an application <a class="header-anchor" href="#adding-custom-scripts-when-deploying-an-application" aria-label="Permalink to &quot;Adding custom scripts when deploying an application&quot;">​</a></h3><p>You can deploy custom executable &quot;bash&quot; scripts when deploying a container by setting the environment variable <code>CUSTOM_SCRIPTS_DIRECTORY</code> pointing to a mounted volume.</p><p>It can be used to deploy custom header by example.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/user/my-scripts:/some/random/path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CUSTOM_SCRIPTS_DIRECTORY=/some/random/path</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             geonetwork/geonetwork-ui-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">applicatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="from-the-zip-archive" tabindex="-1">From the ZIP archive <a class="header-anchor" href="#from-the-zip-archive" aria-label="Permalink to &quot;From the ZIP archive&quot;">​</a></h2><p>Each release of GeoNetwork-UI comes with ZIP archives of all applications: <a href="https://github.com/geonetwork/geonetwork-ui/releases" target="_blank" rel="noreferrer">https://github.com/geonetwork/geonetwork-ui/releases</a></p><p>Download the application archive and simply serve its contents using an HTTP server like Apache or NGINX.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>See the <a href="./configure.html">configuration guide</a>.</p><h2 id="run-an-application-in-development-mode" tabindex="-1">Run an application in development mode <a class="header-anchor" href="#run-an-application-in-development-mode" aria-label="Permalink to &quot;Run an application in development mode&quot;">​</a></h2><blockquote><p>For the following instructions, make sure you are using Node v18+ and that you ran <code>npm install</code> before anything else.</p></blockquote><p>Executing:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx nx serve &lt;application&gt;</span></span></code></pre></div><p>will run the application in development mode on <a href="http://localhost:4200/" target="_blank" rel="noreferrer">localhost:4200</a>.</p><h2 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h2><p>GeoNetwork-UI applications can use a reverse proxy for querying WMS and WFS capabilities (thus working around CORS limitations).</p><p>By default it is disabled in order not to hide those issues to the user.</p><p>You can specify a custom proxy path using the <code>proxy_path</code> setting in the <code>[global]</code> section of the app configuration file. The proxy is disabled when no path is defined.</p><p>Please note that during development a proxy is provided by webpack on the <code>/dev-proxy?</code> url path. <strong>It is not used by default in development mode, you will have to set it up yourself.</strong></p><h2 id="building-applications" tabindex="-1">Building applications <a class="header-anchor" href="#building-applications" aria-label="Permalink to &quot;Building applications&quot;">​</a></h2><h3 id="building-without-docker" tabindex="-1">Building without Docker <a class="header-anchor" href="#building-without-docker" aria-label="Permalink to &quot;Building without Docker&quot;">​</a></h3><p>You can build applications using the following command:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> datahub</span></span></code></pre></div><p>The build artifact will be stored in the <code>dist/apps/&lt;application&gt;</code> directory, that can be deployed on a common webserver. Use the <code>--prod</code> flag for a production build.</p><p>The build also includes the app configuration file (<code>dist/apps/&lt;application&gt;/assets/configuration</code>). Do not modify the configuration file here, as it is overwritten on each build.</p><h3 id="building-with-docker" tabindex="-1">Building with Docker <a class="header-anchor" href="#building-with-docker" aria-label="Permalink to &quot;Building with Docker&quot;">​</a></h3><p>You can build a docker image of the Datahub application like so:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> datahub:docker-build</span></span></code></pre></div><p>This will build a docker image with the tag <code>geonetwork/geonetwork-ui-datahub</code>.</p>`,50)]))}const g=s(n,[["render",l]]);export{c as __pageData,g as default};
