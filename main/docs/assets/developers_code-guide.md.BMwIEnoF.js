import{_ as s,c as e,a3 as a,o as t}from"./chunks/framework.BU4YErrW.js";const k=JSON.parse('{"title":"Coding guidelines","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"developers/code-guide.md","filePath":"developers/code-guide.md"}'),n={name:"developers/code-guide.md"};function l(o,i,p,h,d,r){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="coding-guidelines" tabindex="-1">Coding guidelines <a class="header-anchor" href="#coding-guidelines" aria-label="Permalink to &quot;Coding guidelines&quot;">​</a></h1><h2 id="dates" tabindex="-1">Dates <a class="header-anchor" href="#dates" aria-label="Permalink to &quot;Dates&quot;">​</a></h2><p>All date formatting in the application should use the <code>DateService</code> provided by <code>@geonetwork-ui/util/shared</code>. This ensures consistent date formatting across the application and simplifies localization.</p><h3 id="using-dateservice" tabindex="-1">Using DateService <a class="header-anchor" href="#using-dateservice" aria-label="Permalink to &quot;Using DateService&quot;">​</a></h3><p>First, inject the DateService in your component or service:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { DateService } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@geonetwork-ui/util/shared&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(private dateService: DateService) {}</span></span></code></pre></div><h3 id="formatting-dates" tabindex="-1">Formatting dates <a class="header-anchor" href="#formatting-dates" aria-label="Permalink to &quot;Formatting dates&quot;">​</a></h3><p>Use the <code>formatDate</code> method for date-only formatting:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Formats to localized date (e.g., &quot;01/15/2023&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> formattedDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dateService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formatDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myDate)</span></span></code></pre></div><p>Use the <code>formatDateTime</code> method when you need to include the time component:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Formats to localized date and time (e.g., &quot;01/15/2023 14:30:45&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> formattedDateTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dateService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">formatDateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myDate)</span></span></code></pre></div><h3 id="best-practices" tabindex="-1">Best practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best practices&quot;">​</a></h3><ul><li>Never use direct JavaScript Date formatting methods or third-party libraries for date formatting</li><li>Always use the DateService methods for consistency</li><li>Consider time zones when working with dates, especially in global applications</li><li>For date manipulation (not formatting), consider using the utility methods provided by the DateService</li></ul><h2 id="event-handling" tabindex="-1">Event handling <a class="header-anchor" href="#event-handling" aria-label="Permalink to &quot;Event handling&quot;">​</a></h2><h3 id="stopping-click-event-propagation" tabindex="-1">Stopping click event propagation <a class="header-anchor" href="#stopping-click-event-propagation" aria-label="Permalink to &quot;Stopping click event propagation&quot;">​</a></h3><p>In order to stop click event propagation you should use <code>propagateToDocumentOnly</code> from <code>@geonetwork-ui/util/shared</code> instead of <code>event.stopPropagation</code> to ensure that the document receives the event.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { propagateToDocumentOnly } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@geonetwork-ui/util/shared&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event: Event) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // do stuff</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  propagateToDocumentOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This guarantees that the document will still receive the event so that components such as dropdowns can react to a click outside and close.</p>`,18)]))}const g=s(n,[["render",l]]);export{k as __pageData,g as default};
