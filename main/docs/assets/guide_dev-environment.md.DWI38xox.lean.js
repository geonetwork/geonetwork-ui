import{_ as s,c as i,a3 as t,o as a}from"./chunks/framework.BU4YErrW.js";const n="/geonetwork-ui/main/docs/assets/intellij-edit-configs.CCHukpCX.png",o="/geonetwork-ui/main/docs/assets/intellij-create-debug-config.CuDFqFAm.png",r="/geonetwork-ui/main/docs/assets/intellij-remote-debug.BWV77_Qm.png",m=JSON.parse('{"title":"How to set up a development environment","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/dev-environment.md","filePath":"guide/dev-environment.md"}'),l={name:"guide/dev-environment.md"};function p(h,e,d,c,k,g){return a(),i("div",null,e[0]||(e[0]=[t(`<h1 id="how-to-set-up-a-development-environment" tabindex="-1">How to set up a development environment <a class="header-anchor" href="#how-to-set-up-a-development-environment" aria-label="Permalink to &quot;How to set up a development environment&quot;">​</a></h1><p>This guide will help you set up the most appropriate development environment for your needs and objectives.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>A typical development environment on GeoNetwork-UI looks like this:</p><ul><li>All <strong>backend services</strong> (GeoNetwork, ElasticSearch, database...) are run using the <code>support-services</code> docker composition</li><li>The <strong>GeoNetwork-UI application</strong> in development is run using <code>nx serve</code></li></ul><h2 id="backend-services" tabindex="-1">Backend services <a class="header-anchor" href="#backend-services" aria-label="Permalink to &quot;Backend services&quot;">​</a></h2><p>The easiest way to have backend services running is to head to the <a href="https://github.com/geonetwork/geonetwork-ui/tree/main/support-services" target="_blank" rel="noreferrer">support-services</a> folder and run</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>to have all the required support services running locally (such as GeoNetwork).</p><p>Alternatively, you can also adjust the GeoNetwork instance used as a backend in the <a href="https://github.com/geonetwork/geonetwork-ui/blob/main/proxy-config.js" target="_blank" rel="noreferrer">proxy-config.js</a> file like so:</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-light-font-weight:bold;--shiki-dark:#B392F0;--shiki-dark-font-weight:bold;">@@ -1,6 +1,6 @@</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> module.exports = {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &#39;/geonetwork&#39;: {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-    target: &#39;http://localhost:8080&#39;,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+    target: &#39;https://my.catalogue.org&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     secure: true,</span></span></code></pre></div><h3 id="specifying-a-different-geonetwork-version" tabindex="-1">Specifying a different GeoNetwork version <a class="header-anchor" href="#specifying-a-different-geonetwork-version" aria-label="Permalink to &quot;Specifying a different GeoNetwork version&quot;">​</a></h3><p>By default, the version of GeoNetwork used as a backend is 4.2.2. You can specify another version like so:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GEONETWORK_VERSION=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.2.5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><h3 id="remote-debugging-of-geonetwork" tabindex="-1">Remote debugging of GeoNetwork <a class="header-anchor" href="#remote-debugging-of-geonetwork" aria-label="Permalink to &quot;Remote debugging of GeoNetwork&quot;">​</a></h3><p>When using an IDE that supports Java remote debugging (e.g. IntelliJ IDEA), it is possible to connect to the running GeoNetwork instance by creating a &quot;Remote JVM Debug&quot; configuration pointing on the <code>5005</code> port; This can be done in IntelliJ like so:</p><ol><li><p>Open the &quot;Edit Configurations&quot; dialog<br><img src="`+n+'" alt="intellij-edit-configs.png"></p></li><li><p>Create a new &quot;Remote JVM Debug&quot; configuration<br><img src="'+o+'" alt="intellij-create-debug-config.png"></p></li><li><p>Set the port to <code>5005</code><br><img src="'+r+`" alt="intellij-remote-debug.png"></p></li></ol><p>Then, the remote debugger will be able to attach to GeoNetwork once it&#39;s running and you will be able to create breakpoints and inspect the running code.</p><h2 id="geonetwork-ui-code" tabindex="-1">GeoNetwork-UI code <a class="header-anchor" href="#geonetwork-ui-code" aria-label="Permalink to &quot;GeoNetwork-UI code&quot;">​</a></h2><h3 id="applications" tabindex="-1">Applications <a class="header-anchor" href="#applications" aria-label="Permalink to &quot;Applications&quot;">​</a></h3><p>When working on a GeoNetwork-UI application, you can start it in development mode by running:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &lt;app-name&gt; is e.g. datahub or datafeeder</span></span></code></pre></div><p>The application is then available at <a href="http://localhost:4200" target="_blank" rel="noreferrer">http://localhost:4200</a>.</p><p>Any changes to the code will be recompiled immediately and the browser will refresh automatically.</p><h3 id="smart-components-services" tabindex="-1">Smart components &amp; services <a class="header-anchor" href="#smart-components-services" aria-label="Permalink to &quot;Smart components &amp; services&quot;">​</a></h3><p>When working on smart components &amp; services (usually sitting in <code>feature</code> libs), it might not be necessary to start the whole stack of backend services and GeoNetwork-UI application from the start.</p><p>You can most likely simply <strong>iterate over unit tests</strong> to achieve the desired result. Starting the application can be done at a later stage for verification purposes.</p><h3 id="presentation-components" tabindex="-1">Presentation components <a class="header-anchor" href="#presentation-components" aria-label="Permalink to &quot;Presentation components&quot;">​</a></h3><p>Presentation components are typically very encapsulated, and mainly rely on inputs without any complex dependencies.</p><p>As such, the quickest and easiest way to develop presentation components is often simply to rely on <a href="https://storybook.js.org" target="_blank" rel="noreferrer">Storybook</a> which offers:</p><ul><li>Automatic hot reloading of the component</li><li>Many options for adjusting inputs and controlling outputs</li><li>Isolated rendering of the component</li></ul><p>To start Storybook, run:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> storybook</span></span></code></pre></div><p>For a guide on how to write Angular component stories, see: <a href="https://storybook.js.org/docs/angular/writing-stories/introduction" target="_blank" rel="noreferrer">https://storybook.js.org/docs/angular/writing-stories/introduction</a></p><h3 id="users" tabindex="-1">Users <a class="header-anchor" href="#users" aria-label="Permalink to &quot;Users&quot;">​</a></h3><p>For development purposes, three users have been created :</p><ul><li>username : admin, password : admin</li><li>username: johndoe, password: p4ssworD_</li><li>username: barbie, password: p4ssworD_</li></ul>`,37)]))}const b=s(l,[["render",p]]);export{m as __pageData,b as default};
