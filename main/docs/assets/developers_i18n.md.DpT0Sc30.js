import{_ as a,c as s,a3 as t,o as i}from"./chunks/framework.BU4YErrW.js";const k=JSON.parse('{"title":"Internationalization","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"developers/i18n.md","filePath":"developers/i18n.md"}'),n={name:"developers/i18n.md"};function l(o,e,r,h,p,d){return i(),s("div",null,e[0]||(e[0]=[t(`<h1 id="internationalization" tabindex="-1">Internationalization <a class="header-anchor" href="#internationalization" aria-label="Permalink to &quot;Internationalization&quot;">​</a></h1><p>Every label visible to the user in the different applications must be translated. All labels are identified using keys, for example:</p><ul><li><code>table.object.count</code></li><li><code>results.layout.selectOne</code></li><li><code>catalog.title.welcome.html</code></li></ul><p>A repository of <em>all translations</em> is available in the <a href="https://github.com/geonetwork/geonetwork-ui/tree/main/translations" target="_blank" rel="noreferrer">translations</a> folder. <strong>These are the translations used in the different applications of the GeoNetwork-UI project.</strong></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Please note that <strong>only the translations whose key end in <code>.html</code></strong> can accept HTML markup.</p></div><h2 id="how-to-use-translations" tabindex="-1">How to use translations <a class="header-anchor" href="#how-to-use-translations" aria-label="Permalink to &quot;How to use translations&quot;">​</a></h2><p>The User Interface supports translated labels and switching languages at runtime. The <a href="https://github.com/ngx-translate/core" target="_blank" rel="noreferrer"><code>ngx-translate</code> library</a> is used to handle all i18n aspects in GeoNetwork-UI.</p><p>To have access to the functionalities offered by library, use the <code>provideI18n()</code> utility in the root module:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { provideI18n } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@geonetwork-ui/util/i18n&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NgModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  imports: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providers: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    provideI18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a custom config can be used instead of the default one</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AppModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span></code></pre></div><p>Standalone components only need to import the <code>TranslateDirective</code> and <code>TranslatePipe</code> directives (if they need it):</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { provideI18n } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@geonetwork-ui/util/i18n&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  selector: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gn-ui-metadata-contact&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  templateUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./metadata-contact.component.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  styleUrls: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./metadata-contact.component.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  changeDetection: ChangeDetectionStrategy.OnPush,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  standalone: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  imports: [CommonModule, ThumbnailComponent, NgIcon, TranslateDirective]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MetadataContactComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span></code></pre></div><p>The <code>TranslateService</code> service can be injected anywhere and offers several functionalities:</p><ul><li>reading the current language using <code>currentLang</code> (this gives the value at a certain time and is not an observable)</li><li>changing the current language using the <code>use()</code> method</li></ul><p>Languages in GeoNetwork-UI should always be identified by their <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" target="_blank" rel="noreferrer">two-character codes following the ISO 639-1 list</a>.</p><h2 id="supported-languages" tabindex="-1">Supported languages <a class="header-anchor" href="#supported-languages" aria-label="Permalink to &quot;Supported languages&quot;">​</a></h2><p>Currently, a small amount of languages is supported, see: <a href="https://github.com/geonetwork/geonetwork-ui/blob/main/libs/util/i18n/src/lib/i18n.constants.ts" target="_blank" rel="noreferrer">https://github.com/geonetwork/geonetwork-ui/blob/main/libs/util/i18n/src/lib/i18n.constants.ts</a></p><h2 id="where-translations-are-stored" tabindex="-1">Where translations are stored <a class="header-anchor" href="#where-translations-are-stored" aria-label="Permalink to &quot;Where translations are stored&quot;">​</a></h2><p>All translated labels are stored in JSON files situated in the <a href="https://github.com/geonetwork/geonetwork-ui/tree/main/translations" target="_blank" rel="noreferrer"><code>translations</code></a> folder at the root of the project.</p><p>The rules for showing the translated labels on screen are:</p><ul><li>if available, use the label for the current language</li><li>if that is not available, use the label for english as fallback</li><li>if that is unavailable as well, simply show the raw translation key on screen</li></ul><h2 id="how-to-include-translated-labels-in-geonetwork-ui" tabindex="-1">How to include translated labels in GeoNetwork-UI <a class="header-anchor" href="#how-to-include-translated-labels-in-geonetwork-ui" aria-label="Permalink to &quot;How to include translated labels in GeoNetwork-UI&quot;">​</a></h2><ul><li>use the <code>| translate</code> pipe or <code>translate</code> directive</li><li>avoid using instant translation in the code: in case the language is switched dynamically, labels translated that way will not be updated</li><li>if translation keys are computed dynamically, use the <a href="https://github.com/biesbjerg/ngx-translate-extract-marker" target="_blank" rel="noreferrer"><code>marker()</code></a> function to declare them beforehand; <strong>translation keys should be discoverable statically by analyzing the source code!</strong></li><li>be sure to use separate closing tags as the extraction script may not find them otherwise (eg. <code>&lt;div&gt;&lt;/div&gt;</code> instead of <code>&lt;div/&gt;</code>). Even &quot;non-closed&quot; child elements can become an issue here.</li></ul><p>When a contribution adds new translated labels, the <code>npm run i18n:extract</code> command (which relies on the <a href="https://github.com/biesbjerg/ngx-translate-extract" target="_blank" rel="noreferrer"><code>ngx-translate-extract</code></a> library) should be run and its results committed separately. English labels should always be provided for new keys as this is the fallback language.</p><h2 id="how-to-contribute-new-translations" tabindex="-1">How to contribute new translations <a class="header-anchor" href="#how-to-contribute-new-translations" aria-label="Permalink to &quot;How to contribute new translations&quot;">​</a></h2><p>Simply open a PR modifying the translated labels as you see fit. <strong>Adding or removing keys in the translation files should only be done through the <code>npm run i18n:extract</code> command.</strong></p><h2 id="how-the-user-interface-language-is-detected" tabindex="-1">How the User Interface language is detected <a class="header-anchor" href="#how-the-user-interface-language-is-detected" aria-label="Permalink to &quot;How the User Interface language is detected&quot;">​</a></h2><p>The default language detection logic is as follows:</p><ul><li>if a language code is stored in local storage under the <code>geonetwork-ui-language</code> key then this will be used</li><li>otherwise, use the browser language by default</li></ul><p>This means that switching the language of the interface can be used by changing the value of the <code>geonetwork-ui-language</code> key in local storage.</p><h2 id="debugging-translation-keys" tabindex="-1">Debugging translation keys <a class="header-anchor" href="#debugging-translation-keys" aria-label="Permalink to &quot;Debugging translation keys&quot;">​</a></h2><p>The <code>provideI18n()</code> utility uses a separate debug configuration whenever the <code>?debugTranslations=true</code> query parameter is present in the URL. This will cause all translation keys to become visible in the applications and components, thus making it easier to see which keys are used where.</p>`,31)]))}const g=a(n,[["render",l]]);export{k as __pageData,g as default};
