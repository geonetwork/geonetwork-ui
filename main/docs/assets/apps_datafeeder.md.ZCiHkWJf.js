import{_ as e,c as a,o as s,a5 as t}from"./chunks/framework.Cz2oDBlC.js";const f=JSON.parse('{"title":"Datafeeder","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"apps/datafeeder.md","filePath":"apps/datafeeder.md"}'),i={name:"apps/datafeeder.md"},n=t(`<h1 id="datafeeder" tabindex="-1">Datafeeder <a class="header-anchor" href="#datafeeder" aria-label="Permalink to &quot;Datafeeder&quot;">​</a></h1><p>&quot;Datafeeder&quot; is a geOrchestra&#39;s backend RESTful service to upload file based datasets and publish them to GeoServer and GeoNetwork in one shot.</p><p>The separate front-end UI service provides the wizard-like user interface to interact with this <a href="https://github.com/georchestra/georchestra/tree/master/datafeeder" target="_blank" rel="noreferrer">backend</a>.</p><p>The front-end part is built with Geonetwork-UI components</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>The easiest way to deploy datafeeder locally is to use the docker composition in <code>support-services/datafeeder</code>.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> support-services/datafeeder</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>In <code>geonetwork-ui/</code> directory, run :</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> datafeeder:serve</span></span></code></pre></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><h3 id="adding-projections-and-encodings" tabindex="-1">Adding projections and encodings <a class="header-anchor" href="#adding-projections-and-encodings" aria-label="Permalink to &quot;Adding projections and encodings&quot;">​</a></h3><p>The datafeeder configuration can be edited by modifying the <code>frontend-config.json</code> file in <code>support-services/datafeeder/datadir/datafeeder/</code> folder.</p>`,12),d=[n];function o(r,p,h,l,c,k){return s(),a("div",null,d)}const u=e(i,[["render",o]]);export{f as __pageData,u as default};
