openapi: 3.0.1
info:
  title: GeoNetwork 4.2.7 OpenAPI Documentation
  description: This is the description of the GeoNetwork OpenAPI. Use this API to
    manage your catalog.
  contact:
    name: GeoNetwork user mailing list
    url: https://sourceforge.net/p/geonetwork/mailman/geonetwork-users/
    email: geonetwork-users@lists.sourceforge.net
  license:
    name: GPL 2.0
    url: http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  version: 4.2.7
externalDocs:
  description: Learn how to access the catalog using the GeoNetwork REST API.
  url: https://demo.georchestra.org/geonetwork/doc/api
servers:
  - url: "{catalog}/{portal}/api"
    description: My GeoNetwork
    variables:
      catalog:
        description: The GeoNetwork catalog to contact
        enum:
          - https://demo.georchestra.org/geonetwork
          - ../..
        default: https://demo.georchestra.org/geonetwork
      portal:
        description: The thematic portal
        enum:
          - srv
        default: srv
tags:
  - name: site
    description: Catalog operations
  - name: standards
    description: Standard related operations
  - name: mapservices
    description: Mapservices related operations
  - name: harvesters
    description: Harvester operations
  - name: selections
    description: Selection related operations
  - name: tags
    description: Tags operations
  - name: registries
    description: Registries related operations
  - name: operations
    description: Privileges operations
  - name: links
    description: Record link operations
  - name: search
    description: Proxy for Elasticsearch catalog search operations
  - name: userfeedback
    description: User feedback
  - name: pages
    description: Static pages inside GeoNetwork
  - name: related
    description: Related records
  - name: tools
    description: Utility operations
  - name: status
    description: Workflow status operations
  - name: formatters
    description: Formatter admin operations
  - name: languages
    description: Languages operations
  - name: atom
    description: ATOM
  - name: formatters
    description: Formatter operations
  - name: customstyle
    description: Functionalities for custom styling
  - name: processes
    description: Processing operations
  - name: groups
    description: Groups operations
  - name: sources
    description: Source catalogue operations
  - name: records
    description: Metadata record operations
  - name: mapservers
    description: Mapservers related operations
  - name: userselections
    description: User selections related operations
  - name: logos
    description: Logos operations
  - name: me
    description: Me operations
  - name: identifiers
    description: Identifiers operations
  - name: usersearches
    description: User custom searches operations
  - name: regions
    description: Regions operations
  - name: ui
    description: User interface configuration operations
  - name: users
    description: User operations
paths:
  /site/indexing:
    get:
      tags:
        - site
      summary: Is indexing?
      operationId: isIndexing
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /registries/crs/types:
    get:
      tags:
        - registries
      summary: Get list of CRS type
      operationId: getCrsTypes
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of CRS types.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                    - CoordinateReferenceSystem
                    - VerticalCRS
                    - GeographicCRS
                    - ProjectedCRS
  /i18n/packages:
    get:
      tags:
        - tools
      summary: Get list of translation packages.
      operationId: getTranslationsPackage
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
  /site/info/isCasEnabled:
    get:
      tags:
        - site
      summary: Is CAS enabled?
      operationId: isCasEnabled
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /records/validate:
    put:
      tags:
        - records
      summary: Validate one or more records
      description: Update validation status for all records.
      operationId: validateRecords
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
          example: true
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
        "201":
          description: Records validated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
    delete:
      tags:
        - records
      summary: Clear validation status of one or more records
      operationId: cleanValidationStatus
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Records validation status cleared.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
  /sitemap:
    get:
      tags:
        - site
      summary: Get sitemap
      operationId: getSitemap
      parameters:
        - name: format
          in: query
          description: Format (xml or html).
          required: false
          schema:
            type: string
            default: html
        - name: doc
          in: query
          description: page.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Site map.
  /records/sharing:
    get:
      tags:
        - records
      summary: Get record sharing settings
      operationId: getSharingSettings
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingResponse'
        "200":
          description: Return a default array of group and operations that can be
            used to set record sharing properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingResponse'
    put:
      tags:
        - records
      summary: Set sharing settings for one or more records
      description: See record sharing for more details.
      operationId: share
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharingParameter'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Report about updated privileges.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
  /userfeedback:
    get:
      tags:
        - userfeedback
      summary: 'Finds a list of user feedback records. '
      description: ' This list will include also the draft user feedback if the client
        is logged as reviewer.'
      operationId: getUserComments
      parameters:
        - name: metadataUuid
          in: query
          description: Metadata record UUID.
          required: false
          schema:
            type: string
            default: ""
        - name: size
          in: query
          description: Maximum number of feedback to return.
          required: false
          schema:
            type: integer
            format: int32
            default: -1
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserFeedbackDTO'
    post:
      tags:
        - userfeedback
      summary: Creates a user feedback
      description: Creates a user feedback in draft status if the user is not logged
        in.
      operationId: newUserFeedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFeedbackDTO'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
  /status/{type}:
    get:
      tags:
        - status
      summary: Get status by type
      operationId: getStatusByType
      parameters:
        - name: type
          in: path
          description: Type
          required: true
          schema:
            type: string
            enum:
              - workflow
              - task
              - event
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusValue'
  /i18n/db/translations/{key}:
    put:
      tags:
        - tools
      summary: Add or update database translations for a key.
      description: Database translations can be used to customize labels in the UI
        for different languages.
      operationId: addTranslationsFor
      parameters:
        - name: key
          in: path
          description: Untranslated key for which translations are provided.
          required: true
          schema:
            type: string
        - name: replace
          in: query
          description: Set to `true` to erase all existing translations for that key
          required: false
          schema:
            type: boolean
      requestBody:
        description: An object where keys are valid 3-letter language codes (e.g.
          `eng` or `fre`) and values are custom translations for the corresponding
          language.
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
            example:
              eng: my translation
              ger: meine \DCbersetzung
              fre: ma traduction
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
    delete:
      tags:
        - tools
      summary: Delete database translations.
      description: Delete custom translations stored in the database.
      operationId: deleteTranslations
      parameters:
        - name: key
          in: path
          description: Untranslated key for which all translations will be deleted.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
  /site:
    get:
      tags:
        - site
      summary: Get site (or portal) description
      operationId: getSiteOrPortalDescription
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Site description.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsListResponse'
  /records/samples:
    put:
      tags:
        - records
      summary: Add samples
      description: Add sample records for one or more schemas. Samples are defined
        for each standard in the samples folder as MEF files.
      operationId: addSamples
      parameters:
        - name: schema
          in: query
          description: Schema identifiers
          required: true
          schema:
            type: array
            items:
              type: string
          example: iso19139
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Return a report of what has been done.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
        "403":
          description: Operation not allowed. Only Administrators can access it.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
  /sources/{sourceIdentifier}:
    put:
      tags:
        - sources
      summary: Update a source
      operationId: updateSource
      parameters:
        - name: sourceIdentifier
          in: path
          description: Source identifier
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Source not found.
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            '*/*':
              schema:
                type: string
        "204":
          description: Source updated.
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
        - sources
      summary: Remove a source
      operationId: deleteSource
      parameters:
        - name: sourceIdentifier
          in: path
          description: Source identifier
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Administrators can access it.
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Source deleted.
          content:
            '*/*':
              schema:
                type: string
  /records/importfrommap:
    post:
      tags:
        - records
      summary: Add a map metadata record from OGC OWS context
      description: Add record in the catalog by uploading a map context.
      operationId: insertOgcMapContextFile
      parameters:
        - name: title
          in: query
          description: A map title
          required: true
          schema:
            type: string
        - name: recordAbstract
          in: query
          description: A map abstract
          required: false
          schema:
            type: string
        - name: xml
          in: query
          description: OGC OWS context as string
          required: false
          schema:
            type: string
        - name: filename
          in: query
          description: OGC OWS context file name
          required: false
          schema:
            type: string
        - name: url
          in: query
          description: OGC OWS context URL
          required: false
          schema:
            type: string
        - name: viewerUrl
          in: query
          description: A map viewer URL to visualize the map
          required: false
          schema:
            type: string
        - name: overview
          in: query
          description: Map overview as PNG (base64 encoded)
          required: false
          schema:
            type: string
        - name: overviewFilename
          in: query
          description: Map overview filename
          required: false
          schema:
            type: string
        - name: topic
          in: query
          description: Topic category
          required: false
          schema:
            type: string
        - name: publishToAll
          in: query
          description: Publish record.
          required: false
          schema:
            type: boolean
            default: false
        - name: uuidProcessing
          in: query
          description: Record identifier processing.
          required: false
          schema:
            type: string
            enum:
              - GENERATEUUID
              - NOTHING
              - OVERWRITE
              - REMOVE_AND_REPLACE
            default: NOTHING
        - name: group
          in: query
          description: The group the record is attached to.
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
        "201":
          description: Report about imported records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
  /site/index/commit:
    get:
      tags:
        - site
      summary: Index commit
      operationId: indexCommit
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
    put:
      tags:
        - site
      summary: Force to commit pending documents in index.
      description: May be used when indexing task is hanging.
      operationId: commitIndexChanges
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Changes committed.
  /mapservers/{mapserverId}:
    get:
      tags:
        - mapservers
      summary: Get a mapserver
      operationId: getMapserver
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnonymousMapserver'
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnonymousMapserver'
    put:
      tags:
        - mapservers
      summary: Update a mapserver
      operationId: updateMapserver
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapServer'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "204":
          description: Mapserver updated.
        "403":
          description: Operation not allowed. Only Reviewvers can access it.
    delete:
      tags:
        - mapservers
      summary: Remove a mapserver
      operationId: deleteMapserver
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "204":
          description: Mapserver removed.
        "403":
          description: Operation not allowed. Only Reviewvers can access it.
  /site/index/synchronized:
    get:
      tags:
        - site
      summary: Index synchronized with database
      operationId: indexAndDbSynchronizationStatus
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
  /registries/actions/entries/synchronize:
    get:
      tags:
        - registries
      summary: Preview updated matching entries in records
      description: "Scan one or more records for element matching the XPath provided\
        \ and then check if this element is available in the directory. If Found,\
        \ the element from the directory update the element in the record and optionally\
        \ text or attribute value properties are preserved using propertiesToCopy.\
        \ Elements can be lost if not existing in the directory entry (eg. from an\
        \ gex:Extent directory containing only description and bounding polygon, the\
        \ update can remove temporal element).<br/><br/>The identifier XPath is used\
        \ to find a match. An optional filtercan be added to restrict search to a\
        \ subset of the directory. If no identifier XPaths is provided, the UUID is\
        \ based on the content of the snippet (hash). It is recommended to use an\
        \ identifier for better matching (eg. ISO19139 contact with different roles\
        \ will not match on the automatic UUID mode)."
      operationId: previewUpdatedRecordEntries
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: xpath
          in: query
          description: XPath of the elements to extract as entry.
          required: true
          schema:
            type: string
          example: .//gmd:CI_ResponsibleParty
        - name: identifierXpath
          in: query
          description: XPath of the element identifier. If not defined a random UUID
            is generated and analysis will not check for duplicates.
          required: false
          schema:
            type: string
          example: '@uuid or .//gmd:electronicMailAddress/gco:CharacterString/text()'
        - name: propertiesToCopy
          in: query
          description: List of XPath of properties to copy from record to matching entry.
            Only support text or attribute eg. ./gmd:role/*/@codeListValue
          required: false
          schema:
            type: array
            items:
              type: string
          example: ./gmd:role/*/@codeListValue
        - name: substituteAsXLink
          in: query
          description: Replace entry by XLink.
          required: false
          schema:
            type: boolean
            default: false
          example: '@uuid'
        - name: fq
          in: query
          description: Filter query for directory search.
          required: false
          schema:
            type: string
          example: groupPublished:IFREMER
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/xml:
              schema:
                type: object
    put:
      tags:
        - registries
      summary: Update matching entries in records
      description: "Scan one or more records for element matching the XPath provided\
        \ and then check if this element is available in the directory. If Found,\
        \ the element from the directory update the element in the record and optionally\
        \ text or attribute value properties are preserved using propertiesToCopy.\
        \ Elements can be lost if not existing in the directory entry (eg. from an\
        \ gex:Extent directory containing only description and bounding polygon, the\
        \ update can remove temporal element).<br/><br/>The identifier XPath is used\
        \ to find a match. An optional filtercan be added to restrict search to a\
        \ subset of the directory. If no identifier XPaths is provided, the UUID is\
        \ based on the content of the snippet (hash). It is recommended to use an\
        \ identifier for better matching (eg. ISO19139 contact with different roles\
        \ will not match on the automatic UUID mode)."
      operationId: updateRecordEntries
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: xpath
          in: query
          description: XPath of the elements to extract as entry.
          required: true
          schema:
            type: string
          example: .//gmd:CI_ResponsibleParty
        - name: identifierXpath
          in: query
          description: XPath of the element identifier. If not defined a random UUID
            is generated and analysis will not check for duplicates.
          required: false
          schema:
            type: string
          example: '@uuid'
        - name: propertiesToCopy
          in: query
          description: List of XPath of properties to copy from record to matching entry.
            Only support text or attribute eg. ./gmd:role/*/@codeListValue
          required: false
          schema:
            type: array
            items:
              type: string
          example: ./gmd:role/*/@codeListValue
        - name: substituteAsXLink
          in: query
          description: Replace entry by XLink.
          required: false
          schema:
            type: boolean
            default: false
        - name: fq
          in: query
          description: Filter query for directory search.
          required: false
          schema:
            type: string
          example: groupPublished:IFREMER
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
  /records/submit:
    put:
      tags:
        - records
      summary: Set the records status to submitted
      operationId: submit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataBatchSubmitParameter'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "400":
          description: Metadata workflow not enabled.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
        "200":
          description: Metadata submitted .
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
  /registries/actions/entries/import/spatial:
    post:
      tags:
        - registries
      summary: Import spatial directory entries
      description: Directory entry (AKA subtemplates) are XML fragments that can be
        inserted in metadata records. Use this service to import geographic extent
        entries from an ESRI Shapefile format.
      operationId: importSpatialEntries
      parameters:
        - name: uuidAttribute
          in: query
          description: "Attribute to use for UUID. If none, random UUID are generated."
          required: false
          schema:
            type: string
        - name: uuidPattern
          in: query
          description: "Pattern to build UUID from. Default is '{{uuid}}'."
          required: false
          schema:
            type: string
            default: "{{uuid}}"
        - name: descriptionAttribute
          in: query
          description: "Attribute to use for extent description. If none, no extent\
          \ description defined. TODO: Add per language desc ?"
          required: false
          schema:
            type: string
        - name: geomProjectionTo
          in: query
          description: geomProjectionTo
          required: false
          schema:
            type: string
        - name: lenient
          in: query
          description: lenient
          required: false
          schema:
            type: boolean
        - name: charset
          in: query
          description: Attribute table charset
          required: false
          schema:
            type: string
            default: ""
        - name: onlyBoundingBox
          in: query
          description: Create only bounding box for each spatial objects.
          required: false
          schema:
            type: boolean
            default: true
        - name: process
          in: query
          description: Process
          required: false
          schema:
            type: string
        - name: schema
          in: query
          description: Schema identifier
          required: false
          schema:
            type: string
        - name: uuidProcessing
          in: query
          description: Record identifier processing.
          required: false
          schema:
            type: string
            enum:
              - GENERATEUUID
              - NOTHING
              - OVERWRITE
              - REMOVE_AND_REPLACE
            default: NOTHING
        - name: group
          in: query
          description: The group the record is attached to.
          required: false
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  type: string
                  description: The ZIP file to upload containing the Shapefile.
                  format: binary
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Directory entries imported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
        "403":
          description: Operation not allowed. Only Reviewvers can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
  /reports/users:
    get:
      tags:
        - records
      summary: Get the list of users "active" during a time period.
      operationId: getActiveUsers
      parameters:
        - name: dateFrom
          in: query
          description: From date of users login date
          required: true
          schema:
            type: string
        - name: dateTo
          in: query
          description: To date of users login date
          required: true
          schema:
            type: string
        - name: groups
          in: query
          description: Group(s) for the users
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of users "active" during a time period.
  /records/{metadataUuid}/popularity:
    get:
      tags:
        - records
      summary: Get record popularity
      operationId: getRecordPopularity
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
          content:
            text/plain:
              schema:
                type: string
        "200":
          description: Popularity.
          content:
            text/plain:
              schema:
                type: string
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            text/plain:
              schema:
                type: string
    post:
      tags:
        - records
      summary: Increase record popularity
      description: Used when a view is based on the search results content and does
        not really access the record. Record is then added to the indexing queue and
        popularity will be updated soon.
      operationId: increaseRecordPopularity
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
          content:
            text/plain:
              schema:
                type: string
        "201":
          description: Popularity updated.
          content:
            text/plain:
              schema:
                type: string
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            text/plain:
              schema:
                type: string
  /userselections/{selectionIdentifier}/{userIdentifier}:
    get:
      tags:
        - userselections
      summary: Get record in a user selection set
      operationId: getSelectionRecords
      parameters:
        - name: selectionIdentifier
          in: path
          description: Selection identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: userIdentifier
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    put:
      tags:
        - userselections
      summary: Add items to a user selection set
      operationId: addToUserSelection
      parameters:
        - name: selectionIdentifier
          in: path
          description: Selection identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: userIdentifier
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: uuid
          in: query
          description: One or more record UUIDs.
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Selection or user or at least one UUID not found.
          content:
            application/json:
              schema:
                type: string
        "201":
          description: Records added to selection set.
          content:
            application/json:
              schema:
                type: string
    delete:
      tags:
        - userselections
      summary: Remove items to a user selection set
      operationId: deleteFromUserSelection
      parameters:
        - name: selectionIdentifier
          in: path
          description: Selection identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: userIdentifier
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: uuid
          in: query
          description: "One or more record UUIDs. If null, remove all."
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            application/json:
              schema:
                type: string
        "204":
          description: Items removed from a set.
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Selection or user not found.
          content:
            application/json:
              schema:
                type: string
  /processes/db/search-and-replace:
    get:
      tags:
        - processes
      summary: Preview of search and replace text.
      description: " When errors occur during processing, the processing report is\
        \ returned in JSON format."
      operationId: previewProcessSearchAndReplace
      parameters:
        - name: useRegexp
          in: query
          description: Use regular expression (may not be supported by all databases
            - tested with H2 and PostgreSQL)
          required: false
          schema:
            type: boolean
            default: false
        - name: search
          in: query
          description: Value to search for
          required: true
          schema:
            type: string
        - name: replace
          in: query
          description: Replacement
          required: false
          schema:
            type: string
            default: ""
        - name: regexpFlags
          in: query
          description: regexpFlags
          required: false
          schema:
            type: string
            default: ""
        - name: diffType
          in: query
          description: "Return differences with diff, diffhtml or patch"
          required: false
          schema:
            type: string
            enum:
              - patch
              - diff
              - diffhtml
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "500":
          description: If one record processed is invalid.
          content:
            '*/*':
              schema:
                type: object
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Processed records.
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
        - processes
      summary: Apply a database search and replace to one or more records
      description: Process a metadata with an XSL transformation declared in the metadata
        schema (See the process folder). Parameters sent to the service are forwarded
        to XSL process.
      operationId: processSearchAndReplace
      parameters:
        - name: useRegexp
          in: query
          description: Use regular expression (may not be supported by all databases
            - tested with H2 and PostgreSQL)
          required: false
          schema:
            type: boolean
            default: false
        - name: search
          in: query
          description: Value to search for
          required: true
          schema:
            type: string
        - name: replace
          in: query
          description: Replacement
          required: false
          schema:
            type: string
            default: ""
        - name: regexpFlags
          in: query
          description: regexpFlags
          required: false
          schema:
            type: string
            default: ""
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: updateDateStamp
          in: query
          description: If true updates the DateStamp (or equivalent in standards different
            to ISO 19139) field in the metadata with the current timestamp
          required: false
          schema:
            type: boolean
            default: true
        - name: index
          in: query
          description: Index after processing
          required: false
          schema:
            type: boolean
            default: true
          example: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XsltMetadataProcessingReport'
        "201":
          description: Report about processed records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XsltMetadataProcessingReport'
  /records/{metadataUuid}/attachments/print-thumbnail:
    put:
      tags:
        - records
      summary: Create an overview using the map print module
      description: <a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/linking-thumbnail.html#generating-a-thumbnail-using-wms-layers'>More
        info</a>
      operationId: saveThumbnail
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: jsonConfig
          in: query
          description: The mapprint module JSON configuration
          required: true
          schema:
            type: string
        - name: rotationAngle
          in: query
          description: The rotation angle of the map
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Thumbnail created.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataResource'
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataResource'
  /records:
    get:
      tags:
        - records
      summary: Get catalog content as RDF. This endpoint supports the same Lucene
        query parameters as for the GUI search.
      description: "."
      operationId: getAsRdf
      parameters:
        - name: from
          in: query
          description: Indicates the start position in a sorted list of matches that
            the client wants to use as the beginning of a page result.
          schema:
            type: integer
            format: int32
            default: 1
        - name: hitsPerPage
          in: query
          description: Indicates the number of hits per page.
          schema:
            type: integer
            format: int32
        - name: any
          in: query
          description: Search key
          schema:
            type: string
        - name: title
          in: query
          description: A search key for the title.
          schema:
            type: string
        - name: facet.q
          in: query
          description: "A search facet in the Lucene index. Use the GeoNetwork GUI search\
          \ to generate the suitable filter values. Example: standard/dcat-ap&createDateYear/2018&sourceCatalog/6d93613e-2b76-4e26-94af-4b4c420a1758\
          \ (filter by creation year and source catalog)."
          schema:
            type: string
        - name: sortBy
          in: query
          description: "Lucene sortBy criteria. Relevant values: relevance, title, changeDate."
          schema:
            type: string
        - name: sortOrder
          in: query
          description: "Sort order. Possible values: reverse."
          schema:
            type: string
        - name: similarity
          in: query
          description: Use the Lucene FuzzyQuery. Values range from 0.0 to 1.0 and defaults
            to 0.8.
          schema:
            type: number
            format: float
            default: 0.8
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return the catalog content as RDF.
        "303":
          description: "Redirect the client to the first in-sequence page resource.\
            \ This happens when the paging parameters (from, hitsPerPage) are not\
            \ included in the request."
    put:
      tags:
        - records
      summary: Add a record
      description: "Add one or more record from an XML fragment, URL or file in a\
        \ folder on the catalog server. When loadingfrom the catalog server folder,\
        \ it might be faster to use a local filesystem harvester."
      operationId: insert
      parameters:
        - name: metadataType
          in: query
          description: The type of record.
          required: false
          schema:
            type: string
            enum:
              - METADATA
              - TEMPLATE
              - SUB_TEMPLATE
              - TEMPLATE_OF_SUB_TEMPLATE
            default: METADATA
        - name: url
          in: query
          description: URL of a file to download and insert.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: serverFolder
          in: query
          description: Server folder where to look for files.
          required: false
          schema:
            type: string
        - name: recursiveSearch
          in: query
          description: (Server folder import only) Recursive search in folder.
          required: false
          schema:
            type: boolean
            default: false
        - name: publishToAll
          in: query
          description: (XML file only and if workflow is not enabled) Publish record.
          required: false
          schema:
            type: boolean
            default: false
        - name: assignToCatalog
          in: query
          description: (MEF file only) Assign to current catalog.
          required: false
          schema:
            type: boolean
            default: false
        - name: uuidProcessing
          in: query
          description: Record identifier processing.
          required: false
          schema:
            type: string
            enum:
              - GENERATEUUID
              - NOTHING
              - OVERWRITE
              - REMOVE_AND_REPLACE
            default: NOTHING
        - name: group
          in: query
          description: The group the record is attached to.
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: Tags to assign to the record.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: rejectIfInvalid
          in: query
          description: Validate the record first and reject it if not valid.
          required: false
          schema:
            type: boolean
            default: false
        - name: transformWith
          in: query
          description: XSL transformation to apply to the record.
          required: false
          schema:
            type: string
            default: _none_
        - name: schema
          in: query
          description: "Force the schema of the record. If not set, schema autodetection\
          \ is used (and is the preferred method)."
          required: false
          schema:
            type: string
        - name: allowEditGroupMembers
          in: query
          description: "Is editable by group members with editor profile? If not, only\
          \ the author and administrator can edit the record."
          required: false
          schema:
            type: boolean
            default: false
        - name: extra
          in: query
          description: (experimental) Add extra information to the record.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/xml:
            schema:
              type: string
              description: XML fragment.
          application/json:
            schema:
              type: string
              description: XML fragment.
          application/x-www-form-urlencoded:
            schema:
              type: string
              description: XML fragment.
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
        "201":
          description: Report about imported records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
    post:
      tags:
        - records
      summary: Add a record from XML or MEF/ZIP file
      description: Add record in the catalog by uploading files.
      operationId: insertFile
      parameters:
        - name: metadataType
          in: query
          description: The type of record.
          required: false
          schema:
            type: string
            enum:
              - METADATA
              - TEMPLATE
              - SUB_TEMPLATE
              - TEMPLATE_OF_SUB_TEMPLATE
            default: METADATA
        - name: file
          in: query
          description: XML or MEF file to upload
          required: false
          schema:
            type: array
            items:
              type: string
              format: binary
        - name: uuidProcessing
          in: query
          description: Record identifier processing.
          required: false
          schema:
            type: string
            enum:
              - GENERATEUUID
              - NOTHING
              - OVERWRITE
              - REMOVE_AND_REPLACE
            default: NOTHING
        - name: group
          in: query
          description: The group the record is attached to.
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: Tags to assign to the record.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: rejectIfInvalid
          in: query
          description: Validate the record first and reject it if not valid.
          required: false
          schema:
            type: boolean
            default: false
        - name: publishToAll
          in: query
          description: (XML file only) Publish record.
          required: false
          schema:
            type: boolean
            default: false
        - name: assignToCatalog
          in: query
          description: (MEF file only) Assign to current catalog.
          required: false
          schema:
            type: boolean
            default: false
        - name: transformWith
          in: query
          description: XSL transformation to apply to the record.
          required: false
          schema:
            type: string
            default: _none_
        - name: schema
          in: query
          description: "Force the schema of the record. If not set, schema autodetection\
          \ is used (and is the preferred method)."
          required: false
          schema:
            type: string
        - name: extra
          in: query
          description: (experimental) Add extra information to the record.
          required: false
          schema:
            type: string
        - name: allowEditGroupMembers
          in: query
          description: "Is editable by group members with editor profile? If not, only\
          \ the author and administrator can edit the record."
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
        "201":
          description: Report about imported records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
    delete:
      tags:
        - records
      summary: Delete one or more records
      description: 'User MUST be able to edit the record to delete it. '
      operationId: deleteRecords
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: withBackup
          in: query
          description: Backup first the record as MEF in the metadata removed folder.
          required: false
          schema:
            type: boolean
            default: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
        "204":
          description: Report about deleted records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
  /records/tags:
    put:
      tags:
        - records
      summary: Add or remove tags to one or more records
      operationId: tagRecords
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: id
          in: query
          description: Tag identifier
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: removeId
          in: query
          description: Tag identifier to remove.
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: clear
          in: query
          description: Clear all before adding new ones
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
        "201":
          description: Report about updated records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
    delete:
      tags:
        - records
      summary: Delete tags to one or more records
      operationId: deleteTagForRecords
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: id
          in: query
          description: Tag identifier
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
        "201":
          description: Report about removed records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
  /records/{metadataUuid}/tags:
    get:
      tags:
        - records
      summary: Get record tags
      description: Tags are used to classify information.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/tag-information/tagging-with-categories.html'>More
        info</a>
      operationId: getRecordTags
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Record tags.
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/MetadataCategory'
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/MetadataCategory'
    put:
      tags:
        - records
      summary: Add tags to a record
      operationId: tagRecord
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: Tag identifier
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: clear
          in: query
          description: Clear all before adding new ones
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
        "201":
          description: Record tags added.
    delete:
      tags:
        - records
      summary: Delete tags of a record
      operationId: deleteTags
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: "Tag identifier. If none, all tags are removed."
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "204":
          description: Record tags removed.
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
  /pages/{language}/{pageId}/content:
    get:
      tags:
        - pages
      summary: Return the static html content identified by pageId
      description: <a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More
        info</a>
      operationId: getPageContent
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
        - name: pageId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Page not found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Page found
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            '*/*':
              schema:
                type: string
  /site/logging:
    get:
      tags:
        - site
      summary: Get log files
      operationId: getLogFiles
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogFileResponse'
  /registries/crs/{id}:
    get:
      tags:
        - registries
      summary: Get CRS
      operationId: getCrs
      parameters:
        - name: id
          in: path
          description: CRS identifier
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: CRS not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crs'
            application/xml:
              schema:
                $ref: '#/components/schemas/Crs'
        "200":
          description: CRS details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crs'
            application/xml:
              schema:
                $ref: '#/components/schemas/Crs'
  /regions:
    get:
      tags:
        - regions
      summary: Get list of regions
      operationId: getRegions
      parameters:
        - name: label
          in: query
          required: false
          schema:
            type: string
        - name: categoryId
          in: query
          required: false
          schema:
            type: string
        - name: maxRecords
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: -1
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of regions.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ListRegionsResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ListRegionsResponse'
  /formatters/{schema}/{formatter}:
    get:
      tags:
        - formatters
      summary: Download a formatter as ZIP
      operationId: downloadFormatter
      parameters:
        - name: formatter
          in: path
          required: true
          schema:
            type: string
        - name: schema
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
    delete:
      tags:
        - formatters
      summary: Delete a formatter
      operationId: deleteFormatter
      parameters:
        - name: formatter
          in: path
          required: true
          schema:
            type: string
        - name: schema
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "204":
          description: No Content
  /selections/{bucket}:
    get:
      tags:
        - selections
      summary: Get current selection
      operationId: get
      parameters:
        - name: bucket
          in: path
          description: Bucket name
          required: true
          schema:
            type: string
          example: metadata
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
    put:
      tags:
        - selections
      summary: Select one or more items
      operationId: add
      parameters:
        - name: bucket
          in: path
          description: Bucket name
          required: true
          schema:
            type: string
          example: metadata
        - name: uuid
          in: query
          description: "One or more record UUIDs. If null, select all in current search\
          \ if bucket name is 'metadata' (TODO: remove this limitation?)."
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
    delete:
      tags:
        - selections
      summary: Clear selection or remove items
      operationId: clear
      parameters:
        - name: bucket
          in: path
          description: Selection bucket name
          required: true
          schema:
            type: string
          example: metadata
        - name: uuid
          in: query
          description: One or more record UUIDs
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
  /records/{metadataUuid}/editor:
    get:
      tags:
        - records
      summary: Edit a record
      description: Return HTML form for editing.
      operationId: startEditing
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: currTab
          in: query
          description: Tab
          required: false
          schema:
            type: string
            default: ""
        - name: withAttributes
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: The editor form.
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
    post:
      tags:
        - records
      summary: Save edits
      description: Save the HTML form content.
      operationId: saveEdits
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: tab
          in: query
          description: Tab
          required: false
          schema:
            type: string
            default: simple
        - name: withAttributes
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: withValidationErrors
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: minor
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: status
          in: query
          description: Submit for review directly after save.
          required: false
          schema:
            type: string
            default: "1"
        - name: commit
          in: query
          description: Save current edits.
          required: false
          schema:
            type: boolean
            default: false
        - name: terminate
          in: query
          description: Save and terminate session.
          required: false
          schema:
            type: boolean
            default: false
        - name: data
          in: query
          description: "Record as XML. TODO: rename xml"
          required: false
          schema:
            type: string
            default: ""
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: The editor form.
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
    delete:
      tags:
        - records
      summary: Cancel edits
      description: Cancel current editing session.
      operationId: cancelEdits
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
        "204":
          description: Editing session cancelled.
  /identifiers:
    get:
      tags:
        - identifiers
      summary: Get identifier templates
      description: Identifier templates are used to create record UUIDs havind a particular
        structure. The template will be used when user creates a new record. The template
        identifier to use is defined in the administration > settings.
      operationId: getIdentifiers
      parameters:
        - name: userDefinedOnly
          in: query
          description: Only user defined ones
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of identifier templates.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetadataIdentifierTemplate'
        "403":
          description: Operation not allowed. Only Editor can access it.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetadataIdentifierTemplate'
    put:
      tags:
        - identifiers
      summary: Add an identifier template
      operationId: addIdentifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataIdentifierTemplate'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Identifier template created.
          content:
            application/json:
              schema:
                type: integer
                format: int32
        "403":
          description: Operation not allowed. Only Editor can access it.
          content:
            application/json:
              schema:
                type: integer
                format: int32
  /records/{metadataUuid}/extents.png:
    get:
      tags:
        - records
      summary: Get record extents as image
      description: |
        A rendering of the geometry as a png. If no background is specified the image will be transparent. In getMap the envelope of the geometry is calculated then it is expanded by a factor.  That factor is the size of the map.  This allows the map to be slightly bigger than the geometry allowing some context to be shown. This parameter allows different factors to be chosen per scale level.
        Proportion is the proportion of the world that the geometry covers (bounds of WGS84)/(bounds of geometry in WGS84)

        Named backgrounds allow the background parameter to be a simple key and the complete URL will be looked up from this list of named backgrounds
      operationId: getAllRecordExtentAsImage
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: mapsrs
          in: query
          description: (optional) the background map projection. If not passed uses
            the region/getmap/mapproj setting. If the setting is not set defaults to
            EPSG:4326
          required: false
          schema:
            type: string
        - name: width
          in: query
          description: (optional) width of the image that is created. Only one of width
            and height are permitted
          required: false
          schema:
            type: integer
            format: int32
            default: 300
        - name: height
          in: query
          description: (optional) height of the image that is created. Only one of width
            and height are permitted
          required: false
          schema:
            type: integer
            format: int32
        - name: background
          in: query
          description: "(optional) URL for loading a background image for regions or\
          \ a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml).\
          \ A WMS GetMap request is the typical example. The URL must be parameterized\
          \ with the following parameters: minx, maxx, miny, maxy, width, height"
          required: false
          schema:
            type: string
            default: settings
        - name: fillColor
          in: query
          description: "(optional) Fill color with format RED,GREEN,BLUE,ALPHA"
          required: false
          schema:
            type: string
            default: "0,0,0,50"
        - name: strokeColor
          in: query
          description: "(optional) Stroke color with format RED,GREEN,BLUE,ALPHA"
          required: false
          schema:
            type: string
            default: "0,0,0,255"
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            image/png:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /records/backups/latest:
    get:
      tags:
        - records
      summary: Download MEF backup archive
      description: The backup contains all metadata not harvested including templates.
      operationId: downloadBackup
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
          content:
            application/zip:
              schema:
                type: string
                format: binary
  /logos:
    get:
      tags:
        - logos
      summary: Get all logos
      description: "Logos are used for the catalog, the groups logos, and harvester\
        \ icons. Logos are stored in the data directory in <dataDirectory>/resources/images/harvesting.<br/>\
        \ Records are attached to a source. A source can be the local catalog or a\
        \ harvester node. When a source is created, its logo is located in the images/logos\
        \ folder with the source UUID as filename. For some sources the logo can be\
        \ automatically retrieved (eg. when harvesting GeoNetwork catalogs). For others,\
        \ the logo is usually manually defined when configuring the harvester."
      operationId: getLogos
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                uniqueItems: true
                type: array
                items:
                  type: string
    post:
      tags:
        - logos
      summary: Add a logo
      operationId: addLogo
      parameters:
        - name: file
          in: query
          description: The logo image to upload
          required: true
          schema:
            type: array
            items:
              type: string
              format: binary
        - name: overwrite
          in: query
          description: Overwrite if exists
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            application/json:
              schema:
                type: string
        "201":
          description: Logo added.
          content:
            application/json:
              schema:
                type: string
  /formatters/{schema}/{formatter}/files:
    get:
      tags:
        - formatters
      summary: Get formatter files
      operationId: getFormatterFiles
      parameters:
        - name: formatter
          in: path
          required: true
          schema:
            type: string
        - name: schema
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /mapservers/{mapserverId}/records/{metadataUuid}:
    get:
      tags:
        - mapservers
      summary: 'Check metadata mapserver resource is published '
      operationId: getMapserverResource
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          schema:
            type: string
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: resource
          in: query
          description: Resource name (could be a file or a db connection)
          required: true
          schema:
            type: string
        - name: metadataTitle
          in: query
          description: Metadata title
          required: false
          schema:
            type: string
            default: ""
        - name: metadataAbstract
          in: query
          description: Metadata abstract
          required: false
          schema:
            type: string
            default: ""
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            text/plain:
              schema:
                type: string
    put:
      tags:
        - mapservers
      summary: Publish a metadata resource in a mapserver
      operationId: publishMapserverResource
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          schema:
            type: string
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: resource
          in: query
          description: Resource name (could be a file or a db connection)
          required: true
          schema:
            type: string
        - name: metadataTitle
          in: query
          description: Metadata title
          required: false
          schema:
            type: string
            default: ""
        - name: metadataAbstract
          in: query
          description: Metadata abstract
          required: false
          schema:
            type: string
            default: ""
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            text/plain:
              schema:
                type: string
    delete:
      tags:
        - mapservers
      summary: Remove a metadata mapserver resource
      operationId: deleteMapserverResource
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          schema:
            type: string
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: resource
          in: query
          description: Resource name (could be a file or a db connection)
          required: true
          schema:
            type: string
        - name: metadataTitle
          in: query
          description: Metadata title
          required: false
          schema:
            type: string
            default: ""
        - name: metadataAbstract
          in: query
          description: Metadata abstract
          required: false
          schema:
            type: string
            default: ""
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            text/plain:
              schema:
                type: string
  /registries/actions/entries/collect:
    get:
      tags:
        - registries
      summary: Preview directory entries extracted from records
      description: "Scan one or more records for element matching the XPath provided\
        \ and save them as directory entries (ie. subtemplate).<br/><br/>Only records\
        \ that the current user can edit are analyzed.<br/><br/>Examples:<br/>For\
        \ ISO19115-3 records, use .//cit:CI_Responsibility and compute identifier\
        \ based on email with .//cit:electronicMailAddress/*/text() to create a contact\
        \ directory."
      operationId: previewExtractedEntries
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: xpath
          in: query
          description: XPath of the elements to extract as entry.
          required: true
          schema:
            type: string
          example: .//gmd:CI_ResponsibleParty
        - name: identifierXpath
          in: query
          description: XPath of the element identifier. If not defined a random UUID
            is generated and analysis will not check for duplicates.
          required: false
          schema:
            type: string
          example: '@uuid'
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/xml:
              schema:
                type: object
    put:
      tags:
        - registries
      summary: Extracts directory entries from records
      description: "Scan one or more records for element matching the XPath provided\
        \ and save them as directory entries (ie. subtemplate).<br/><br/>Only records\
        \ that the current user can edit are analyzed.<br/><br/>Examples:<br/>For\
        \ ISO19115-3 records, use .//cit:CI_Responsibility and compute identifier\
        \ based on email with .//cit:electronicMailAddress/*/text() to create a contact\
        \ directory."
      operationId: extractEntries
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: xpath
          in: query
          description: XPath of the elements to extract as entry.
          required: true
          schema:
            type: string
          example: .//gmd:CI_ResponsibleParty
        - name: identifierXpath
          in: query
          description: XPath of the element identifier. If not defined a random UUID
            is generated and analysis will not check for duplicates.
          required: false
          schema:
            type: string
          example: '@uuid'
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
  /records/links:
    get:
      tags:
        - links
      summary: Get record links
      operationId: getRecordLinks
      parameters:
        - name: filter
          in: query
          description: "Filter, e.g. \"{url: 'png', lastState: 'ko', records: 'e421',\
          \ groupId: 12}\", lastState being 'ok'/'ko'/'unknown'"
          required: false
          schema:
            $ref: '#/components/schemas/JSONObject'
        - name: groupIdFilter
          in: query
          description: "Optional, filter links to records published in that group."
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: groupOwnerIdFilter
          in: query
          description: "Optional, filter links to records created in that group."
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: page
          in: query
          description: Results page you want to retrieve (0..N)
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: Number of records per page.
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. "
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageLink'
    post:
      tags:
        - links
      summary: Get record links
      operationId: getRecordLinksPost
      parameters:
        - name: filter
          in: query
          description: "Filter, e.g. \"{url: 'png', lastState: 'ko', records: 'e421',\
          \ groupId: 12}\", lastState being 'ok'/'ko'/'unknown'"
          required: false
          schema:
            $ref: '#/components/schemas/JSONObject'
        - name: groupIdFilter
          in: query
          description: "Optional, filter links to records published in that group."
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: groupOwnerIdFilter
          in: query
          description: "Optional, filter links to records created in that group."
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: page
          in: query
          description: Results page you want to retrieve (0..N)
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: Number of records per page.
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. "
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageLink'
    delete:
      tags:
        - links
      summary: Remove all links and status history
      operationId: purgeAll
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /tools/migration/steps/{stepName}:
    put:
      tags:
        - tools
      summary: Call a migration step
      operationId: callStep
      parameters:
        - name: stepName
          in: path
          description: Class name to execute corresponding to a migration step. See
            DatabaseMigrationTask.
          required: true
          schema:
            type: string
          example: org.fao.geonet.api.records.attachments.MetadataResourceDatabaseMigration
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            text/plain:
              schema:
                type: string
  /processes/search-and-replace:
    post:
      tags:
        - processes
      summary: Search and replace values in one or more ISO19139 records
      description: "Service to apply replacements to one or more records.\n To define\
        \ a replacement, send the following parameters:\n * mdsection-139815551372=metadata\n\
        \ * mdfield-1398155513728=id.contact.individualName\n * replaceValue-1398155513728=Juan\n\
        \ * searchValue-1398155513728=Jose\n\n<br/>Batch editing can also be used\
        \ for similar works."
      operationId: searchAndReplace
      parameters:
        - name: process
          in: query
          required: false
          schema:
            type: string
            default: massive-content-update
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: isTesting
          in: query
          description: Test only (ie. metadata are not saved). Return the report only.
          required: false
          schema:
            type: boolean
            default: false
        - name: isCaseInsensitive
          in: query
          description: Case insensitive search.
          required: false
          schema:
            type: boolean
            default: false
        - name: vacuumMode
          in: query
          description: "'record' to apply vacuum.xsl, 'element' to remove empty elements.\
          \ Empty to not affect empty elements."
          required: false
          schema:
            type: string
            default: ""
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Replacements applied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataReplacementProcessingReport'
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataReplacementProcessingReport'
      deprecated: true
  /records/{metadataUuid}/editor/attributes:
    delete:
      tags:
        - records
      summary: Delete attribute
      operationId: deleteAttribute
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: ref
          in: query
          description: Reference of the attribute to remove.
          required: true
          schema:
            type: string
        - name: displayAttributes
          in: query
          description: Should attributes be shown on the editor snippet?
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "204":
          description: Attribute removed.
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
  /standards/{schema}/editor/associatedpanel/config/{name}.json:
    get:
      tags:
        - standards
      summary: Get editor associated resources panel configuration
      operationId: getEditorAssociatedPanelConfiguration
      parameters:
        - name: schema
          in: path
          description: Schema identifier
          required: true
          schema:
            type: string
          example: iso19139
        - name: name
          in: path
          description: Configuration identifier
          required: true
          schema:
            type: string
          example: default
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /records/{metadataUuid}/editor/elements:
    put:
      tags:
        - records
      summary: Add element
      operationId: addElement
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: ref
          in: query
          description: Reference of the insertion point.
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Name of the element to add (with prefix)
          required: true
          schema:
            type: string
        - name: child
          in: query
          description: Use geonet:attribute for attributes or child name.
          required: false
          schema:
            type: string
        - name: displayAttributes
          in: query
          description: Should attributes be shown on the editor snippet?
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Element added.
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
    delete:
      tags:
        - records
      summary: Delete element
      operationId: deleteElement
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: ref
          in: query
          description: Reference of the element to remove.
          required: true
          schema:
            type: array
            items:
              type: string
        - name: parent
          in: query
          description: Name of the parent.
          required: true
          schema:
            type: string
        - name: displayAttributes
          in: query
          description: Should attributes be shown on the editor snippet?
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "204":
          description: Element removed.
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
  /site/logging/activity:
    get:
      tags:
        - site
      summary: Get last activity
      operationId: getLastActivity
      parameters:
        - name: lines
          in: query
          description: Number of lines to return
          required: false
          schema:
            type: integer
            format: int32
            default: 2000
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /users/{userIdentifier}.png:
    get:
      tags:
        - users
      summary: Get user identicon
      operationId: getUserIdenticon
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier.
          required: true
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: Size.
          required: false
          schema:
            type: integer
            format: int32
            default: 18
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
  /userfeedback/{uuid}/publish:
    get:
      tags:
        - userfeedback
      summary: Publishes a feedback
      description: For reviewers
      operationId: publishFeedback
      parameters:
        - name: uuid
          in: path
          description: User feedback UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                type: string
        "204":
          description: User feedback published.
          content:
            application/json:
              schema:
                type: string
        "403":
          description: Operation not allowed. Only Reviewvers can access it.
          content:
            application/json:
              schema:
                type: string
  /records/{metadataUuid}/status/{type}:
    get:
      tags:
        - records
      summary: Get record status history by type
      operationId: getRecordStatusHistoryByType
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: type
          in: path
          description: Type
          required: true
          schema:
            type: string
            enum:
              - workflow
              - task
              - event
        - name: details
          in: query
          required: false
          schema:
            type: boolean
        - name: sortOrder
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content: {}
  /search/records/_msearch:
    post:
      tags:
        - search
      summary: Search endpoint
      description: See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html
        for search parameters details.
      operationId: msearch
      parameters:
        - name: bucket
          in: query
          required: false
          schema:
            type: string
            default: metadata
        - name: relatedType
          in: query
          description: "Type of related resource. If none, no associated resource returned."
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - children
                - parent
                - brothersAndSisters
                - siblings
                - associated
                - services
                - datasets
                - fcats
                - hasfeaturecats
                - sources
                - hassources
                - related
                - onlines
                - thumbnails
            default: []
      requestBody:
        description: JSON request based on Elasticsearch API.
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
  /records/{metadataUuid}/attachments/{resourceId}:
    get:
      tags:
        - records
      summary: Get a metadata resource
      operationId: getResource
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          schema:
            type: string
          example: 43d7c186-2187-4bcd-8843-41e575a5ef56
        - name: resourceId
          in: path
          description: The resource identifier (ie. filename)
          required: true
          schema:
            type: string
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: true
          example: true
        - name: size
          in: query
          description: Size (only applies to images). From 1px to 2048px.
          required: false
          schema:
            type: integer
            format: int32
          example: 200
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to download the
            resource.
        "201":
          description: Record attachment.
    delete:
      tags:
        - records
      summary: Delete a metadata resource
      operationId: delResource
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          schema:
            type: string
          example: 43d7c186-2187-4bcd-8843-41e575a5ef56
        - name: resourceId
          in: path
          description: The resource identifier (ie. filename)
          required: true
          schema:
            type: string
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: false
          example: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
        "204":
          description: Attachment visibility removed.
    patch:
      tags:
        - records
      summary: Update the metadata resource visibility
      operationId: patchResource
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          schema:
            type: string
          example: 43d7c186-2187-4bcd-8843-41e575a5ef56
        - name: resourceId
          in: path
          description: The resource identifier (ie. filename)
          required: true
          schema:
            type: string
        - name: visibility
          in: query
          description: The visibility
          required: true
          schema:
            type: string
            enum:
              - public
              - private
          example: public
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: false
          example: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Attachment visibility updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResource'
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResource'
  /tools/ogc/sld:
    get:
      tags:
        - tools
      summary: Get the list of SLD available
      operationId: getSLD
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    post:
      tags:
        - tools
      summary: Generate a SLD with a new filter
      description: "Get the current SLD for the requested layers, add new filters\
        \ in, save the SLD and return the new SLD URL."
      operationId: buildSLD
      parameters:
        - name: url
          in: query
          description: The WMS server URL
          required: true
          schema:
            type: string
        - name: layers
          in: query
          description: The layers
          required: true
          schema:
            type: string
        - name: filters
          in: query
          description: The filters in JSON
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            text/plain:
              schema:
                type: string
    delete:
      tags:
        - tools
      summary: Remove all SLD files
      description: Clean all SLD generated previously
      operationId: deteleSLD
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
  /selections:
    get:
      tags:
        - selections
      summary: Get current selections
      operationId: getSelectionsAndSize
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
  /records/{metadataUuid}/doi/checkDoiUrl:
    get:
      tags:
        - records
      summary: Check the DOI URL created based on current configuration and pattern.
      operationId: checkDoiUrl
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: DOI URL created.
          content:
            text/plain:
              schema:
                type: string
        "404":
          description: Metadata not found.
          content:
            text/plain:
              schema:
                type: string
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: Service unavailable.
          content:
            text/plain:
              schema:
                type: string
  /records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}:
    delete:
      tags:
        - records
      summary: Delete a record status
      operationId: deleteRecordStatus
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: statusId
          in: path
          description: Status identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: changeDate
          in: path
          description: Change date
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Status not found.
        "403":
          description: Operation not allowed. Only Administrators can access it.
        "204":
          description: Status removed.
  /groups/{groupId}/logo:
    get:
      tags:
        - groups
      summary: Get the group logo image.
      description: If last-modified header is present it is used to check if the logo
        has been modified since the header date. If it hasn't been modified returns
        an empty 304 Not Modified response. If modified returns the image. If the
        group has no logo then returns a transparent 1x1 px PNG image.
      operationId: getGroupLogo
      parameters:
        - name: groupId
          in: path
          description: Group identifier
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
  /atom/feeds:
    get:
      tags:
        - atom
      summary: Get ATOM feeds
      operationId: feeds_1
      parameters:
        - name: fileIdentifier
          in: query
          description: fileIdentifier
          required: false
          schema:
            type: string
            default: ""
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Get a list of feeds.
        "204":
          description: Not authenticated.
  /usersearches/{searchIdentifier}:
    get:
      tags:
        - usersearches
      summary: Get custom search
      operationId: getUserCustomSearch
      parameters:
        - name: searchIdentifier
          in: path
          description: User search identifier
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchDto'
    put:
      tags:
        - usersearches
      summary: Update a user search
      operationId: updateCustomUserSearch
      parameters:
        - name: searchIdentifier
          in: path
          description: User search identifier
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSearchDto'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "204":
          description: User search  updated.
    delete:
      tags:
        - usersearches
      summary: Delete a user search
      description: Deletes a user search by identifier.
      operationId: deleteUserCustomSerach
      parameters:
        - name: searchIdentifier
          in: path
          description: Search identifier.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /pages/{language}/{pageId}:
    get:
      tags:
        - pages
      summary: Return the page object details except the content
      description: <a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More
        info</a>
      operationId: getPage
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
        - name: pageId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Page not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProperties'
        "200":
          description: Page found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProperties'
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProperties'
    put:
      tags:
        - pages
      summary: Update a page
      description: <a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More
        info</a>
      operationId: updatePage
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
        - name: pageId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageProperties'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
        "200":
          description: Page changes saved
    delete:
      tags:
        - pages
      summary: Delete a page
      description: <a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More
        info</a>
      operationId: deletePage
      parameters:
        - name: language
          in: path
          required: true
          schema:
            type: string
        - name: pageId
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Page removed
        "404":
          description: Page not found
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
  /tags/{tagIdentifier}:
    get:
      tags:
        - tags
      summary: Get a tag
      operationId: getTag
      parameters:
        - name: tagIdentifier
          in: path
          description: Tag identifier
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Tag details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataCategory'
    put:
      tags:
        - tags
      summary: Update a tag
      operationId: updateTag
      parameters:
        - name: tagIdentifier
          in: path
          description: Tag identifier
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataCategory'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            '*/*':
              schema:
                type: string
        "204":
          description: Tag updated.
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
        - tags
      summary: Remove a tag
      operationId: deleteTag
      parameters:
        - name: tagIdentifier
          in: path
          description: Tag identifier
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            '*/*':
              schema:
                type: string
        "204":
          description: Tag removed.
          content:
            '*/*':
              schema:
                type: string
  /registries/vocabularies:
    put:
      tags:
        - registries
      summary: Uploads a new thesaurus from URL or Registry
      description: Uploads a new thesaurus.
      operationId: uploadThesaurusFromUrl
      parameters:
        - name: url
          in: query
          description: "If set, try to download from the Internet."
          required: false
          schema:
            type: string
        - name: registryUrl
          in: query
          description: "If set, try to download from a registry."
          required: false
          schema:
            type: string
        - name: registryType
          in: query
          description: "If using registryUrl, then define the type of registry. If not\
          \ set, default mode is re3gistry."
          required: false
          schema:
            type: string
            enum:
              - re3gistry
              - ldRegistry
        - name: registryLanguage
          in: query
          description: Languages to download from a registry.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: type
          in: query
          description: Local or external (default).
          required: false
          schema:
            type: string
            enum:
              - external
              - local
            default: external
        - name: dir
          in: query
          description: "Type of thesaurus, usually one of the ISO thesaurus type codelist\
          \ value. Default is theme."
          required: false
          schema:
            type: string
            default: theme
        - name: stylesheet
          in: query
          description: XSL to be use to convert the thesaurus before load. Default _none_.
          required: false
          schema:
            type: string
            default: _none_
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThesaurusInfo'
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Thesaurus uploaded in SKOS format.
          content:
            text/xml:
              schema:
                type: string
        "403":
          description: Operation not allowed. Only Reviewvers can access it.
          content:
            text/xml:
              schema:
                type: string
    post:
      tags:
        - registries
      summary: Uploads a new thesaurus from a file
      description: Uploads a new thesaurus.
      operationId: uploadThesaurus
      parameters:
        - name: type
          in: query
          description: Local or external (default).
          required: false
          schema:
            type: string
            enum:
              - external
              - local
            default: external
        - name: dir
          in: query
          description: "Type of thesaurus, usually one of the ISO thesaurus type codelist\
          \ value. Default is theme."
          required: false
          schema:
            type: string
            default: theme
        - name: stylesheet
          in: query
          description: XSL to be use to convert the thesaurus before load. Default _none_.
          required: false
          schema:
            type: string
            default: _none_
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: "If set, do a file upload."
                  format: binary
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Thesaurus uploaded in SKOS format.
          content:
            text/xml:
              schema:
                type: string
        "403":
          description: Operation not allowed. Only Reviewvers can access it.
          content:
            text/xml:
              schema:
                type: string
  /records/{metadataUuid}/validate/inspire/testsuites:
    get:
      tags:
        - records
      summary: Get test suites available.
      description: "TG13, TG2, ..."
      operationId: getTestSuites
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of testsuites available.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
  /registries/vocabularies/{thesaurus}:
    get:
      tags:
        - registries
      summary: Download a thesaurus by name
      description: Download the thesaurus in SKOS format.
      operationId: getThesaurus
      parameters:
        - name: thesaurus
          in: path
          description: Thesaurus to download.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "200":
          description: Thesaurus in SKOS format.
    put:
      tags:
        - registries
      summary: Updates the information of a local thesaurus
      description: Updates the information of a local thesaurus.
      operationId: updateThesaurus
      parameters:
        - name: thesaurus
          in: path
          description: Thesaurus to update.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThesaurusInfo'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Administrators can access it.
        "201":
          description: Thesaurus created.
    delete:
      tags:
        - registries
      summary: Delete a thesaurus by name
      description: Delete a thesaurus.
      operationId: deleteThesaurus
      parameters:
        - name: thesaurus
          in: path
          description: Thesaurus to delete.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
        "200":
          description: Thesaurus deleted.
  /identifiers/{identifier}:
    put:
      tags:
        - identifiers
      summary: Update an identifier template
      operationId: updateIdentifier
      parameters:
        - name: identifier
          in: path
          description: Identifier template identifier
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataIdentifierTemplate'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "403":
          description: Operation not allowed. Only Editor can access it.
        "204":
          description: Identifier template updated.
    delete:
      tags:
        - identifiers
      summary: Remove an identifier template
      operationId: deleteIdentifier
      parameters:
        - name: identifier
          in: path
          description: Identifier template identifier
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "403":
          description: Operation not allowed. Only Editor can access it.
        "204":
          description: Template identifier removed.
  /records/{metadataUuid}/sharing:
    get:
      tags:
        - records
      summary: Get record sharing settings
      description: Return current sharing options for a record.
      operationId: getRecordSharingSettings
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: The record sharing settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingResponse'
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingResponse'
    put:
      tags:
        - records
      summary: Set record sharing
      description: "Privileges are assigned by group. User needs to be able to edit\
        \ a record to set sharing settings. For reserved group (ie. Internet, Intranet\
        \ & Guest), user MUST be reviewer of one group. For other group, if Only set\
        \ privileges to user's groups is set in catalog configuration user MUST be\
        \ a member of the group.<br/>Clear first allows to unset all operations first\
        \ before setting the new ones.Clear option does not remove reserved groups\
        \ operation if user is not an administrator, a reviewer or the owner of the\
        \ record.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/publishing/managing-privileges.html'>More\
        \ info</a>"
      operationId: share_1
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharingParameter'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
        "204":
          description: Settings updated.
  /users/groups:
    get:
      tags:
        - users
      summary: Retrieve all user groups
      operationId: retrieveAllUserGroups
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroupsResponse'
  /records/{metadataUuid}/editor/elements/{direction}:
    put:
      tags:
        - records
      summary: Reorder element
      operationId: addElement_1
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: ref
          in: query
          description: Reference of the element to move.
          required: true
          schema:
            type: string
        - name: direction
          in: path
          description: Direction
          required: true
          schema:
            type: string
            enum:
              - up
              - down
        - name: displayAttributes
          in: query
          description: Should attributes be shown on the editor snippet?
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Element reordered.
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
  /usersearches/allpaginated:
    get:
      tags:
        - usersearches
      summary: Get user custom searches for all users (paginated)
      operationId: getAllUserCustomSearchesPage
      parameters:
        - name: featuredType
          in: query
          description: Featured  type search.
          required: false
          schema:
            type: string
            enum:
              - HOME
              - EDITOR_BOARD
        - name: search
          in: query
          required: false
          schema:
            type: string
            default: ""
        - name: offset
          in: query
          description: From page
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: Number of records to return
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserSearchResponse'
  /site/info/proxy:
    get:
      tags:
        - site
      summary: Get proxy configuration details
      description: Get the proxy configuration.
      operationId: getProxyConfiguration
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Proxy configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyConfiguration'
  /groups:
    get:
      tags:
        - groups
      summary: Get groups
      description: "The catalog contains one or more groups. By default, there is\
        \ 3 reserved groups (Internet, Intranet, Guest) and a sample group.<br/>This\
        \ service returns all catalog groups when not authenticated or when current\
        \ is user is an administrator. The list can contains or not reserved groups\
        \ depending on the parameters.<br/>When authenticated, return user groups\
        \ optionally filtered on a specific user profile."
      operationId: getGroups
      parameters:
        - name: withReservedGroup
          in: query
          description: "Including Internet, Intranet, Guest groups or not"
          required: false
          schema:
            type: boolean
            default: false
        - name: profile
          in: query
          description: For a specific profile
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
    put:
      tags:
        - groups
      summary: Add a group
      description: Return the identifier of the group created.
      operationId: addGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            application/json:
              schema:
                type: integer
                format: int32
        "400":
          description: Group with that id or name already exist.
          content:
            application/json:
              schema:
                type: integer
                format: int32
        "201":
          description: Group created.
          content:
            application/json:
              schema:
                type: integer
                format: int32
  /tools/ogc/filter:
    post:
      tags:
        - tools
      summary: Generate an OGC filter
      description: "From a JSON filter, return an OGC filter expression."
      operationId: buildFilter
      parameters:
        - name: filters
          in: query
          description: The filters in JSON
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            application/xml:
              schema:
                type: string
  /languages/{langCode}:
    put:
      tags:
        - languages
      summary: Add a language
      description: Add all default translations from all *Desc tables in the database.
        This operation will only add translations for a default catalog installation.
        Defaults can be customized in SQL scripts located in WEB-INF/classes/setup/sql/data/*.
      operationId: addLanguages
      parameters:
        - name: langCode
          in: path
          description: ISO 3 letter code
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Language translations added.
        "403":
          description: Operation not allowed. Only Administrator can access it.
        "404":
          description: Resource not found. eg. No SQL file available for that langugae.
    delete:
      tags:
        - languages
      summary: Remove a language
      description: "Delete all translations from all *Desc tables in the database.\
        \ Warning: This will also remove all translations you may have done to those\
        \ objects (eg. custom groups)."
      operationId: deleteLanguage
      parameters:
        - name: langCode
          in: path
          description: ISO 3 letter code
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "403":
          description: Operation not allowed. Only Administrator can access it.
        "204":
          description: Language translations removed.
  /atom/describe/service/{metadataUuid}:
    get:
      tags:
        - atom
      summary: Describe service
      operationId: describe
      parameters:
        - name: metadataUuid
          in: path
          description: metadataUuid
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Feeds.
          content: {}
        "204":
          description: Not authenticated.
          content: {}
  /userselections:
    get:
      tags:
        - userselections
      summary: Get list of user selection sets
      operationId: getSelectionList
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Selection'
    put:
      tags:
        - userselections
      summary: Add a user selection set
      operationId: createPersistentSelectionType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Selection'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            application/json:
              schema:
                type: string
        "201":
          description: Selection created.
          content:
            application/json:
              schema:
                type: string
        "400":
          description: A selection with that id or name already exist.
          content:
            application/json:
              schema:
                type: string
  /groups/{groupIdentifier}:
    get:
      tags:
        - groups
      summary: Get group
      description: Return the requested group details.
      operationId: getGroup
      parameters:
        - name: groupIdentifier
          in: path
          description: Group identifier
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    put:
      tags:
        - groups
      summary: Update a group
      operationId: updateGroup
      parameters:
        - name: groupIdentifier
          in: path
          description: Group identifier
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
        "204":
          description: Group updated.
    delete:
      tags:
        - groups
      summary: Remove a group
      description: "Remove a group by first removing sharing settings, link to users\
        \ and finally reindex all affected records."
      operationId: deleteGroup
      parameters:
        - name: groupIdentifier
          in: path
          description: Group identifier.
          required: true
          schema:
            type: integer
            format: int32
        - name: force
          in: query
          description: Force removal even if records are assigned to that group.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
        "204":
          description: Group removed.
  /i18n/db/translations:
    get:
      tags:
        - tools
      summary: List database translations (used to overrides client application translations).
      operationId: getDbTranslations
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: "{ < * >: string }"
              example:
                translationKey1: Translated Key One
                translationKey2: Translated Key Two
                translationKey3: Translated Key Two
    put:
      tags:
        - tools
      summary: Add or update all database translations.
      operationId: addTranslations
      parameters:
        - name: replace
          in: query
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Translations'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
    delete:
      tags:
        - tools
      summary: Remove all database translations.
      operationId: removeAllTranslations
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
  /i18n/cache:
    delete:
      tags:
        - tools
      summary: Clean translation packages cache.
      operationId: cleanTranslationsPackagesCache
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
  /records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/before:
    get:
      tags:
        - records
      summary: Get saved content from the status record before changes
      operationId: showStatusBefore
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: statusId
          in: path
          description: Status identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: changeDate
          in: path
          description: Change date
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/xml:
              schema:
                type: string
        "200":
          description: Previous version of the record.
          content:
            application/xml:
              schema:
                type: string
  /records/unpublish:
    put:
      tags:
        - records
      summary: Un-publish one or more records
      description: See record sharing for more details.
      operationId: unpublish
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: Publication type
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Report about updated privileges.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
  /records/zip:
    get:
      tags:
        - records
      summary: Get a set of metadata records as ZIP
      description: Metadata Exchange Format (MEF) is returned. MEF is a ZIP file containing
        the metadata as XML and some others files depending on the version requested.
        See http://geonetwork-opensource.org/manuals/trunk/eng/users/annexes/mef-format.html.
      operationId: exportAsMef
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: format
          in: query
          description: MEF file format.
          required: false
          schema:
            type: string
            enum:
              - simple
              - partial
              - full
            default: full
        - name: withRelated
          in: query
          description: With related records (parent and service).
          required: false
          schema:
            type: boolean
            default: false
        - name: withXLinksResolved
          in: query
          description: Resolve XLinks in the records.
          required: false
          schema:
            type: boolean
            default: true
        - name: withXLinkAttribute
          in: query
          description: Preserve XLink URLs in the records.
          required: false
          schema:
            type: boolean
            default: false
        - name: addSchemaLocation
          in: query
          required: false
          schema:
            type: boolean
            default: true
        - name: approved
          in: query
          description: Download the approved version
          required: false
          schema:
            type: boolean
            default: true
        - name: Accept
          in: header
          required: false
          schema:
            type: string
            default: application/x-gn-mef-2-zip
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return requested records as ZIP.
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
  /formatters/{schema}/{formatter}/files/{file}:
    get:
      tags:
        - formatters
      summary: Get formatter file content
      operationId: getFormatterFileContent
      parameters:
        - name: formatter
          in: path
          required: true
          schema:
            type: string
        - name: schema
          in: path
          required: true
          schema:
            type: string
        - name: file
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
    post:
      tags:
        - formatters
      summary: Update formatter file
      operationId: updateFormatterFile
      parameters:
        - name: formatter
          in: path
          required: true
          schema:
            type: string
        - name: schema
          in: path
          required: true
          schema:
            type: string
        - name: file
          in: path
          required: true
          schema:
            type: string
        - name: data
          in: query
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
  /customstyle:
    get:
      tags:
        - customstyle
      summary: Get CssStyleSettings
      description: This returns a map with all Less variables.
      operationId: getCssStyle
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
    post:
      tags:
        - customstyle
      summary: Saves custom style variables.
      description: Saves custom style variables.
      operationId: saveCssStyle
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
  /site/info/transforms:
    get:
      tags:
        - site
      summary: Get XSL tranformations available
      description: XSL transformations may be applied while importing or harvesting
        records.
      operationId: getXslTransformations
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: XSLT available.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /site/info/readonly:
    get:
      tags:
        - site
      summary: Is in read-only mode?
      operationId: isReadOnly
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /records/publish:
    put:
      tags:
        - records
      summary: Publish one or more records
      description: See record sharing for more details.
      operationId: publish
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: Publication type
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Report about updated privileges.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
  /sources:
    get:
      tags:
        - sources
      summary: Get all sources
      description: "Sources are the local catalogue, subportal, external catalogue\
        \ (when importing MEF files) or harvesters."
      operationId: getSubPortals_1
      parameters:
        - name: group
          in: query
          description: Group owner of the source (only applies to subportal).
          required: false
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of source catalogues.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
    put:
      tags:
        - sources
      summary: Add a source
      operationId: addSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Source'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Source created.
          content:
            text/plain:
              schema:
                type: string
        "403":
          description: Operation not allowed. Only Administrators can access it.
          content:
            text/plain:
              schema:
                type: string
  /standards/batchconfiguration:
    get:
      tags:
        - standards
      summary: Get batch editor configuration for standards
      operationId: getConfigurations
      parameters:
        - name: schema
          in: query
          description: Schema identifiers
          required: false
          schema:
            type: array
            items:
              type: string
          example: iso19139
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Batch editor configuration.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/BatchEditing'
  /standards/{schema}/codelists:
    get:
      tags:
        - standards
      summary: Get multiple codelist translations
      description: All translations are combined in the same object. No distinction
        by codelist. This is useful if you need lots of codelists terms to be loaded.
      operationId: getCodelistsTranslations
      parameters:
        - name: schema
          in: path
          description: Schema identifier
          required: true
          schema:
            type: string
          example: iso19139
        - name: codelist
          in: query
          description: Codelist element name or alias
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /records/{metadataUuid}/related:
    get:
      tags:
        - records
      summary: Get record related resources
      description: "Retrieve related services, datasets, onlines, thumbnails, sources,\
        \ ... to this records.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More\
        \ info</a>"
      operationId: getAssociatedResources
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: "Type of related resource. If none, all resources are returned."
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - children
                - parent
                - brothersAndSisters
                - siblings
                - associated
                - services
                - datasets
                - fcats
                - hasfeaturecats
                - sources
                - hassources
                - related
                - onlines
                - thumbnails
            default: []
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: true
          example: true
        - name: start
          in: query
          description: Start offset for paging. Default 1. Only applies to related metadata
            records (ie. not for thumbnails).
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: rows
          in: query
          description: Number of rows returned. Default 100.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return the associated resources.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/RelatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RelatedResponse'
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/RelatedResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RelatedResponse'
  /reports/datadownloads:
    get:
      tags:
        - records
      summary: Get list of metadata file downloads
      operationId: getReportDataDownloads
      parameters:
        - name: dateFrom
          in: query
          description: From date of the metadata downloads
          required: true
          schema:
            type: string
        - name: dateTo
          in: query
          description: To date of the metadata downloads
          required: true
          schema:
            type: string
        - name: groups
          in: query
          description: Metadata group(s)
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of metadata file downloads.
  /records/{metadataUuid}/doi:
    put:
      tags:
        - records
      summary: Submit a record to the Datacite metadata store in order to create a
        DOI.
      operationId: createDoi
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Metadata not found.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "500":
          description: Service unavailable.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "201":
          description: Check status of the report.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
    delete:
      tags:
        - records
      summary: "Remove a DOI (this is not recommended, DOI are supposed to be persistent\
        \ once created. This is mainly here for testing)."
      operationId: unregisterDoi
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Metadata or DOI not found.
          content:
            application/json:
              schema:
                type: string
        "204":
          description: DOI unregistered.
          content:
            application/json:
              schema:
                type: string
        "403":
          description: Operation not allowed. Only Administrators can access it.
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Service unavailable.
          content:
            application/json:
              schema:
                type: string
  /processes/reports:
    get:
      tags:
        - processes
      summary: Get current process reports
      description: "When processing, the report is stored in memory and allows to\
        \ retrieve progress repport during processing. Usually, process reports are\
        \ returned by the synchronous processing operation."
      operationId: getProcessReport
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of reports returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessingReport'
        "403":
          description: Operation not allowed. Only authenticated user can access it.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessingReport'
    delete:
      tags:
        - processes
      summary: Clear process reports list
      operationId: delete
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only authenticated user can access it.
        "204":
          description: Report registry cleared.
  /records/{metadataUuid}/doi/checkPreConditions:
    get:
      tags:
        - records
      summary: Check that a record can be submitted to DataCite for DOI creation.
        DataCite requires some fields to be populated.
      operationId: checkDoiStatus
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Record can be proposed to DataCite.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: boolean
        "404":
          description: Metadata not found.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: boolean
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: boolean
        "500":
          description: Service unavailable.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: boolean
        "400":
          description: Record does not meet preconditions. Check error message.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: boolean
  /records/{metadataUuid}:
    get:
      tags:
        - records
      summary: Get a metadata record
      description: "Depending on the accept header the appropriate formatter is used.\
        \ When requesting a ZIP, a MEF version 2 file is returned. When requesting\
        \ HTML, the default formatter is used."
      operationId: getRecord
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: Accept
          in: header
          description: "Accept header should indicate which is the appropriate format\
          \ to return. It could be text/html, application/xml, application/zip, ...If\
          \ no appropriate Accept header found, the XML format is returned."
          required: true
          schema:
            type: string
            default: application/xml
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
          content:
            text/html:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            application/xhtml+xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
            application/pdf:
              schema:
                type: string
            application/zip:
              schema:
                type: string
            application/x-gn-mef-1-zip:
              schema:
                type: string
            application/x-gn-mef-2-zip:
              schema:
                type: string
            '*/*':
              schema:
                type: string
        "200":
          description: Return the record.
          content:
            text/html:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            application/xhtml+xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
            application/pdf:
              schema:
                type: string
            application/zip:
              schema:
                type: string
            application/x-gn-mef-1-zip:
              schema:
                type: string
            application/x-gn-mef-2-zip:
              schema:
                type: string
            '*/*':
              schema:
                type: string
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            text/html:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            application/xhtml+xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
            application/pdf:
              schema:
                type: string
            application/zip:
              schema:
                type: string
            application/x-gn-mef-1-zip:
              schema:
                type: string
            application/x-gn-mef-2-zip:
              schema:
                type: string
            '*/*':
              schema:
                type: string
    delete:
      tags:
        - records
      summary: Delete a record
      description: "User MUST be able to edit the record to delete it. By default,\
        \ a backup is made in ZIP format. After that, the record attachments are removed,\
        \ the document removed from the index and then from the database."
      operationId: deleteRecord
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: withBackup
          in: query
          description: Backup first the record as MEF in the metadata removed folder.
          required: false
          schema:
            type: boolean
            default: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "204":
          description: Record deleted.
        "401":
          description: This template is referenced
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
  /records/{metadataUuid}/publish:
    put:
      tags:
        - records
      summary: Set privileges for ALL group to publish the metadata for all users.
      operationId: publish_1
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: Publication type
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
        "204":
          description: Settings updated.
  /records/pdf:
    get:
      tags:
        - records
      summary: Get a set of metadata records as PDF
      description: "The PDF is a short summary of each records with links to the complete\
        \ metadata record in different format (ie. landing page on the portal, XML)"
      operationId: exportAsPdf
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return requested records as PDF.
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
  /records/{metadataUuid}/featureCatalog:
    get:
      tags:
        - records
      summary: Returns a map to decode attributes in a dataset (from the associated
        feature catalog)
      operationId: getFeatureCatalog
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: true
          example: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return the associated resources.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/FeatureResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureResponse'
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/FeatureResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureResponse'
  /formatters:
    get:
      tags:
        - formatters
      summary: Get formatters
      operationId: listFormatters
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: string
        - name: uuid
          in: query
          required: false
          schema:
            type: string
        - name: schema
          in: query
          required: false
          schema:
            type: string
            default: all
        - name: pluginOnly
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: publishedOnly
          in: query
          required: false
          schema:
            type: boolean
            default: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormatterDataResponse'
    post:
      tags:
        - formatters
      summary: Import a XSLT formatter (usually a zip named 'schema-formatter.zip')
      operationId: addFormatter
      parameters:
        - name: file
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              format: binary
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
  /site/info/build:
    get:
      tags:
        - site
      summary: Get build details
      description: To know when and how this version of the application was built.
      operationId: getSystemInfo
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Build info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
  /records/{metadataUuid}/formatters/{formatterId}:
    get:
      tags:
        - records
      summary: Get a formatted metadata record
      operationId: getRecordFormattedBy
      parameters:
        - name: Accept
          in: header
          description: Formatter type to use.
          required: false
          schema:
            type: string
            default: text/html
        - name: formatterId
          in: path
          required: true
          schema:
            type: string
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: width
          in: query
          required: false
          schema:
            type: string
            enum:
              - _25
              - _50
              - _75
              - _100
            default: _100
        - name: mdpath
          in: query
          required: false
          schema:
            type: string
        - name: language
          in: query
          description: Optional language ISO 3 letters code to override HTTP Accept-language
            header.
          required: false
          schema:
            type: string
        - name: output
          in: query
          required: false
          schema:
            type: string
            enum:
              - txt
              - html
              - xml
              - json
              - jsonld
              - pdf
              - testpdf
        - name: approved
          in: query
          description: Download the approved version
          required: false
          schema:
            type: boolean
            default: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
  /records/{metadataUuid}/userfeedback:
    get:
      tags:
        - userfeedback
      summary: 'Finds a list of user feedback for a specific records. '
      description: ' This list will include also the draft user feedback if the client
        is logged as reviewer.'
      operationId: getUserCommentsOnARecord
      parameters:
        - name: metadataUuid
          in: path
          description: Metadata record UUID.
          required: true
          schema:
            type: string
        - name: size
          in: query
          description: Maximum number of feedback to return.
          required: false
          schema:
            type: integer
            format: int32
            default: -1
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserFeedbackDTO'
  /pages:
    get:
      tags:
        - pages
      summary: List all pages according to the filters
      description: <a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More
        info</a>
      operationId: listPages
      parameters:
        - name: language
          in: query
          required: false
          schema:
            type: string
        - name: section
          in: query
          required: false
          schema:
            type: string
            enum:
              - TOP
              - FOOTER
              - MENU
              - SUBMENU
              - CUSTOM_MENU1
              - CUSTOM_MENU2
              - CUSTOM_MENU3
        - name: format
          in: query
          required: false
          schema:
            type: string
            enum:
              - LINK
              - HTML
              - HTMLPAGE
              - TEXT
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PageProperties'
    put:
      tags:
        - pages
      summary: Add a page
      description: <p>Is not possible to load a link and a file at the same time.</p>
        <a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More
        info</a>
      operationId: addPageWithoutUploadingFile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageProperties'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "500":
          description: File not valid
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Wrong parameters are provided
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Page saved
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: "Page already in the system: use PUT"
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
        - pages
      summary: Add a page by uploading a file
      description: <p>Is not possible to load a link and a file at the same time.</p>
        <a href='https://geonetwork-opensource.org/manuals/4.0.x/en/customizing-application/adding-static-pages.html'>More
        info</a>
      operationId: addPageUploadingFile
      parameters:
        - name: language
          in: query
          required: true
          schema:
            type: string
        - name: pageId
          in: query
          required: true
          schema:
            type: string
        - name: sections
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - TOP
                - FOOTER
                - MENU
                - SUBMENU
                - CUSTOM_MENU1
                - CUSTOM_MENU2
                - CUSTOM_MENU3
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - PUBLIC
              - PUBLIC_ONLY
              - PRIVATE
              - HIDDEN
        - name: format
          in: query
          required: false
          schema:
            type: string
            enum:
              - LINK
              - HTML
              - HTMLPAGE
              - TEXT
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - data
              type: object
              properties:
                data:
                  type: string
                  format: binary
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "500":
          description: File not valid
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Wrong parameters are provided
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Page saved
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: "Page already in the system: use PUT"
          content:
            '*/*':
              schema:
                type: string
  /i18n/packages/{pack}:
    get:
      tags:
        - tools
      summary: Get a translation package.
      operationId: getTranslationsPackage_1
      parameters:
        - name: pack
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /records/{metadataUuid}/status:
    get:
      tags:
        - records
      summary: Get record status history
      operationId: getRecordStatusHistory
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: details
          in: query
          required: false
          schema:
            type: boolean
        - name: sortOrder
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content: {}
    put:
      tags:
        - records
      summary: Set the record status
      operationId: setStatus
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataStatusParameter'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "400":
          description: Metadata workflow not enabled.
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
                  enum:
                    - UPDATED
                    - UNCHANGED
                    - DELETED
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
                  enum:
                    - UPDATED
                    - UNCHANGED
                    - DELETED
        "201":
          description: Status updated.
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
                  enum:
                    - UPDATED
                    - UNCHANGED
                    - DELETED
    delete:
      tags:
        - records
      summary: Delete all record status
      operationId: deleteAllRecordStatus
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Status not found.
        "403":
          description: Operation not allowed. Only Administrators can access it.
        "204":
          description: Status removed.
  /users/{userIdentifier}/actions/forget-password:
    post:
      tags:
        - users
      summary: Resets user password
      description: Resets the user password.
      operationId: resetUserPassword
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetDto'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /reports/metadataupdated:
    get:
      tags:
        - records
      summary: Get the updated metadata during a period.
      operationId: getReportUpdatedMetadata
      parameters:
        - name: dateFrom
          in: query
          description: From date of metadata change date
          required: true
          schema:
            type: string
        - name: dateTo
          in: query
          description: To date of metadata change date
          required: true
          schema:
            type: string
        - name: groups
          in: query
          description: Metadata group(s)
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Updated metadata during a period.
  /records/versions:
    put:
      tags:
        - records
      summary: (Experimental) Enable version control for one or more records
      operationId: enableVersionControlForRecords
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
  /harvesters/{harvesterUuid}/assign:
    post:
      tags:
        - harvesters
      summary: Assign harvester records to a new source
      operationId: assignHarvestedRecordToSource
      parameters:
        - name: harvesterUuid
          in: path
          description: The harvester UUID
          required: true
          schema:
            type: string
        - name: source
          in: query
          description: The target source UUID
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            application/json:
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
        "204":
          description: Harvester records transfered to new source.
          content:
            application/json:
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
  /records/{metadataUuid}/attachments:
    get:
      tags:
        - records
      summary: List all metadata attachments
      description: <a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/using-filestore.html'>More
        info</a>
      operationId: getAllResources
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          schema:
            type: string
          example: 43d7c186-2187-4bcd-8843-41e575a5ef56
        - name: sort
          in: query
          description: Sort by
          required: false
          schema:
            type: string
            enum:
              - type
              - name
            default: name
          example: type
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: true
          example: true
        - name: filter
          in: query
          required: false
          schema:
            type: string
            default: '*.*'
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return the record attachments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetadataResource'
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetadataResource'
    put:
      tags:
        - records
      summary: Create a new resource from a URL for a given metadata
      operationId: putResourceFromURL
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          schema:
            type: string
          example: 43d7c186-2187-4bcd-8843-41e575a5ef56
        - name: visibility
          in: query
          description: The sharing policy
          required: false
          schema:
            type: string
            enum:
              - public
              - private
            default: public
          example: public
        - name: url
          in: query
          description: The URL to load in the store
          required: true
          schema:
            type: string
            format: url
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: false
          example: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Attachment added.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataResource'
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataResource'
    post:
      tags:
        - records
      summary: Create a new resource for a given metadata
      operationId: putResource
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          schema:
            type: string
          example: 43d7c186-2187-4bcd-8843-41e575a5ef56
        - name: visibility
          in: query
          description: The sharing policy
          required: false
          schema:
            type: string
            enum:
              - public
              - private
            default: public
          example: public
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: false
          example: true
      requestBody:
        content:
          application/json:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  type: string
                  description: The file to upload
                  format: binary
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResource'
        "201":
          description: Attachment uploaded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResource'
    delete:
      tags:
        - records
      summary: Delete all uploaded metadata resources
      operationId: delResources
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          schema:
            type: string
          example: 43d7c186-2187-4bcd-8843-41e575a5ef56
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: false
          example: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
        "204":
          description: Attachment added.
  /groups/{groupIdentifier}/users:
    get:
      tags:
        - groups
      summary: Get group users
      operationId: getGroupUsers
      parameters:
        - name: groupIdentifier
          in: path
          description: Group identifier
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "200":
          description: List of users in that group.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /records/{metadataUuid}/query/{savedQuery}:
    post:
      tags:
        - records
      summary: Apply a saved query for this metadata
      description: "All parameters will be substituted to the XPath query. eg. {{protocol}}\
        \ in the XPath expression will be replaced by the protocol parameter provided\
        \ in the request body."
      operationId: applyQuery
      parameters:
        - name: metadataUuid
          in: path
          description: The metadata UUID
          required: true
          schema:
            type: string
          example: 43d7c186-2187-4bcd-8843-41e575a5ef56
        - name: savedQuery
          in: path
          description: The saved query to apply
          required: true
          schema:
            type: string
          example: wfs-indexing-config
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: "List of matching elements. If element are nodes, then they\
            \ are returned as string."
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /records/{metadataUuid}/extents.json:
    get:
      tags:
        - records
      summary: Get list of record extents
      description: |
        A rendering of the geometry as a png. If no background is specified the image will be transparent. In getMap the envelope of the geometry is calculated then it is expanded by a factor.  That factor is the size of the map.  This allows the map to be slightly bigger than the geometry allowing some context to be shown. This parameter allows different factors to be chosen per scale level.
        Proportion is the proportion of the world that the geometry covers (bounds of WGS84)/(bounds of geometry in WGS84)

        Named backgrounds allow the background parameter to be a simple key and the complete URL will be looked up from this list of named backgrounds
      operationId: getAllRecordExtentAsJson
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtentDto'
  /userselections/{selectionIdentifier}:
    put:
      tags:
        - userselections
      summary: Update a user selection set
      operationId: updateUserSelection
      parameters:
        - name: selectionIdentifier
          in: path
          description: Selection identifier
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Selection'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Selection not found.
          content:
            '*/*':
              schema:
                type: string
        "204":
          description: Selection updated.
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
        - userselections
      summary: Remove a user selection set
      operationId: deleteUserSelection
      parameters:
        - name: selectionIdentifier
          in: path
          description: Selection identifier
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Selection not found.
          content:
            '*/*':
              schema:
                type: string
        "204":
          description: Selection removed.
          content:
            '*/*':
              schema:
                type: string
  /logos/{file}:
    get:
      tags:
        - logos
      summary: Get a logo
      operationId: getLogo
      parameters:
        - name: file
          in: path
          description: The logo filename
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
        "200":
          description: Logo returned.
    delete:
      tags:
        - logos
      summary: Remove a logo
      operationId: deleteLogo
      parameters:
        - name: file
          in: path
          description: The logo filename to delete
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
        "204":
          description: Logo removed.
  /pages/config/status:
    get:
      tags:
        - pages
      operationId: getPageStatus
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Page found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                    - PUBLIC
                    - PUBLIC_ONLY
                    - PRIVATE
                    - HIDDEN
  /languages/application:
    get:
      tags:
        - languages
      summary: Get languages available in the application
      description: Languages available in this version of the application. Those that
        you can add using PUT operation and which have SQL script to initialize the
        language.
      operationId: getApplicationLanguages
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Language'
  /search/records/_search:
    post:
      tags:
        - search
      summary: Search endpoint
      description: See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html
        for search parameters details.
      operationId: search
      parameters:
        - name: bucket
          in: query
          required: false
          schema:
            type: string
            default: metadata
        - name: relatedType
          in: query
          description: "Type of related resource. If none, no associated resource returned."
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - children
                - parent
                - brothersAndSisters
                - siblings
                - associated
                - services
                - datasets
                - fcats
                - hasfeaturecats
                - sources
                - hassources
                - related
                - onlines
                - thumbnails
            default: []
      requestBody:
        description: JSON request based on Elasticsearch API.
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
  /site/logging/activity/zip:
    get:
      tags:
        - site
      summary: Get last activity in a ZIP
      operationId: getLastActivityInAZip
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
  /records/{metadataUuid}/status/workflow/last:
    get:
      tags:
        - records
      summary: Get last workflow status for a record
      operationId: getStatus
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Record status.
          content: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content: {}
  /tools/ogc/sld/{id}.{extension}:
    get:
      tags:
        - tools
      summary: Download a SLD
      operationId: downloadSLD
      parameters:
        - name: id
          in: path
          description: The SLD identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: extension
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
  /status:
    get:
      tags:
        - status
      summary: Get status
      operationId: getStatusList
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusValue'
    delete:
      tags:
        - status
      summary: Delete all record history and status
      operationId: deleteAllHistoryAndStatus
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Administrators can access it.
        "204":
          description: Status removed.
  /pages/config/formats:
    get:
      tags:
        - pages
      operationId: getPageFormats
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Page found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                    - LINK
                    - HTML
                    - HTMLPAGE
                    - TEXT
  /site/index:
    put:
      tags:
        - site
      summary: Index
      operationId: index
      parameters:
        - name: reset
          in: query
          description: Drop and recreate index
          required: false
          schema:
            type: boolean
            default: true
        - name: asynchronous
          in: query
          description: Asynchronous mode (only on all records. ie. no selection bucket)
          required: false
          schema:
            type: boolean
            default: false
        - name: havingXlinkOnly
          in: query
          description: Records having only XLinks
          required: false
          schema:
            type: boolean
            default: false
        - name: indices
          in: query
          description: Index. By default only remove record index.
          required: false
          schema:
            type: array
            items:
              type: string
            default:
              - records
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /site/info/staging/{profile}:
    put:
      tags:
        - site
      summary: Update staging profile
      description: "TODO: Needs doc"
      operationId: updateStagingProfile
      parameters:
        - name: profile
          in: path
          required: true
          schema:
            type: string
            enum:
              - testing
              - development
              - production
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "204":
          description: Staging profile saved.
        "403":
          description: Operation not allowed. Only Administrators can access it.
  /usersearches/all:
    get:
      tags:
        - usersearches
      summary: Get user custom searches for all users (no paginated)
      operationId: getAllUserCustomSearches
      parameters:
        - name: featuredType
          in: query
          description: Featured type search.
          required: false
          schema:
            type: string
            enum:
              - HOME
              - EDITOR_BOARD
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearchDto'
  /records/{metadataUuid}/validate/internal:
    put:
      tags:
        - records
      summary: Validate a record
      description: "User MUST be able to edit the record to validate it. FIXME : id\
        \ MUST be the id of the current metadata record in session ?"
      operationId: validateRecord
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: isvalid
          in: query
          description: "Validation status. Should be provided only in case of SUBTEMPLATE\
          \ validation. If provided for another type, throw a BadParameter Exception"
          required: false
          schema:
            type: boolean
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Validation report.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reports'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reports'
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reports'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reports'
  /related:
    get:
      tags:
        - related
      summary: Get record related resources for all requested metadatas
      description: "Retrieve related services, datasets, onlines, thumbnails, sources,\
        \ ... to all requested records.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More\
        \ info</a>"
      operationId: getAssociatedResourcesForRecords
      parameters:
        - name: type
          in: query
          description: "Type of related resource. If none, all resources are returned."
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - children
                - parent
                - brothersAndSisters
                - siblings
                - associated
                - services
                - datasets
                - fcats
                - hasfeaturecats
                - sources
                - hassources
                - related
                - onlines
                - thumbnails
            default: []
        - name: uuid
          in: query
          description: Uuids of the metadatas you request the relations from.
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: true
          example: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return the associated resources.
          content:
            application/xml:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/RelatedResponse'
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/RelatedResponse'
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            application/xml:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/RelatedResponse'
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/RelatedResponse'
  /mapservers:
    get:
      tags:
        - mapservers
      summary: Get mapservers
      description: "Mapservers are used by the catalog to publish record attachments\
        \ (eg. ZIP file with shape) or record associated resources (eg. database table,\
        \ file on the local network) in a remote mapserver like GeoServer or MapServer.\
        \ The catalog communicate with the mapserver using GeoServer REST API."
      operationId: getMapservers
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnonymousMapserver'
    put:
      tags:
        - mapservers
      summary: Add a mapserver
      description: Return the id of the newly created mapserver.
      operationId: addMapserver
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapServer'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Mapserver created.
          content:
            application/json:
              schema:
                type: integer
                format: int32
        "400":
          description: Bad parameters.
          content:
            application/json:
              schema:
                type: integer
                format: int32
        "403":
          description: Operation not allowed. Only Reviewvers can access it.
          content:
            application/json:
              schema:
                type: integer
                format: int32
  /userfeedback/ratingcriteria:
    get:
      tags:
        - userfeedback
      summary: Get list of rating criteria
      operationId: getRatingCriteria
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RatingCriteria'
  /records/{metadataUuid}/query:
    get:
      tags:
        - records
      summary: List saved queries for this metadata
      operationId: getSavedQueries
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Saved query available.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SavedQuery'
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SavedQuery'
  /ui/{uiIdentifier}:
    get:
      tags:
        - ui
      summary: Get a UI configuration
      operationId: getUiConfiguration
      parameters:
        - name: uiIdentifier
          in: path
          description: UI identifier
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: UI configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSetting'
    put:
      tags:
        - ui
      summary: Update a UI configuration
      operationId: updateUiConfiguration
      parameters:
        - name: uiIdentifier
          in: path
          description: UI configuration identifier
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UiSetting'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            '*/*':
              schema:
                type: string
        "204":
          description: UI configuration updated.
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
        - ui
      summary: Remove a UI Configuration
      operationId: deleteUiConfiguration
      parameters:
        - name: uiIdentifier
          in: path
          description: UI configuration identifier
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            '*/*':
              schema:
                type: string
        "204":
          description: UI Configuration removed.
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: UI Configuration not found.
          content:
            '*/*':
              schema:
                type: string
  /operations:
    get:
      tags:
        - operations
      summary: Get operations
      description: "Return the list of operations. Operations are used to define authorization\
        \ per group. Extending the list of default operations (ie. view, dynamic,\
        \ download, editing, notify, featured) might be feasible but is experimental.<br/>\
        \ Featured is not really used anymore (was used in past version for home page\
        \ highlights)."
      operationId: getOperations
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'
  /records/links/analyzeurl:
    post:
      tags:
        - links
      summary: Analyze one or more links
      operationId: analyzeLinks
      parameters:
        - name: url
          in: query
          description: URL
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
  /site/info/notificationLevels:
    get:
      tags:
        - site
      summary: Get notification levels
      operationId: getNotificationLevel
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of notification levels.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                    - statusUserOwner
                    - catalogueAdministrator
                    - catalogueProfileAdministrator
                    - catalogueProfileUserAdmin
                    - catalogueProfileReviewer
                    - catalogueProfileEditor
                    - catalogueProfileRegisteredUser
                    - catalogueProfileGuest
                    - recordProfileReviewer
                    - recordUserAuthor
                    - recordGroupEmail
  /userfeedback/{uuid}:
    get:
      tags:
        - userfeedback
      summary: Finds a specific user feedback
      operationId: getUserComment
      parameters:
        - name: uuid
          in: path
          description: User feedback UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFeedbackDTO'
    delete:
      tags:
        - userfeedback
      summary: Removes a user feedback
      description: Removes a user feedback
      operationId: deleteUserFeedback
      parameters:
        - name: uuid
          in: path
          description: User feedback UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "204":
          description: User feedback removed.
          content:
            application/json:
              schema:
                type: string
        "403":
          description: Operation not allowed. Only Reviewvers can access it.
          content:
            application/json:
              schema:
                type: string
  /records/{testId}/validate/inspire:
    get:
      tags:
        - records
      summary: Check the status of validation with the INSPIRE service.
      description: 'User MUST be able to edit the record to validate it. An INSPIRE
        endpoint must be configured in Settings. If the process is complete an object
        with status is returned. '
      operationId: checkValidation
      parameters:
        - name: testId
          in: path
          description: Test identifier
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Report ready.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "201":
          description: Report not ready.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        "404":
          description: Report id not found.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /users/properties/{property}:
    get:
      tags:
        - users
      summary: Check if a user property already exist
      operationId: checkUserPropertyExist
      parameters:
        - name: property
          in: path
          description: The user property to check
          required: true
          schema:
            type: string
        - name: exist
          in: query
          description: The value to search
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
        "404":
          description: A property with that value already exist.
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
        "200":
          description: Property does not exist.
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
  /registries/vocabularies/import/csv:
    post:
      tags:
        - registries
      summary: Uploads a CSV file and convert it to SKOS format
      description: "CSV file MUST contains columns at least for concept id and label.\
        \ For multilingual thesaurus, consider using columns like label, label_fre,\
        \ label_ita with languages parameter set to [en, fr, it]. Default language\
        \ value is used if translations are empty. The thesaurus filename will be\
        \ the filename of the CSV file (with .rdf extension). It is recommended to\
        \ set the thesaurus title and namespace URL even if default values will be\
        \ used based on the filename. Thesaurus dates are set to the date of import."
      operationId: importCsvAsThesaurus
      parameters:
        - name: type
          in: query
          description: Local or external (default).
          required: false
          schema:
            type: string
            enum:
              - external
              - local
            default: external
        - name: dir
          in: query
          description: "Type of thesaurus, usually one of the ISO thesaurus type codelist\
          \ value. Default is theme."
          required: false
          schema:
            type: string
            default: theme
        - name: encoding
          in: query
          description: Encoding. Default is UTF-8.
          required: false
          schema:
            type: string
            default: UTF-8
        - name: thesaurusNs
          in: query
          description: Thesaurus namespace. Default is filename.
          required: false
          schema:
            type: string
            default: ""
        - name: languages
          in: query
          description: Thesaurus languages
          required: false
          schema:
            type: array
            items:
              type: string
            default:
              - en
        - name: thesaurusTitle
          in: query
          description: Thesaurus title. Default is filename.
          required: false
          schema:
            type: string
            default: ""
        - name: conceptIdColumn
          in: query
          description: Column name for concept id. Default is id.
          required: false
          schema:
            type: string
            default: id
        - name: conceptLabelColumn
          in: query
          description: Column name for concept label. Default is label.
          required: false
          schema:
            type: string
            default: label
        - name: conceptDescriptionColumn
          in: query
          description: Column name for concept description. Default is description.
          required: false
          schema:
            type: string
            default: ""
        - name: conceptBroaderIdColumn
          in: query
          description: Column name for broader concept id. Default is broader.
          required: false
          schema:
            type: string
            default: broader
        - name: conceptNarrowerIdColumn
          in: query
          description: Column name for narrower concept id. Default is narrower.
          required: false
          schema:
            type: string
            default: narrower
        - name: conceptRelatedIdColumn
          in: query
          description: Column name for related concept id. Default is related.
          required: false
          schema:
            type: string
            default: related
        - name: conceptLinkSeparator
          in: query
          description: Separator used when multiple broader/narrower/related ids are
            in the same column. Default is '|'.
          required: false
          schema:
            type: string
            default: \|
        - name: importAsThesaurus
          in: query
          description: Import CSV file as thesaurus if true (detault) or return it in  SKOS
            format.
          required: false
          schema:
            type: boolean
            default: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: "If set, do a file upload."
                  format: binary
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Thesaurus converted and imported in SKOS format.
        "200":
          description: Thesaurus converted and returned in response in SKOS format.
        "403":
          description: Operation not allowed. Only Reviewvers can access it.
  /tags:
    get:
      tags:
        - tags
      summary: Get tags
      operationId: getTags
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of tags.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetadataCategory'
    put:
      tags:
        - tags
      summary: Create a tag
      description: "If labels are not defined, a default label is created with the\
        \ category name for all languages."
      operationId: putTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataCategory'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            '*/*':
              schema:
                type: integer
                format: int32
        "201":
          description: Tag created. Return the new tag identifier.
          content:
            '*/*':
              schema:
                type: integer
                format: int32
  /mapservers/{mapserverId}/auth:
    post:
      tags:
        - mapservers
      summary: Update a mapserver authentication
      description: The remote mapserver REST API may require basic authentication.
        This operation set the username and password.
      operationId: updateMapserver_1
      parameters:
        - name: mapserverId
          in: path
          description: Mapserver identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: username
          in: query
          description: User name
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Password
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
        "204":
          description: Mapserver updated.
        "403":
          description: Operation not allowed. Only Reviewvers can access it.
  /records/{metadataUuid}/validate/inspire:
    put:
      tags:
        - records
      summary: Submit a record to the INSPIRE service for validation.
      description: "User MUST be able to edit the record to validate it. An INSPIRE\
        \ endpoint must be configured in Settings. This activates an asyncronous process,\
        \ this method does not return any report. This method returns an id to be\
        \ used to get the report."
      operationId: validateRecordForInspire
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: testsuite
          in: query
          description: Test suite to run
          required: true
          schema:
            type: string
        - name: mode
          in: query
          description: "Define the encoding of the record to use. By default, ISO19139\
          \ are used as is and ISO19115-3 are converted to ISO19139.If mode = csw,\
          \ a GetRecordById request is used.If mode = any portal id, then a GetRecordById\
          \ request is used on this portal CSW entry point which may define custom\
          \ CSW post processing. See https://github.com/geonetwork/core-geonetwork/pull/4493."
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Metadata not found.
          content:
            text/plain:
              schema:
                type: string
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: Service unavailable.
          content:
            text/plain:
              schema:
                type: string
        "201":
          description: Check status of the report.
          content:
            text/plain:
              schema:
                type: string
  /processes/{process}:
    get:
      tags:
        - processes
      summary: Preview process result applied to one or more records
      description: "Preview result of a process applied to metadata records with an\
        \ XSL transformation declared in the metadata schema (See the process folder).\
        \ Parameters sent to the service are forwarded to XSL process. Append mode\
        \ has 2 limitations. First, it only support a set of records in the same schema.\
        \ Secondly, it does not propagate URL parameters. This mode is mainly used\
        \ to create custom reports based on metadata records content.If process name\
        \ ends with '.csv', the XSL process output a text document which is returned.\
        \ When errors occur during processing, the processing report is returned in\
        \ JSON format."
      operationId: previewProcessRecords
      parameters:
        - name: process
          in: path
          description: Process identifier
          required: true
          schema:
            type: string
        - name: diffType
          in: query
          description: "Return differences with diff, diffhtml or patch"
          required: false
          schema:
            type: string
            enum:
              - patch
              - diff
              - diffhtml
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: appendFirst
          in: query
          description: Append documents before processing
          required: false
          schema:
            type: boolean
            default: false
          example: false
        - name: applyUpdateFixedInfo
          in: query
          description: Apply update fixed info
          required: false
          schema:
            type: boolean
            default: true
          example: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Processed records.
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
        - processes
      summary: Apply a process to one or more records
      description: Process a metadata with an XSL transformation declared in the metadata
        schema (See the process folder). Parameters sent to the service are forwarded
        to XSL process.
      operationId: processRecords
      parameters:
        - name: process
          in: path
          description: Process identifier
          required: true
          schema:
            type: string
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: updateDateStamp
          in: query
          description: If true updates the DateStamp (or equivalent in standards different
            to ISO 19139) field in the metadata with the current timestamp
          required: false
          schema:
            type: boolean
            default: true
        - name: index
          in: query
          description: Index after processing
          required: false
          schema:
            type: boolean
            default: true
          example: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XsltMetadataProcessingReport'
        "201":
          description: Report about processed records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XsltMetadataProcessingReport'
  /harvesters/properties/{property}:
    get:
      tags:
        - harvesters
      summary: Check if a harvester name or host already exist
      operationId: checkHarvesterPropertyExist
      parameters:
        - name: property
          in: path
          description: The harvester property to check
          required: true
          schema:
            type: string
        - name: exist
          in: query
          description: The value to search
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
        "404":
          description: A property with that value already exist.
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
        "200":
          description: Property does not exist.
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - 100 CONTINUE
                  - 101 SWITCHING_PROTOCOLS
                  - 102 PROCESSING
                  - 103 CHECKPOINT
                  - 200 OK
                  - 201 CREATED
                  - 202 ACCEPTED
                  - 203 NON_AUTHORITATIVE_INFORMATION
                  - 204 NO_CONTENT
                  - 205 RESET_CONTENT
                  - 206 PARTIAL_CONTENT
                  - 207 MULTI_STATUS
                  - 208 ALREADY_REPORTED
                  - 226 IM_USED
                  - 300 MULTIPLE_CHOICES
                  - 301 MOVED_PERMANENTLY
                  - 302 FOUND
                  - 302 MOVED_TEMPORARILY
                  - 303 SEE_OTHER
                  - 304 NOT_MODIFIED
                  - 305 USE_PROXY
                  - 307 TEMPORARY_REDIRECT
                  - 308 PERMANENT_REDIRECT
                  - 400 BAD_REQUEST
                  - 401 UNAUTHORIZED
                  - 402 PAYMENT_REQUIRED
                  - 403 FORBIDDEN
                  - 404 NOT_FOUND
                  - 405 METHOD_NOT_ALLOWED
                  - 406 NOT_ACCEPTABLE
                  - 407 PROXY_AUTHENTICATION_REQUIRED
                  - 408 REQUEST_TIMEOUT
                  - 409 CONFLICT
                  - 410 GONE
                  - 411 LENGTH_REQUIRED
                  - 412 PRECONDITION_FAILED
                  - 413 PAYLOAD_TOO_LARGE
                  - 413 REQUEST_ENTITY_TOO_LARGE
                  - 414 URI_TOO_LONG
                  - 414 REQUEST_URI_TOO_LONG
                  - 415 UNSUPPORTED_MEDIA_TYPE
                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                  - 417 EXPECTATION_FAILED
                  - 418 I_AM_A_TEAPOT
                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                  - 420 METHOD_FAILURE
                  - 421 DESTINATION_LOCKED
                  - 422 UNPROCESSABLE_ENTITY
                  - 423 LOCKED
                  - 424 FAILED_DEPENDENCY
                  - 425 TOO_EARLY
                  - 426 UPGRADE_REQUIRED
                  - 428 PRECONDITION_REQUIRED
                  - 429 TOO_MANY_REQUESTS
                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                  - 500 INTERNAL_SERVER_ERROR
                  - 501 NOT_IMPLEMENTED
                  - 502 BAD_GATEWAY
                  - 503 SERVICE_UNAVAILABLE
                  - 504 GATEWAY_TIMEOUT
                  - 505 HTTP_VERSION_NOT_SUPPORTED
                  - 506 VARIANT_ALSO_NEGOTIATES
                  - 507 INSUFFICIENT_STORAGE
                  - 508 LOOP_DETECTED
                  - 509 BANDWIDTH_LIMIT_EXCEEDED
                  - 510 NOT_EXTENDED
                  - 511 NETWORK_AUTHENTICATION_REQUIRED
  /records/validate/inspire:
    put:
      tags:
        - records
      summary: Validate one or more records in INSPIRE validator
      description: Update validation status for all records.
      operationId: validateRecordsInspire
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: mode
          in: query
          description: "Define the encoding of the record to use. By default, ISO19139\
          \ are used as is and ISO19115-3 are converted to ISO19139.If mode = csw,\
          \ a GetRecordById request is used.If mode = any portal id, then a GetRecordById\
          \ request is used on this portal CSW entry point which may define custom\
          \ CSW post processing. See https://github.com/geonetwork/core-geonetwork/pull/4493."
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                type: string
        "201":
          description: Records validated.
          content:
            application/json:
              schema:
                type: string
  /standards/{schema}/codelists/{codelist}/details:
    get:
      tags:
        - standards
      summary: Get codelist details
      operationId: getSchemaCodelistsWithDetails
      parameters:
        - name: schema
          in: path
          description: Schema identifier
          required: true
          schema:
            type: string
          example: iso19139
        - name: codelist
          in: path
          description: Codelist element name or alias
          required: true
          schema:
            type: string
        - name: parent
          in: query
          description: Parent name with namespace which may indicate a more precise
            label as defined in context attribute.
          required: false
          schema:
            type: string
        - name: displayIf
          in: query
          description: Display if condition as defined in the codelist.xml file. Allows
            to select a more precise codelist when more than one is defined for same
            name.
          required: false
          schema:
            type: string
        - name: xpath
          in: query
          description: XPath of the element to target which may indicate a more precise
            label as defined in context attribute.
          required: false
          schema:
            type: string
        - name: isoType
          in: query
          description: "ISO type of the element to target which may indicate a more\
          \ precise label as defined in context attribute. (Same as context. TODO:\
          \ Deprecate ?)"
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Codelist'
            application/xml:
              schema:
                $ref: '#/components/schemas/Codelist'
  /i18n/db:
    get:
      tags:
        - tools
      summary: List translations for database description table
      operationId: getTranslations
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /site/settings:
    get:
      tags:
        - site
      summary: Get settings
      description: "Return public settings for anonymous users, internals are allowed\
        \ for authenticated."
      operationId: getSettingsSet
      parameters:
        - name: set
          in: query
          description: Setting set. A common set of settings to retrieve.
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - INSPIRE
                - CSW
                - HARVESTER
                - USER_GROUP_ONLY
                - AUTH
                - READ_ONLY
                - INDEX
                - SYSTEMINFO
                - STAGING_PROFILE
                - TYPE
        - name: key
          in: query
          description: Setting key
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsListResponse'
    post:
      tags:
        - site
      summary: Save settings
      operationId: saveSettings
      parameters:
        - name: allRequestParams
          in: query
          required: true
          schema:
            type: object
            additionalProperties:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Administrators can access it.
        "204":
          description: Settings saved.
  /users/owners:
    get:
      tags:
        - users
      summary: Get owners
      description: Return users who actually owns one or more records.
      operationId: getRecordOwners
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OwnerResponse'
    put:
      tags:
        - users
      summary: Transfer privileges
      operationId: saveOwners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /mapservices:
    get:
      tags:
        - mapservices
      summary: Get mapservices
      description: Return the list of mapservices. mapservices are used to identify
        secured map services.
      operationId: getMapservices
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapService'
  /records/{metadataUuid}/group:
    put:
      tags:
        - records
      summary: Set record group
      description: A record is related to one group.
      operationId: setRecordGroup
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              description: Group identifier
              format: int32
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "204":
          description: Record group updated.
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
  /users/{userIdentifier}:
    get:
      tags:
        - users
      summary: Get user
      operationId: getUser
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - users
      summary: Update a user
      description: Updates a catalog user.
      operationId: updateUser
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
    delete:
      tags:
        - users
      summary: Delete a user
      description: Deletes a catalog user by identifier.
      operationId: deleteUser
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /records/backups:
    put:
      tags:
        - records
      summary: Trigger MEF backup archive
      description: The backup contains all metadata not harvested including templates.
      operationId: trigger
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return succeed message.
          content:
            application/json:
              schema:
                type: string
  /records/{metadataUuid}/processes/{process}:
    get:
      tags:
        - records
      summary: Preview process result
      description: Process a metadata with an XSL transformation declared in the metadata
        schema (See the process folder). Parameters sent to the service are forwarded
        to XSL process.
      operationId: processRecordPreview
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: process
          in: path
          description: Process identifier
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: A preview of the processed record.
          content: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content: {}
    post:
      tags:
        - records
      summary: Apply a process
      description: Process a metadata with an XSL transformation declared in the metadata
        schema (See the process folder). Parameters sent to the service are forwarded
        to XSL process.
      operationId: processRecord
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: process
          in: path
          description: Process identifier
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/xml:
              schema:
                type: string
        "204":
          description: Record processed and saved.
          content:
            application/xml:
              schema:
                type: string
  /ui:
    get:
      tags:
        - ui
      summary: Get UI configuration
      operationId: getUiConfigurations
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of configuration.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UiSetting'
    put:
      tags:
        - ui
      summary: Create a UI configuration
      operationId: putUiConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UiSetting'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
          content:
            text/plain:
              schema:
                type: string
        "201":
          description: UI configuration created. Return the new UI configuration identifier.
          content:
            text/plain:
              schema:
                type: string
  /standards/reload:
    get:
      tags:
        - standards
      summary: Reload standards
      operationId: reloadSchema
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Standards reloaded.
  /site/index/status:
    get:
      tags:
        - site
      summary: Index status
      operationId: indexStatus
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /records/{metadataUuid}/associated:
    get:
      tags:
        - records
      summary: Get record associated resources
      description: "Retrieve related services, datasets, sources, ... to this records.<br/><a\
        \ href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'>More\
        \ info</a>"
      operationId: getAssociatedResources_1
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: "Type of related resource. If none, all resources are returned."
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - children
                - parent
                - brothersAndSisters
                - siblings
                - associated
                - services
                - datasets
                - fcats
                - hasfeaturecats
                - sources
                - hassources
                - related
                - onlines
                - thumbnails
            default: []
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: true
          example: true
        - name: start
          in: query
          description: Start offset for paging. Default 1. Only applies to related metadata
            records (ie. not for thumbnails).
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: rows
          in: query
          description: Number of rows returned. Default 100.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return the associated resources.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: '#/components/schemas/AssociatedRecord'
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: '#/components/schemas/AssociatedRecord'
  /records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/after:
    get:
      tags:
        - records
      summary: Get saved content from the status record after changes
      operationId: showStatusAfter
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: statusId
          in: path
          description: Status identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: changeDate
          in: path
          description: Change date
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/xml:
              schema:
                type: string
        "200":
          description: Version of the record after changes.
          content:
            application/xml:
              schema:
                type: string
  /regions/geom.png:
    get:
      tags:
        - regions
      summary: Get geometry as image
      description: A rendering of the geometry as a png.
      operationId: getGeomAsImage
      parameters:
        - name: mapsrs
          in: query
          description: (optional) the background map projection. If not passed uses
            the region/getmap/mapproj setting. If the setting is not set defaults to
            EPSG:4326
          required: false
          schema:
            type: string
        - name: width
          in: query
          description: (optional) width of the image that is created. Only one of width
            and height are permitted
          required: false
          schema:
            type: integer
            format: int32
            default: 300
        - name: height
          in: query
          description: (optional) height of the image that is created. Only one of width
            and height are permitted
          required: false
          schema:
            type: integer
            format: int32
        - name: background
          in: query
          description: "(optional) URL for loading a background image for regions or\
          \ a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml).\
          \ A WMS Getmap request is the typical example. The URL must be parameterized\
          \ with the following parameters: minx, maxx, miny, maxy, width, height"
          required: false
          schema:
            type: string
            default: settings
        - name: geom
          in: query
          description: (optional) a wkt or gml encoded geometry.
          required: false
          schema:
            type: string
        - name: geomtype
          in: query
          description: (optional) defines if geom is wkt or gml. Allowed values are
            wkt and gml. if not specified the it is assumed the geometry is wkt
          required: false
          schema:
            type: string
            default: WKT
        - name: geomsrs
          in: query
          required: false
          schema:
            type: string
            default: EPSG:4326
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            image/png:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /records/{metadataUuid}/extents/{geometryIndex}.png:
    get:
      tags:
        - records
      summary: Get one record extent as image
      description: |
        A rendering of the geometry as a png. If no background is specified the image will be transparent. In getMap the envelope of the geometry is calculated then it is expanded by a factor.  That factor is the size of the map.  This allows the map to be slightly bigger than the geometry allowing some context to be shown. This parameter allows different factors to be chosen per scale level.
        Proportion is the proportion of the world that the geometry covers (bounds of WGS84)/(bounds of geometry in WGS84)

        Named backgrounds allow the background parameter to be a simple key and the complete URL will be looked up from this list of named backgrounds
      operationId: getOneRecordExtentAsImage
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: geometryIndex
          in: path
          description: Index of the geometry or bounding box to display. Starts at 1.
          required: true
          schema:
            type: integer
            format: int32
        - name: mapsrs
          in: query
          description: (optional) the background map projection. If not passed uses
            the region/getmap/mapproj setting. If the setting is not set defaults to
            EPSG:4326
          required: false
          schema:
            type: string
        - name: width
          in: query
          description: (optional) width of the image that is created. Only one of width
            and height are permitted
          required: false
          schema:
            type: integer
            format: int32
            default: 300
        - name: height
          in: query
          description: (optional) height of the image that is created. Only one of width
            and height are permitted
          required: false
          schema:
            type: integer
            format: int32
        - name: background
          in: query
          description: "(optional) URL for loading a background image for regions or\
          \ a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml).\
          \ A WMS GetMap request is the typical example. The URL must be parameterized\
          \ with the following parameters: minx, maxx, miny, maxy, width, height"
          required: false
          schema:
            type: string
            default: settings
        - name: fillColor
          in: query
          description: "(optional) Fill color with format RED,GREEN,BLUE,ALPHA"
          required: false
          schema:
            type: string
            default: "0,0,0,50"
        - name: strokeColor
          in: query
          description: "(optional) Stroke color with format RED,GREEN,BLUE,ALPHA"
          required: false
          schema:
            type: string
            default: "0,0,0,255"
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            image/png:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /records/{metadataUuid}/alert:
    post:
      tags:
        - userfeedback
      summary: Send an email to catalogue administrator or record's contact
      operationId: sendEmailToContact
      parameters:
        - name: metadataUuid
          in: path
          description: Metadata record UUID.
          required: true
          schema:
            type: string
        - name: recaptcha
          in: query
          description: Recaptcha validation key.
          required: false
          schema:
            type: string
            default: ""
        - name: name
          in: query
          description: User name.
          required: true
          schema:
            type: string
        - name: org
          in: query
          description: User organisation.
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: User email address.
          required: true
          schema:
            type: string
        - name: comments
          in: query
          description: A comment or question.
          required: true
          schema:
            type: string
        - name: phone
          in: query
          description: User phone number.
          required: false
          schema:
            type: string
            default: ""
        - name: subject
          in: query
          description: Email subject.
          required: false
          schema:
            type: string
            default: User feedback
        - name: function
          in: query
          description: User function.
          required: false
          schema:
            type: string
            default: "-"
        - name: type
          in: query
          description: Comment type.
          required: false
          schema:
            type: string
            default: "-"
        - name: category
          in: query
          description: Comment category.
          required: false
          schema:
            type: string
            default: "-"
        - name: metadataEmail
          in: query
          description: List of record's contact to send this email (separated by comma).
          required: false
          schema:
            type: string
            default: ""
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
  /records/ownership:
    put:
      tags:
        - records
      summary: Set group and owner for one or more records
      operationId: setGroupAndOwner
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: groupIdentifier
          in: query
          description: Group identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: userIdentifier
          in: query
          description: User identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: false
          example: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
        "201":
          description: Records group and owner updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
  /tools/mail/test:
    get:
      tags:
        - tools
      summary: Test mail configuration
      description: Send an email to the catalog feedback email.
      operationId: testMailConfiguration
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            text/plain:
              schema:
                type: string
  /records/{metadataUuid}/permalink:
    get:
      tags:
        - records
      summary: Get metadata record permalink
      description: "Permalink is by default the landing page formatter but can be\
        \ configured in the admin console > settings. If the record as a DOI and if\
        \ enabled in the settings, then it takes priority."
      operationId: getRecordPermalink
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Resource not found.
          content:
            text/plain:
              schema:
                type: string
        "200":
          description: Return the permalink URL.
          content:
            text/plain:
              schema:
                type: string
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            text/plain:
              schema:
                type: string
  /atom/scan:
    get:
      tags:
        - atom
      summary: Scan records for ATOM feeds
      description: Check in the settings which protocol identify ATOM feeds in your
        catalogue.Only applies to ISO19139 records.
      operationId: scan
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Scan completed.
          content:
            application/json:
              schema:
                type: object
        "204":
          description: Not authenticated.
          content:
            application/json:
              schema:
                type: object
  /records/status/search:
    get:
      tags:
        - records
      summary: Search status
      operationId: getWorkflowStatusByType
      parameters:
        - name: type
          in: query
          description: "One or more types to retrieve (ie. worflow, event, task). Default\
          \ is all."
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - workflow
                - task
                - event
        - name: details
          in: query
          description: All event details including XML changes. Responses are bigger.
            Default is false
          required: false
          schema:
            type: boolean
        - name: sortOrder
          in: query
          description: Sort Order (ie. DESC or ASC). Default is none.
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: author
          in: query
          description: One or more event author. Default is all.
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: owner
          in: query
          description: One or more event owners. Default is all.
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: id
          in: query
          description: One or more record identifier. Default is all.
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: recordIdentifier
          in: query
          description: One or more metadata record identifier. Default is all.
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: uuid
          in: query
          description: One or more metadata uuid. Default is all.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: statusIds
          in: query
          description: One or more status id. Default is all.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: dateFrom
          in: query
          description: Start date
          required: false
          schema:
            type: string
        - name: dateTo
          in: query
          description: End date
          required: false
          schema:
            type: string
        - name: from
          in: query
          description: From page
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Number of records to return
          required: false
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content: {}
  /records/batchediting:
    put:
      tags:
        - records
      summary: Edit a set of records by XPath expressions. This operations applies
        the update-fixed-info.xsl transformation for the metadata schema and updates
        the change date if the parameter updateDateStamp is set to true.
      operationId: batchEdit
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: updateDateStamp
          in: query
          description: If true updates the DateStamp (or equivalent in standards different
            to ISO 19139) field in the metadata with the current timestamp
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BatchEditParameter'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Return a report of what has been done.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IProcessingReport'
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IProcessingReport'
  /formatters/cache:
    delete:
      tags:
        - formatters
      summary: Clear formatter cache
      description: "Formatters are used to render records in various format (HTML,\
        \ PDF, ...). When a record is rendered a cache is populated for better performance.\
        \ By default the cache is an H2 database with files on the filesystems (See\
        \ <dataDirectory>/resources/htmlcache/formatter-cache folder)."
      operationId: clearFormatterCache
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Administrator can access it.
        "204":
          description: Cache cleared.
  /usersearches:
    get:
      tags:
        - usersearches
      summary: Get user custom searches
      operationId: getUserCustomSearches
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearchDto'
    put:
      tags:
        - usersearches
      summary: Creates a user search
      description: Creates a user search.
      operationId: createUserCustomSearch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSearchDto'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: User search created.
          content:
            application/json:
              schema:
                type: integer
                format: int32
  /standards/{schema}/codelists/{codelist}:
    get:
      tags:
        - standards
      summary: Get codelist translations
      operationId: getSchemaTranslations
      parameters:
        - name: schema
          in: path
          description: Schema identifier
          required: true
          schema:
            type: string
          example: iso19139
        - name: codelist
          in: path
          description: Codelist element name or alias
          required: true
          schema:
            type: string
        - name: parent
          in: query
          required: false
          schema:
            type: string
        - name: displayIf
          in: query
          required: false
          schema:
            type: string
        - name: xpath
          in: query
          required: false
          schema:
            type: string
        - name: isoType
          in: query
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /site/logo:
    put:
      tags:
        - site
      summary: Set catalog logo
      description: "Logos are stored in the data directory resources/images/harvesting\
        \ as PNG or GIF images. When a logo is assigned to the catalog, a new image\
        \ is created in images/logos/<catalogUuid>.png."
      operationId: setLogo
      parameters:
        - name: file
          in: query
          description: Logo to use for the catalog
          required: true
          schema:
            type: string
        - name: asFavicon
          in: query
          description: Create favicon too
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only UserAdmins can access it.
        "204":
          description: Logo set.
  /records/{metadataUuid}/processes:
    get:
      tags:
        - records
      summary: Get suggestions
      description: Analyze the record an suggest processes to improve the quality
        of the record.<br/><a href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/workflow/batchupdate-xsl.html'>More
        info</a>
      operationId: getSuggestions
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SuggestionType'
        "200":
          description: Record suggestions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SuggestionType'
  /registries/crs:
    get:
      tags:
        - registries
      summary: Search coordinate reference system (CRS)
      description: "Based on GeoTools EPSG database. If phrase query, each words are\
        \ searched separately."
      operationId: searchCrs
      parameters:
        - name: q
          in: query
          description: Search value
          required: false
          schema:
            type: string
            default: ""
        - name: type
          in: query
          description: Type of CRS
          required: false
          schema:
            type: string
            enum:
              - CoordinateReferenceSystem
              - VerticalCRS
              - GeographicCRS
              - ProjectedCRS
        - name: rows
          in: query
          description: "Number of results. Default is: 100"
          required: false
          schema:
            type: integer
            format: int32
            default: 100
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of CRS.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Crs'
  /records/templates:
    put:
      tags:
        - records
      summary: Add templates
      description: Add template records for one or more schemas. Templates are defined
        for each standard in the template folder as XML files. Template may also contains
        subtemplates.
      operationId: addTemplates
      parameters:
        - name: schema
          in: query
          description: Schema identifiers
          required: true
          schema:
            type: array
            items:
              type: string
          example: iso19139
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Return a report of what has been done.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
        "403":
          description: Operation not allowed. Only Administrators can access it.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
  /records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/restore:
    post:
      tags:
        - records
      summary: Restore saved content from a status record
      operationId: restoreAtStatusSave
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: statusId
          in: path
          description: Status identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: changeDate
          in: path
          description: Change date
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Record restored.
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
  /records/{metadataUuid}/formatters/xml:
    get:
      tags:
        - records
      summary: Get a metadata record as XML or JSON
      operationId: getRecordAs
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: addSchemaLocation
          in: query
          description: Add XSD schema location based on standard configuration (see
            schema-ident.xml).
          required: false
          schema:
            type: boolean
            default: true
        - name: increasePopularity
          in: query
          description: Increase record popularity
          required: false
          schema:
            type: boolean
            default: true
        - name: withInfo
          in: query
          description: Add geonet:info details
          required: false
          schema:
            type: boolean
            default: false
        - name: attachment
          in: query
          description: Download as a file
          required: false
          schema:
            type: boolean
            default: false
        - name: approved
          in: query
          description: Download the approved version
          required: false
          schema:
            type: boolean
            default: true
        - name: Accept
          in: header
          required: false
          schema:
            type: string
            default: application/xml
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return the record.
          content:
            application/xml:
              schema:
                type: object
            application/json:
              schema:
                type: object
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            application/xml:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /records/{metadataUuid}/formatters/json:
    get:
      tags:
        - records
      summary: Get a metadata record as XML or JSON
      operationId: getRecordAs_1
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: addSchemaLocation
          in: query
          description: Add XSD schema location based on standard configuration (see
            schema-ident.xml).
          required: false
          schema:
            type: boolean
            default: true
        - name: increasePopularity
          in: query
          description: Increase record popularity
          required: false
          schema:
            type: boolean
            default: true
        - name: withInfo
          in: query
          description: Add geonet:info details
          required: false
          schema:
            type: boolean
            default: false
        - name: attachment
          in: query
          description: Download as a file
          required: false
          schema:
            type: boolean
            default: false
        - name: approved
          in: query
          description: Download the approved version
          required: false
          schema:
            type: boolean
            default: true
        - name: Accept
          in: header
          required: false
          schema:
            type: string
            default: application/xml
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return the record.
          content:
            application/xml:
              schema:
                type: object
            application/json:
              schema:
                type: object
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            application/xml:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /user/{username}:
    patch:
      tags:
        - users
      summary: Update user password
      description: Get a valid changekey by email first and then update your password.
      operationId: updatePassword
      parameters:
        - name: username
          in: path
          description: The user name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateParameter'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            text/plain:
              schema:
                type: string
  /registries/entries/{uuid}:
    get:
      tags:
        - registries
      summary: Get a directory entry
      description: Directory entry (AKA subtemplates) are XML fragments that can be
        inserted in metadata records using XLinks. XLinks can be remote or local.
      operationId: getEntry
      parameters:
        - name: uuid
          in: path
          description: Directory entry UUID.
          required: true
          schema:
            type: string
        - name: process
          in: query
          description: Process
          required: false
          schema:
            type: array
            items:
              type: string
        - name: transformation
          in: query
          description: Transformation
          required: false
          schema:
            type: string
        - name: lang
          in: query
          description: lang
          required: false
          schema:
            type: array
            items:
              type: string
        - name: schema
          in: query
          description: schema
          required: false
          schema:
            type: string
            default: iso19139
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Directory entry.
          content: {}
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content: {}
  /records/batchediting/preview:
    post:
      tags:
        - records
      summary: Preview edits made by XPath expressions.
      operationId: previewBatchEdit
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: diffType
          in: query
          description: "Return differences with diff, diffhtml or patch"
          required: false
          schema:
            type: string
            enum:
              - patch
              - diff
              - diffhtml
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BatchEditParameter'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            application/xml:
              schema:
                type: object
        "200":
          description: Processed records.
          content:
            application/xml:
              schema:
                type: object
  /records/{metadataUuid}/rate:
    put:
      tags:
        - records
      summary: Rate a record
      description: "User rating of metadata. If the metadata was harvested using the\
        \ 'GeoNetwork' protocol and the system setting localrating/enable is false\
        \ (the default), the user's rating is shared between GN nodes in this harvesting\
        \ network. If the metadata was not harvested or if localrating/enable is true\
        \ then 'local rating' is applied, counting only rating from users of this\
        \ node.<br/>When a remote rating is applied, the local rating is not updated.\
        \ It will be updated on the next harvest run (FIXME ?)."
      operationId: rateRecord
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              description: Rating
              format: int32
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: New rating value.
          content:
            '*/*':
              schema:
                type: integer
                format: int32
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
          content:
            '*/*':
              schema:
                type: integer
                format: int32
  /records/links/csv:
    get:
      tags:
        - links
      description: Get record links as CSV
      operationId: getRecordLinksAsCsv
      parameters:
        - name: filter
          in: query
          description: "Filter, e.g. \"{url: 'png', lastState: 'ko', records: 'e421',\
          \ groupId: 12}\", lastState being 'ok'/'ko'/'unknown'"
          required: false
          schema:
            $ref: '#/components/schemas/JSONObject'
        - name: groupIdFilter
          in: query
          description: "Optional, filter links to records published in that group."
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: groupOwnerIdFilter
          in: query
          description: "Optional, filter links to records created in that group."
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: page
          in: query
          description: Results page you want to retrieve (0..N)
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: Number of records per page.
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. "
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
  /site/info:
    get:
      tags:
        - site
      summary: Get site informations
      operationId: getInformation
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Site information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteInformation'
  /reports/metadatainternal:
    get:
      tags:
        - records
      summary: Get the metadata not published during a period.
      operationId: getReportInternalMetadata
      parameters:
        - name: dateFrom
          in: query
          description: From date of metadata change date
          required: true
          schema:
            type: string
        - name: dateTo
          in: query
          description: To date of metadata change date
          required: true
          schema:
            type: string
        - name: groups
          in: query
          description: Metadata group(s)
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Metadata not published during a period.
  /atom/download/resource:
    get:
      tags:
        - atom
      summary: Get a data file related to dataset
      description: "This service if a dataset has only 1 download format for a CRS\
        \ returns the file, otherwise returns a feed with downloads for the dataset."
      operationId: downloadResource
      parameters:
        - name: spatial_dataset_identifier_code
          in: query
          description: spatial_dataset_identifier_code
          required: false
          schema:
            type: string
            default: ""
        - name: spatial_dataset_identifier_namespace
          in: query
          description: spatial_dataset_identifier_namespace
          required: false
          schema:
            type: string
            default: ""
        - name: crs
          in: query
          description: crs
          required: false
          schema:
            type: string
            default: ""
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Get a data file related to dataset
          content: {}
        "204":
          description: Not authenticated.
          content: {}
  /isolanguages:
    get:
      tags:
        - languages
      summary: Get ISO languages
      description: ISO languages provides a list of all languages (eg. used for autocompletion
        in metadata editor).
      operationId: getIsoLanguages
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IsoLanguage'
  /records/duplicate:
    put:
      tags:
        - records
      summary: Create a new record
      description: "Create a record from a template or by copying an existing record.Return\
        \ the UUID of the newly created record. Existing links in the source record\
        \ are preserved, this means that the new record may contains link to the source\
        \ attachments. They need to be manually updated after creation."
      operationId: create
      parameters:
        - name: metadataType
          in: query
          description: The type of record.
          required: false
          schema:
            type: string
            enum:
              - METADATA
              - TEMPLATE
              - SUB_TEMPLATE
              - TEMPLATE_OF_SUB_TEMPLATE
            default: METADATA
        - name: sourceUuid
          in: query
          description: UUID of the source record to copy.
          required: true
          schema:
            type: string
        - name: targetUuid
          in: query
          description: Assign a custom UUID. If this UUID already exist an error is
            returned. This is enabled only if metadata create / generate UUID settings
            is activated.
          required: false
          schema:
            type: string
        - name: group
          in: query
          description: The group the record is attached to.
          required: true
          schema:
            type: string
        - name: allowEditGroupMembers
          in: query
          description: "Is editable by group members with editor profile? If not, only\
          \ the author and administrator can edit the record."
          required: false
          schema:
            type: boolean
            default: false
        - name: category
          in: query
          description: Tags to assign to the record.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: hasCategoryOfSource
          in: query
          description: Copy categories from source?
          required: false
          schema:
            type: boolean
            default: false
        - name: isChildOfSource
          in: query
          description: Is child of the record to copy?
          required: false
          schema:
            type: boolean
            default: false
        - name: hasAttachmentsOfSource
          in: query
          description: Copy attachments from source?
          required: false
          schema:
            type: boolean
            default: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Return the internal id of the newly created record.
          content:
            application/json:
              schema:
                type: string
        "403":
          description: Operation not allowed. Only Editors can access it.
          content:
            application/json:
              schema:
                type: string
  /robots.txt:
    get:
      tags:
        - site
      summary: robots.txt
      operationId: getRobotsText
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: robots.txt file for SEO.
  /standards:
    get:
      tags:
        - standards
      summary: Get standards
      operationId: getStandardConfigurations
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of standards.
          content: {}
  /records/{metadataUuid}/ownership:
    put:
      tags:
        - records
      summary: Set record group and owner
      operationId: setRecordOwnership
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: groupIdentifier
          in: query
          description: Group identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: userIdentifier
          in: query
          description: User identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: approved
          in: query
          description: Use approved version or not
          required: false
          schema:
            type: boolean
            default: true
          example: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
        "201":
          description: Record group and owner updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
  /user/actions/forgot-password:
    put:
      tags:
        - users
      summary: Send user password reminder by email
      description: An email is sent to the requested user with a link to reset his
        password. User MUST have an email to get the link. LDAP users will not be
        able to retrieve their password using this service.
      operationId: sendPasswordByEmail
      parameters:
        - name: username
          in: query
          description: The user name
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            text/plain:
              schema:
                type: string
  /me:
    get:
      tags:
        - me
      summary: Get information about me
      description: "If not authenticated, return status 204 (NO_CONTENT), else return\
        \ basic user information. This operation is usually used to know if current\
        \ user is authenticated or not.It returns also info about groups and profiles."
      operationId: getMe
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Authenticated. Return user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
        "204":
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
  /records/approve:
    put:
      tags:
        - records
      summary: Set the records status to approved
      operationId: approve
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataBatchApproveParameter'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Metadata approved .
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
        "400":
          description: Metadata workflow not enabled.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataProcessingReport'
  /records/index:
    get:
      tags:
        - records
      summary: Index a set of records
      description: Index a set of records provided either by a bucket or a list of
        uuids
      operationId: index_1
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. Only Administrators can access it.
          content:
            application/json:
              schema:
                type: object
                properties:
                  nullObject:
                    type: boolean
                  array:
                    type: boolean
                  empty:
                    type: boolean
                additionalProperties:
                  type: object
        "200":
          description: Record indexed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  nullObject:
                    type: boolean
                  array:
                    type: boolean
                  empty:
                    type: boolean
                additionalProperties:
                  type: object
  /atom/describe/resource:
    get:
      tags:
        - atom
      summary: Describe resource
      operationId: describeResource
      parameters:
        - name: fileIdentifier
          in: query
          description: fileIdentifier
          required: false
          schema:
            type: string
            default: ""
        - name: spatial_dataset_identifier_code
          in: query
          description: spatial_dataset_identifier_code
          required: false
          schema:
            type: string
            default: ""
        - name: spatial_dataset_identifier_namespace
          in: query
          description: spatial_dataset_identifier_namespace
          required: false
          schema:
            type: string
            default: ""
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Feeds.
          content: {}
        "204":
          description: Not authenticated.
          content: {}
  /regions/types:
    get:
      tags:
        - regions
      summary: Get list of region types
      operationId: getRegionTypes
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: List of region types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /users:
    get:
      tags:
        - users
      summary: Get users
      operationId: getUsers
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    put:
      tags:
        - users
      summary: Creates a user
      description: Creates a catalog user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /languages:
    get:
      tags:
        - languages
      summary: Get languages
      description: "Languages for the application having translations in the database.\
        \ All tables with 'Desc' suffix contains translation for some domain objects\
        \ like groups, tags, ..."
      operationId: getLanguages
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Language'
  /records/{metadataUuid}/unpublish:
    put:
      tags:
        - records
      summary: Unsets privileges for ALL group to publish the metadata for all users.
      operationId: unpublish_1
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: Publication type
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
        "204":
          description: Settings updated.
  /records/csv:
    get:
      tags:
        - records
      summary: Get a set of metadata records as CSV
      description: The CSV is a short summary of each records.
      operationId: exportAsCsv
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return requested records as CSV.
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
  /records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/close:
    put:
      tags:
        - records
      summary: Close a record task
      operationId: closeTask
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: statusId
          in: path
          description: Status identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            format: int32
        - name: changeDate
          in: path
          description: Change date
          required: true
          schema:
            type: string
        - name: closeDate
          in: query
          description: Close date
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "404":
          description: Status not found.
        "403":
          description: Operation not allowed. User needs to be able to edit the resource.
        "204":
          description: Task closed.
  /sources/{type}:
    get:
      tags:
        - sources
      summary: Get all sources by type
      description: "Sources are the local catalogue, subportal, external catalogue\
        \ (when importing MEF files) or harvesters."
      operationId: getSourcesByType
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - portal
              - subportal
              - externalportal
              - harvester
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
  /records/sharing/options:
    get:
      tags:
        - records
      summary: Get publication options.
      operationId: getPublicationOptions
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicationOption'
  /users/{userIdentifier}/groups:
    get:
      tags:
        - users
      summary: Retrieve user groups
      description: Retrieve the user groups.
      operationId: retrieveUserGroups
      parameters:
        - name: userIdentifier
          in: path
          description: User identifier.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroup'
  /registries/vocabularies/keyword:
    get:
      tags:
        - registries
      summary: Get keyword by id
      description: Retrieve XML representation of keyword(s) from same thesaurususing
        different transformations. 'to-iso19139-keyword' is the default and return
        an ISO19139 snippet.'to-iso19139-keyword-as-xlink' return an XLinked element.
        Custom transformation can be create on a per schema basis.
      operationId: getKeywordById_1
      parameters:
        - name: id
          in: query
          description: Keyword identifier or list of keyword identifiers comma separated.
          required: true
          schema:
            type: string
        - name: thesaurus
          in: query
          description: Thesaurus to look info for the keyword(s).
          required: true
          schema:
            type: string
        - name: lang
          in: query
          description: Languages.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: keywordOnly
          in: query
          description: "Only print the keyword, no thesaurus information."
          required: false
          schema:
            type: boolean
            default: false
        - name: transformation
          in: query
          description: "XSL template to use (ISO19139 keyword by default, see convert.xsl)."
          required: false
          schema:
            type: string
        - name: langMap
          in: query
          description: "langMap, that converts the values in the 'lang' parameter to\
          \ how they will be actually represented in the record. {'fre':'fra'} or\
          \ {'fre':'fr'}.  Missing/empty means to convert to iso 2 letter."
          required: false
          schema:
            type: string
        - name: Accept
          in: header
          required: false
          schema:
            type: string
            default: application/xml
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: XML snippet with requested keywords.
          content:
            application/xml:
              schema:
                type: object
            application/json:
              schema:
                type: object
    post:
      tags:
        - registries
      summary: Get keyword by id
      description: Retrieve XML representation of keyword(s) from same thesaurususing
        different transformations. 'to-iso19139-keyword' is the default and return
        an ISO19139 snippet.'to-iso19139-keyword-as-xlink' return an XLinked element.
        Custom transformation can be create on a per schema basis.
      operationId: getKeywordById
      parameters:
        - name: id
          in: query
          description: Keyword identifier or list of keyword identifiers comma separated.
          required: true
          schema:
            type: string
        - name: thesaurus
          in: query
          description: Thesaurus to look info for the keyword(s).
          required: true
          schema:
            type: string
        - name: lang
          in: query
          description: Languages.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: keywordOnly
          in: query
          description: "Only print the keyword, no thesaurus information."
          required: false
          schema:
            type: boolean
            default: false
        - name: transformation
          in: query
          description: "XSL template to use (ISO19139 keyword by default, see convert.xsl)."
          required: false
          schema:
            type: string
        - name: langMap
          in: query
          description: "langMap, that converts the values in the 'lang' parameter to\
          \ how they will be actually represented in the record. {'fre':'fra'} or\
          \ {'fre':'fr'}.  Missing/empty means to convert to iso 2 letter."
          required: false
          schema:
            type: string
        - name: Accept
          in: header
          required: false
          schema:
            type: string
            default: application/xml
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: XML snippet with requested keywords.
          content:
            application/xml:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /records/links/analyze:
    post:
      tags:
        - links
      summary: Analyze records links
      description: One of uuids or bucket parameter is required if not an Administrator.
        Only records that you can edit will be validated.
      operationId: analyzeRecordLinks
      parameters:
        - name: uuids
          in: query
          description: Record UUIDs. If null current selection is used.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: bucket
          in: query
          description: Selection bucket name
          required: false
          schema:
            type: string
        - name: removeFirst
          in: query
          description: Only allowed if Administrator.
          required: false
          schema:
            type: boolean
            default: true
        - name: analyze
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleMetadataProcessingReport'
  /records/{metadataUuid}/formatters/zip:
    get:
      tags:
        - records
      summary: Get a metadata record as ZIP
      description: Metadata Exchange Format (MEF) is returned. MEF is a ZIP file containing
        the metadata as XML and some others files depending on the version requested.
        See http://geonetwork-opensource.org/manuals/trunk/eng/users/annexes/mef-format.html.
      operationId: getRecordAsZip
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: MEF file format.
          required: false
          schema:
            type: string
            enum:
              - simple
              - partial
              - full
            default: full
        - name: withRelated
          in: query
          description: With related records (parent and service).
          required: false
          schema:
            type: boolean
            default: true
        - name: withXLinksResolved
          in: query
          description: Resolve XLinks in the records.
          required: false
          schema:
            type: boolean
            default: true
        - name: withXLinkAttribute
          in: query
          description: Preserve XLink URLs in the records.
          required: false
          schema:
            type: boolean
            default: false
        - name: addSchemaLocation
          in: query
          required: false
          schema:
            type: boolean
            default: true
        - name: approved
          in: query
          description: Download the approved version
          required: false
          schema:
            type: boolean
            default: true
        - name: Accept
          in: header
          required: false
          schema:
            type: string
            default: application/x-gn-mef-2-zip
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Return the record.
        "403":
          description: Operation not allowed. User needs to be able to view the resource.
  /reports/datauploads:
    get:
      tags:
        - records
      summary: Get uploaded files to metadata records during a period.
      operationId: getReportDataUploads
      parameters:
        - name: dateFrom
          in: query
          description: From date of the metadata uploads
          required: true
          schema:
            type: string
        - name: dateTo
          in: query
          description: To date of the metadata uploads
          required: true
          schema:
            type: string
        - name: groups
          in: query
          description: Metadata group(s)
          required: false
          schema:
            type: array
            items:
              type: integer
              format: int32
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
  /records/{metadataUuid}/versions:
    put:
      tags:
        - records
      summary: (Experimental) Enable version control
      operationId: enableVersionControl
      parameters:
        - name: metadataUuid
          in: path
          description: Record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /standards/{schema}/batchconfiguration:
    get:
      tags:
        - standards
      summary: Get batch editor configuration for a standard
      operationId: getConfiguration
      parameters:
        - name: schema
          in: path
          description: Schema identifier
          required: true
          schema:
            type: string
          example: iso19139
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/BatchEditing'
  /records/{metadataUuid}/userfeedbackrating:
    get:
      tags:
        - userfeedback
      summary: Provides an average rating for a metadata record
      operationId: getMetadataRating
      parameters:
        - name: metadataUuid
          in: path
          description: Metadata record UUID.
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingAverage'
  /standards/{schema}/descriptors/{element}/details:
    get:
      tags:
        - standards
      summary: Get descriptor details
      operationId: getElementDetails
      parameters:
        - name: schema
          in: path
          description: Schema identifier
          required: true
          schema:
            type: string
          example: iso19139
        - name: element
          in: path
          description: Descriptor name
          required: true
          schema:
            type: string
        - name: parent
          in: query
          required: false
          schema:
            type: string
        - name: displayIf
          in: query
          required: false
          schema:
            type: string
        - name: xpath
          in: query
          required: false
          schema:
            type: string
        - name: isoType
          in: query
          required: false
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
            application/xml:
              schema:
                $ref: '#/components/schemas/Element'
  /pages/config/sections:
    get:
      tags:
        - pages
      operationId: getPageSections
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Page found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                    - TOP
                    - FOOTER
                    - MENU
                    - SUBMENU
                    - CUSTOM_MENU1
                    - CUSTOM_MENU2
                    - CUSTOM_MENU3
  /registries/vocabularies/search:
    get:
      tags:
        - registries
      summary: Search keywords
      operationId: searchKeywords
      parameters:
        - name: q
          in: query
          description: Query
          required: false
          schema:
            type: string
        - name: lang
          in: query
          description: Query in that language
          required: false
          schema:
            type: string
            default: eng
        - name: rows
          in: query
          description: Number of rows
          required: false
          schema:
            type: integer
            format: int32
            default: 1000
        - name: start
          in: query
          description: Start from
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: pLang
          in: query
          description: Return keyword information in one or more languages
          required: false
          schema:
            type: array
            items:
              type: string
        - name: thesaurus
          in: query
          description: Thesaurus identifier
          required: false
          schema:
            type: array
            items:
              type: string
        - name: type
          in: query
          description: Type of search
          required: false
          schema:
            type: string
            enum:
              - STARTS_WITH
              - CONTAINS
              - MATCH
            default: CONTAINS
        - name: uri
          in: query
          description: URI query
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Sort by
          required: false
          schema:
            type: string
            default: DESC
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
  /site/settings/details:
    get:
      tags:
        - site
      summary: Get settings with details
      description: Provides also setting properties.
      operationId: getSettingsDetails
      parameters:
        - name: set
          in: query
          description: Setting set. A common set of settings to retrieve.
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - INSPIRE
                - CSW
                - HARVESTER
                - USER_GROUP_ONLY
                - AUTH
                - READ_ONLY
                - INDEX
                - SYSTEMINFO
                - STAGING_PROFILE
                - TYPE
        - name: key
          in: query
          description: Setting key
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: Settings with details.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Setting'
  /usersearches/featured:
    get:
      tags:
        - usersearches
      summary: Get featured user custom searches
      operationId: getFeaturedUserCustomSearches
      parameters:
        - name: type
          in: query
          description: Number of records to return
          required: false
          schema:
            type: string
            enum:
              - HOME
              - EDITOR_BOARD
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearchDto'
  /i18n/db/custom:
    get:
      tags:
        - tools
      summary: List custom user translations
      operationId: getCustomTranslations
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Translations'
  /user/actions/register:
    put:
      tags:
        - users
      summary: Create user account
      description: User is created with a registered user profile. username field
        is ignored and the email is used as username. Password is sent by email. Catalog
        administrator is also notified.
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterDto'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
        "201":
          description: Created
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    InfoReport:
      type: object
      properties:
        message:
          type: string
        uuid:
          type: string
        draft:
          type: boolean
        approved:
          type: boolean
        date:
          type: string
    Report:
      type: object
      properties:
        message:
          type: string
        uuid:
          type: string
        draft:
          type: boolean
        approved:
          type: boolean
        date:
          type: string
    SimpleMetadataProcessingReport:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Report'
        infos:
          type: array
          items:
            $ref: '#/components/schemas/InfoReport'
        uuid:
          type: string
          xml:
            attribute: true
        totalRecords:
          type: integer
          format: int32
          writeOnly: true
        metadata:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
        metadataErrors:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Report'
          xml:
            name: errors
        metadataInfos:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/InfoReport'
          xml:
            name: infos
        numberOfRecordNotFound:
          type: integer
          format: int32
        numberOfRecordsNotEditable:
          type: integer
          format: int32
        numberOfNullRecords:
          type: integer
          format: int32
        numberOfRecordsProcessed:
          type: integer
          format: int32
        numberOfRecordsUnchanged:
          type: integer
          format: int32
        numberOfRecordsWithErrors:
          type: integer
          format: int32
        numberOfRecords:
          type: integer
          format: int32
          xml:
            attribute: true
        startIsoDateTime:
          type: string
          xml:
            attribute: true
        endIsoDateTime:
          type: string
          xml:
            attribute: true
        ellapsedTimeInSeconds:
          type: integer
          format: int64
          xml:
            attribute: true
        totalTimeInSeconds:
          type: integer
          format: int64
          xml:
            attribute: true
        running:
          type: boolean
        type:
          type: string
          xml:
            attribute: true
      xml:
        name: report
    GroupPrivilege:
      type: object
      properties:
        operations:
          type: object
          additionalProperties:
            type: boolean
        group:
          type: integer
          format: int32
        userProfiles:
          type: array
          items:
            type: string
            enum:
              - Administrator
              - UserAdmin
              - Reviewer
              - Editor
              - RegisteredUser
              - Guest
              - Monitor
        userGroup:
          type: boolean
        reserved:
          type: boolean
        userProfile:
          type: array
          writeOnly: true
          items:
            type: string
            enum:
              - Administrator
              - UserAdmin
              - Reviewer
              - Editor
              - RegisteredUser
              - Guest
              - Monitor
    SharingResponse:
      type: object
      properties:
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/GroupPrivilege'
        owner:
          type: string
        groupOwner:
          type: string
    UserFeedbackDTO:
      type: object
      properties:
        uuid:
          type: string
        comment:
          type: string
        rating:
          type: object
          additionalProperties:
            type: integer
            format: int32
        ratingAVG:
          type: integer
          format: int32
        metadataUUID:
          type: string
        metadataTitle:
          type: string
        authorUserId:
          type: integer
          format: int32
        authorName:
          type: string
        authorEmail:
          type: string
        authorOrganization:
          type: string
        approverName:
          type: string
        optionPrivacy:
          type: boolean
        published:
          type: boolean
        parentUuid:
          type: string
        captcha:
          type: string
        date:
          type: string
        showApproveButton:
          type: boolean
        keywords:
          type: array
          items:
            type: string
    StatusValue:
      type: object
      properties:
        type:
          type: string
          enum:
            - workflow
            - task
            - event
        notificationLevel:
          type: string
          enum:
            - statusUserOwner
            - catalogueAdministrator
            - catalogueProfileAdministrator
            - catalogueProfileUserAdmin
            - catalogueProfileReviewer
            - catalogueProfileEditor
            - catalogueProfileRegisteredUser
            - catalogueProfileGuest
            - recordProfileReviewer
            - recordUserAuthor
            - recordGroupEmail
        displayOrder:
          type: integer
          format: int32
        reserved_JpaWorkaround:
          type: string
          writeOnly: true
        reserved:
          type: boolean
        id:
          type: integer
          format: int32
        name:
          type: string
        label:
          type: object
          additionalProperties:
            type: string
    Setting:
      type: object
      properties:
        name:
          type: string
        storedValue:
          type: string
        value:
          type: string
        dataType:
          type: string
          enum:
            - STRING
            - INT
            - BOOLEAN
            - JSON
        position:
          type: integer
          format: int32
        internal:
          type: boolean
        encrypted:
          type: boolean
        editable:
          type: boolean
        encrypted_JpaWorkaround:
          type: string
          writeOnly: true
        internal_JpaWorkaround:
          type: string
          writeOnly: true
        editable_JpaWorkaround:
          type: string
          writeOnly: true
    SettingsListResponse:
      type: object
      properties:
        settings:
          type: array
          items:
            $ref: '#/components/schemas/Setting'
    MapServer:
      type: object
      properties:
        configurl:
          type: string
        wmsurl:
          type: string
        wfsurl:
          type: string
        wcsurl:
          type: string
        stylerurl:
          type: string
        namespacePrefix:
          type: string
        pushStyleInWorkspace_JpaWorkaround:
          type: string
          writeOnly: true
        pushStyleInWorkspace:
          $ref: '#/components/schemas/MapServer'
        namespace:
          type: string
        description:
          type: string
        username:
          type: string
        password:
          type: string
        id:
          type: integer
          format: int32
        name:
          type: string
      description: Mapserver details
    MetadataBatchSubmitParameter:
      type: object
      properties:
        uuids:
          type: array
          items:
            type: string
        bucket:
          type: string
        message:
          type: string
    MetadataProcessingReport:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Report'
        infos:
          type: array
          items:
            $ref: '#/components/schemas/InfoReport'
        uuid:
          type: string
          xml:
            attribute: true
        totalRecords:
          type: integer
          format: int32
          writeOnly: true
        metadata:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
        metadataErrors:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Report'
          xml:
            name: errors
        metadataInfos:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/InfoReport'
          xml:
            name: infos
        numberOfRecordNotFound:
          type: integer
          format: int32
        numberOfRecordsNotEditable:
          type: integer
          format: int32
        numberOfNullRecords:
          type: integer
          format: int32
        numberOfRecordsProcessed:
          type: integer
          format: int32
        numberOfRecordsUnchanged:
          type: integer
          format: int32
        numberOfRecordsWithErrors:
          type: integer
          format: int32
        numberOfRecords:
          type: integer
          format: int32
          xml:
            attribute: true
        startIsoDateTime:
          type: string
          xml:
            attribute: true
        endIsoDateTime:
          type: string
          xml:
            attribute: true
        ellapsedTimeInSeconds:
          type: integer
          format: int64
          xml:
            attribute: true
        totalTimeInSeconds:
          type: integer
          format: int64
          xml:
            attribute: true
        running:
          type: boolean
        type:
          type: string
          xml:
            attribute: true
      xml:
        name: report
    XsltMetadataProcessingReport:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Report'
        infos:
          type: array
          items:
            $ref: '#/components/schemas/InfoReport'
        uuid:
          type: string
          xml:
            attribute: true
        totalRecords:
          type: integer
          format: int32
          writeOnly: true
        metadata:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
        metadataErrors:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Report'
          xml:
            name: errors
        metadataInfos:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/InfoReport'
          xml:
            name: infos
        processId:
          type: string
          xml:
            name: process
            attribute: true
        noProcessFoundCount:
          type: integer
          format: int32
        numberOfRecordNotFound:
          type: integer
          format: int32
        numberOfRecordsNotEditable:
          type: integer
          format: int32
        numberOfNullRecords:
          type: integer
          format: int32
        numberOfRecordsProcessed:
          type: integer
          format: int32
        numberOfRecordsUnchanged:
          type: integer
          format: int32
        numberOfRecordsWithErrors:
          type: integer
          format: int32
        numberOfRecords:
          type: integer
          format: int32
          xml:
            attribute: true
        startIsoDateTime:
          type: string
          xml:
            attribute: true
        endIsoDateTime:
          type: string
          xml:
            attribute: true
        ellapsedTimeInSeconds:
          type: integer
          format: int64
          xml:
            attribute: true
        totalTimeInSeconds:
          type: integer
          format: int64
          xml:
            attribute: true
        running:
          type: boolean
        type:
          type: string
          xml:
            attribute: true
      xml:
        name: report
    MetadataResource:
      type: object
      properties:
        metadataId:
          type: integer
          format: int32
        metadataUuid:
          type: string
        approved:
          type: boolean
        visibility:
          type: string
          enum:
            - public
            - private
        metadataResourceExternalManagementProperties:
          $ref: '#/components/schemas/MetadataResourceExternalManagementProperties'
        lastModification:
          type: string
          format: date-time
        version:
          type: string
        url:
          type: string
        filename:
          type: string
        id:
          type: string
        size:
          type: integer
          format: int64
      xml:
        name: resource
    MetadataResourceExternalManagementProperties:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
        validationStatus:
          type: string
          enum:
            - UNKNOWN
            - VALID
            - INCOMPLETE
      xml:
        name: metadataResourceExternalManagementProperties
    LogFileResponse:
      type: object
      properties:
        file:
          type: string
          xml:
            attribute: true
        name:
          type: string
          xml:
            attribute: true
    Crs:
      type: object
      properties:
        code:
          type: string
        authority:
          type: string
        version:
          type: string
        codeSpace:
          type: string
        description:
          type: string
    CategoryResponse:
      type: object
      properties:
        label:
          type: object
          additionalProperties:
            type: string
    ListRegionsResponse:
      type: object
      properties:
        region:
          type: array
          items:
            $ref: '#/components/schemas/RegionResponse'
        categories:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CategoryResponse'
        regions:
          type: array
          items:
            $ref: '#/components/schemas/RegionResponse'
        count:
          type: integer
          format: int32
          xml:
            attribute: true
      xml:
        name: response
    RegionResponse:
      type: object
      properties:
        north:
          type: number
          format: double
        east:
          type: number
          format: double
        south:
          type: number
          format: double
        west:
          type: number
          format: double
        label:
          type: object
          additionalProperties:
            type: string
        hasGeom:
          type: boolean
          xml:
            attribute: true
        categoryId:
          type: string
          xml:
            attribute: true
        id:
          type: string
          xml:
            attribute: true
    MetadataIdentifierTemplate:
      type: object
      properties:
        template:
          type: string
        systemProvided:
          type: boolean
        systemDefault:
          type: boolean
          writeOnly: true
        systemProvided_JPAWorkaround:
          type: string
          writeOnly: true
        id:
          type: integer
          format: int32
        name:
          type: string
      description: Identifier template details
    JSONObject:
      type: object
      properties:
        empty:
          type: boolean
    ISODate:
      type: object
      properties:
        internalDateTime:
          type: string
          format: date-time
        dateAndTime:
          type: string
        dateAsString:
          type: string
        timeInSeconds:
          type: integer
          format: int64
        dateOnly:
          type: boolean
        dateYearOnly:
          type: boolean
        dateYearMonthOnly:
          type: boolean
        timeAsString:
          type: string
        seconds:
          type: integer
          format: int32
        days:
          type: integer
          format: int32
        years:
          type: integer
          format: int32
        months:
          type: integer
          format: int32
        hours:
          type: integer
          format: int32
        minutes:
          type: integer
          format: int32
        dateAndTimeUtc:
          type: string
    Link:
      type: object
      properties:
        records:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/MetadataLink'
        linkStatus:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/LinkStatus'
        lastState:
          type: integer
          format: int32
        lastCheck:
          $ref: '#/components/schemas/ISODate'
        linkType:
          type: string
          enum:
            - HTTP
            - METADATA
        url:
          type: string
        protocol:
          type: string
        id:
          type: integer
          format: int32
    LinkStatus:
      type: object
      properties:
        id:
          type: integer
          format: int32
        checkDate:
          $ref: '#/components/schemas/ISODate'
        statusValue:
          type: string
        statusInfo:
          type: string
        batchKey:
          type: string
        failing:
          type: boolean
    MetadataLink:
      type: object
      properties:
        metadataId:
          type: integer
          format: int32
        metadataUuid:
          type: string
    PageLink:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        empty:
          type: boolean
    Pageable:
      type: object
      properties:
        paged:
          type: boolean
        unpaged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        offset:
          type: integer
          format: int64
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    MetadataReplacementProcessingReport:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Report'
        infos:
          type: array
          items:
            $ref: '#/components/schemas/InfoReport'
        uuid:
          type: string
          xml:
            attribute: true
        totalRecords:
          type: integer
          format: int32
          writeOnly: true
        metadata:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
        metadataErrors:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Report'
          xml:
            name: errors
        metadataInfos:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/InfoReport'
          xml:
            name: infos
        processId:
          type: string
          xml:
            name: process
            attribute: true
        metadataChanges:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ReplaceReport'
          xml:
            name: changes
        numberOfRecordsChanged:
          type: integer
          format: int32
        numberOfRecordsNotChanged:
          type: integer
          format: int32
        noProcessFoundCount:
          type: integer
          format: int32
        numberOfRecordNotFound:
          type: integer
          format: int32
        numberOfRecordsNotEditable:
          type: integer
          format: int32
        numberOfNullRecords:
          type: integer
          format: int32
        numberOfRecordsProcessed:
          type: integer
          format: int32
        numberOfRecordsUnchanged:
          type: integer
          format: int32
        numberOfRecordsWithErrors:
          type: integer
          format: int32
        numberOfRecords:
          type: integer
          format: int32
          xml:
            attribute: true
        startIsoDateTime:
          type: string
          xml:
            attribute: true
        endIsoDateTime:
          type: string
          xml:
            attribute: true
        ellapsedTimeInSeconds:
          type: integer
          format: int64
          xml:
            attribute: true
        totalTimeInSeconds:
          type: integer
          format: int64
          xml:
            attribute: true
        running:
          type: boolean
        type:
          type: string
          xml:
            attribute: true
      xml:
        name: report
    ReplaceEntryChange:
      type: object
      properties:
        originalVal:
          type: string
        changedVal:
          type: string
        fieldId:
          type: string
    ReplaceReport:
      type: object
      properties:
        message:
          type: string
        uuid:
          type: string
        draft:
          type: boolean
        approved:
          type: boolean
        date:
          type: string
        elementChanges:
          type: array
          items:
            $ref: '#/components/schemas/ReplaceEntryChange'
    GroupOperations:
      type: object
      properties:
        operations:
          type: object
          additionalProperties:
            type: boolean
        group:
          type: integer
          format: int32
    SharingParameter:
      type: object
      properties:
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/GroupOperations'
        clear:
          type: boolean
      description: Privileges
    UserSearchDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        url:
          type: string
        featuredType:
          type: string
        creationDate:
          type: string
        creatorId:
          type: integer
          format: int32
        creator:
          type: string
        logo:
          type: string
        names:
          type: object
          additionalProperties:
            type: string
        groups:
          type: array
          items:
            type: integer
            format: int32
      description: User search details
    PageProperties:
      type: object
      properties:
        language:
          type: string
        pageId:
          type: string
        sections:
          type: array
          items:
            type: string
            enum:
              - TOP
              - FOOTER
              - MENU
              - SUBMENU
              - CUSTOM_MENU1
              - CUSTOM_MENU2
              - CUSTOM_MENU3
        status:
          type: string
          enum:
            - PUBLIC
            - PUBLIC_ONLY
            - PRIVATE
            - HIDDEN
        link:
          type: string
        content:
          type: string
        label:
          type: string
        format:
          type: string
          enum:
            - LINK
            - HTML
            - HTMLPAGE
            - TEXT
    MetadataCategory:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        label:
          type: object
          additionalProperties:
            type: string
    UserGroupsResponse:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        userName:
          type: string
        groupId:
          type: integer
          format: int32
        groupName:
          type: string
        userProfile:
          type: string
    PaginatedUserSearchResponse:
      type: object
      properties:
        total:
          type: integer
          format: int64
        rows:
          type: array
          items:
            $ref: '#/components/schemas/UserSearchDto'
    ProxyConfiguration:
      type: object
      properties:
        enabled:
          type: boolean
        host:
          type: string
        port:
          type: string
        username:
          type: string
        password:
          type: string
        ignoreHostList:
          type: string
        proxyConfiguredInSystemProperties:
          type: boolean
    Group:
      type: object
      properties:
        logo:
          type: string
        website:
          type: string
        defaultCategory:
          $ref: '#/components/schemas/MetadataCategory'
        allowedCategories:
          type: array
          items:
            $ref: '#/components/schemas/MetadataCategory'
        enableAllowedCategories:
          type: boolean
        reserved:
          type: boolean
        email:
          type: string
        referrer:
          type: integer
          format: int32
        description:
          type: string
        id:
          type: integer
          format: int32
        name:
          type: string
        label:
          type: object
          additionalProperties:
            type: string
      description: Group details
    Selection:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        watchable:
          type: boolean
        label:
          type: object
          additionalProperties:
            type: string
    Translations:
      type: object
      properties:
        fieldName:
          type: string
        id:
          type: integer
          format: int32
        langId:
          type: string
        value:
          type: string
    AnonymousMapserver:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        configurl:
          type: string
        wmsurl:
          type: string
        wfsurl:
          type: string
        wcsurl:
          type: string
        stylerurl:
          type: string
        namespacePrefix:
          type: string
        pushStyleInWorkspace_JpaWorkaround:
          type: string
          writeOnly: true
        pushStyleInWorkspace:
          $ref: '#/components/schemas/MapServer'
        namespace:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int32
        name:
          type: string
    BatchEditing:
      required:
        - section
      type: object
      properties:
        section:
          type: array
          items:
            $ref: '#/components/schemas/Section'
      xml:
        name: batchEditing
    Field:
      type: object
      properties:
        template:
          type: string
        name:
          type: string
          xml:
            attribute: true
        xpath:
          type: string
          xml:
            attribute: true
        indexField:
          type: string
          xml:
            attribute: true
        use:
          type: string
          xml:
            attribute: true
        removable:
          type: boolean
          xml:
            attribute: true
        insertMode:
          type: string
          xml:
            attribute: true
        codelist:
          type: string
          xml:
            attribute: true
    Section:
      required:
        - field
      type: object
      properties:
        field:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        name:
          type: string
          xml:
            attribute: true
    Associated:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/AssociatedSiblingMetadataItem'
    AssociatedSiblingMetadataItem:
      required:
        - description
        - mdType
        - title
      type: object
      properties:
        id:
          type: string
        url:
          $ref: '#/components/schemas/MultilingualValue'
        type:
          type: string
        title:
          $ref: '#/components/schemas/MultilingualValue'
        description:
          $ref: '#/components/schemas/Description'
        mdType:
          type: array
          items:
            type: string
        origin:
          type: string
        agg_isTemporalStatOf:
          type: array
          items:
            type: string
        agg_largerWorkCitation:
          type: array
          items:
            type: string
        agg_isDescriptionOf:
          type: array
          items:
            type: string
    AttributeTable:
      type: object
      properties:
        element:
          type: array
          items:
            $ref: '#/components/schemas/Element'
    Children:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/RelatedMetadataItem'
    Dataset:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/RelatedMetadataItem'
    Description:
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedString'
    Element:
      type: object
      properties:
        name:
          type: string
        definition:
          type: string
        code:
          type: string
        link:
          type: string
        type:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/Values'
    FCRelatedMetadataItem:
      required:
        - description
        - featureType
        - mdType
        - title
      type: object
      properties:
        id:
          type: string
        url:
          $ref: '#/components/schemas/MultilingualValue'
        type:
          type: string
        title:
          $ref: '#/components/schemas/MultilingualValue'
        description:
          $ref: '#/components/schemas/Description'
        mdType:
          type: array
          items:
            type: string
        origin:
          type: string
        featureType:
          $ref: '#/components/schemas/FeatureType'
    Fcat:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/FCRelatedMetadataItem'
    FeatureType:
      type: object
      properties:
        attributeTable:
          $ref: '#/components/schemas/AttributeTable'
    Hasfeaturecats:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/RelatedMetadataItem'
    Hassource:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/RelatedMetadataItem'
    LocalizedString:
      type: object
      properties:
        value:
          type: string
        lang:
          type: string
          xml:
            attribute: true
        href:
          type: string
          xml:
            attribute: true
    MultilingualValue:
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/LocalizedString'
    Online:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/RelatedLinkItem'
    Parent:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/RelatedMetadataItem'
    Related:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/RelatedMetadataItem'
    RelatedLinkItem:
      required:
        - description
        - title
      type: object
      properties:
        id:
          type: string
        url:
          $ref: '#/components/schemas/MultilingualValue'
        type:
          type: string
        title:
          $ref: '#/components/schemas/MultilingualValue'
        protocol:
          type: string
        description:
          $ref: '#/components/schemas/Description'
        function:
          type: string
        mimeType:
          type: string
        applicationProfile:
          type: string
    RelatedMetadataItem:
      required:
        - description
        - mdType
        - title
      type: object
      properties:
        id:
          type: string
        url:
          $ref: '#/components/schemas/MultilingualValue'
        type:
          type: string
        title:
          $ref: '#/components/schemas/MultilingualValue'
        description:
          $ref: '#/components/schemas/Description'
        mdType:
          type: array
          items:
            type: string
        origin:
          type: string
    RelatedResponse:
      type: object
      properties:
        children:
          $ref: '#/components/schemas/Children'
        parent:
          $ref: '#/components/schemas/Parent'
        siblings:
          $ref: '#/components/schemas/Siblings'
        associated:
          $ref: '#/components/schemas/Associated'
        services:
          $ref: '#/components/schemas/Service'
        datasets:
          $ref: '#/components/schemas/Dataset'
        fcats:
          $ref: '#/components/schemas/Fcat'
        hasfeaturecats:
          $ref: '#/components/schemas/Hasfeaturecats'
        sources:
          $ref: '#/components/schemas/Source'
        hassources:
          $ref: '#/components/schemas/Hassource'
        related:
          $ref: '#/components/schemas/Related'
        onlines:
          $ref: '#/components/schemas/Online'
        thumbnails:
          $ref: '#/components/schemas/Thumbnail'
      xml:
        name: related
    RelatedSiblingMetadataItem:
      required:
        - associationType
        - description
        - initiativeType
        - mdType
        - title
      type: object
      properties:
        id:
          type: string
        url:
          $ref: '#/components/schemas/MultilingualValue'
        type:
          type: string
        title:
          $ref: '#/components/schemas/MultilingualValue'
        description:
          $ref: '#/components/schemas/Description'
        mdType:
          type: array
          items:
            type: string
        origin:
          type: string
        associationType:
          type: string
        initiativeType:
          type: string
    RelatedThumbnailItem:
      required:
        - title
      type: object
      properties:
        id:
          type: string
        url:
          $ref: '#/components/schemas/MultilingualValue'
        type:
          type: string
        title:
          $ref: '#/components/schemas/MultilingualValue'
    Service:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/RelatedMetadataItem'
    Siblings:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/RelatedSiblingMetadataItem'
    Source:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/RelatedMetadataItem'
    Thumbnail:
      type: object
      properties:
        item:
          type: array
          items:
            $ref: '#/components/schemas/RelatedThumbnailItem'
    Values:
      type: object
      properties:
        label:
          type: string
        code:
          type: string
        definition:
          type: string
    ProcessingReport:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Report'
        infos:
          type: array
          items:
            $ref: '#/components/schemas/InfoReport'
        uuid:
          type: string
          xml:
            attribute: true
        startIsoDateTime:
          type: string
          xml:
            attribute: true
        endIsoDateTime:
          type: string
          xml:
            attribute: true
        ellapsedTimeInSeconds:
          type: integer
          format: int64
          xml:
            attribute: true
        totalTimeInSeconds:
          type: integer
          format: int64
          xml:
            attribute: true
        running:
          type: boolean
        type:
          type: string
          xml:
            attribute: true
      xml:
        name: report
    FeatureResponse:
      type: object
      properties:
        decodeMap:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      xml:
        name: related
    FormatterData:
      type: object
      properties:
        schema:
          type: string
        id:
          type: string
      xml:
        name: formatter
    FormatterDataResponse:
      type: object
      properties:
        formatters:
          type: array
          xml:
            name: formatter
          items:
            $ref: '#/components/schemas/FormatterData'
      xml:
        name: formatters
    SystemInfo:
      type: object
      properties:
        stagingProfile:
          type: string
        buildDate:
          type: string
        version:
          type: string
        subVersion:
          type: string
        buildOsInfo:
          type: string
        buildJavaVersion:
          type: string
        buildJavaVendor:
          type: string
        scmUrl:
          type: string
        scmRevision:
          type: string
        devMode:
          type: boolean
    PasswordResetDto:
      type: object
      properties:
        passwordOld:
          type: string
        password:
          type: string
        password2:
          type: string
    Address:
      type: object
      properties:
        country:
          type: string
        state:
          type: string
        address:
          type: string
        id:
          type: integer
          format: int32
        city:
          type: string
        zip:
          type: string
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    User:
      type: object
      properties:
        security:
          $ref: '#/components/schemas/UserSecurity'
        email:
          type: string
        profile:
          type: string
          enum:
            - Administrator
            - UserAdmin
            - Reviewer
            - Editor
            - RegisteredUser
            - Guest
            - Monitor
        surname:
          type: string
        emailAddresses:
          uniqueItems: true
          type: array
          items:
            type: string
        addresses:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Address'
        primaryAddress:
          $ref: '#/components/schemas/Address'
        organisation:
          type: string
        kind:
          type: string
        lastLoginDate:
          type: string
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        accountNonExpired:
          type: boolean
        accountNonLocked:
          type: boolean
        credentialsNonExpired:
          type: boolean
        enabled:
          type: boolean
        username:
          type: string
        id:
          type: integer
          format: int32
        name:
          type: string
    UserSecurity:
      type: object
      properties:
        nodeId:
          type: string
        securityNotifications:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - UPDATE_HASH_REQUIRED
              - UNKNOWN
        securityNotificationsString:
          $ref: '#/components/schemas/UserSecurity'
        authType:
          type: string
    ExtentDto:
      type: object
      properties:
        href:
          type: string
        type:
          type: string
        xpath:
          type: string
        description:
          type: string
    Language:
      type: object
      properties:
        inspire_JPAWorkaround:
          type: string
          writeOnly: true
        inspire:
          type: boolean
        id:
          type: string
        name:
          type: string
    Reports:
      type: object
      properties:
        report:
          type: array
          items:
            $ref: '#/components/schemas/Report'
      xml:
        name: reports
    RatingCriteria:
      type: object
      properties:
        internal:
          type: boolean
        id:
          type: integer
          format: int32
        name:
          type: string
        label:
          type: object
          additionalProperties:
            type: string
    SavedQuery:
      type: object
      properties:
        id:
          type: string
        xpath:
          type: string
        label:
          type: string
        cleanValues:
          type: string
        parameters:
          type: array
          items:
            type: string
    UiSetting:
      type: object
      properties:
        id:
          type: string
        configuration:
          type: string
    Operation:
      type: object
      properties:
        reserved:
          type: boolean
        reservedOperation:
          type: string
          enum:
            - view
            - download
            - editing
            - notify
            - dynamic
            - featured
        id:
          type: integer
          format: int32
        name:
          type: string
        label:
          type: object
          additionalProperties:
            type: string
    ThesaurusInfo:
      type: object
      properties:
        filename:
          type: string
        description:
          type: string
        multilingualTitles:
          type: object
          additionalProperties:
            type: string
        multilingualDescriptions:
          type: object
          additionalProperties:
            type: string
        title:
          type: string
        defaultNamespace:
          type: string
        dname:
          type: string
        type:
          type: string
      description: Thesaurus information
    Codelist:
      type: object
      properties:
        entry:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
        name:
          type: string
          xml:
            attribute: true
        alias:
          type: string
          xml:
            attribute: true
      xml:
        name: codelist
    Entry:
      required:
        - code
        - description
        - label
      type: object
      properties:
        code:
          type: string
        label:
          type: string
        description:
          type: string
        hideInEditMode:
          type: string
          xml:
            attribute: true
      xml:
        name: entry
    OwnerResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        records:
          type: integer
          format: int64
    MapService:
      type: object
      properties:
        url:
          type: string
        urlType:
          type: string
        useProxy:
          type: boolean
        authType:
          type: string
    Status:
      type: object
      properties:
        id:
          type: string
        state:
          type: string
          enum:
            - RED
            - UNINITIALIZED
            - YELLOW
            - GREEN
            - DISABLED
        date:
          type: string
          format: date-time
        message:
          type: string
    MetadataStatusParameter:
      type: object
      properties:
        type:
          type: string
          enum:
            - workflow
            - task
            - event
        status:
          type: integer
          format: int32
        changeMessage:
          type: string
        dueDate:
          type: string
        closeDate:
          type: string
        owner:
          type: integer
          format: int32
      description: Metadata status
    AssociatedRecord:
      type: object
      properties:
        origin:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
        _source:
          $ref: '#/components/schemas/JsonNode'
        _id:
          type: string
    JsonNode:
      type: object
      properties:
        nodeType:
          type: string
          enum:
            - ARRAY
            - BINARY
            - BOOLEAN
            - MISSING
            - "NULL"
            - NUMBER
            - OBJECT
            - POJO
            - STRING
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        textual:
          type: boolean
        boolean:
          type: boolean
        binary:
          type: boolean
        valueNode:
          type: boolean
        containerNode:
          type: boolean
        missingNode:
          type: boolean
        object:
          type: boolean
        pojo:
          type: boolean
        number:
          type: boolean
        integralNumber:
          type: boolean
        floatingPointNumber:
          type: boolean
        short:
          type: boolean
        int:
          type: boolean
        long:
          type: boolean
        float:
          type: boolean
        double:
          type: boolean
        array:
          type: boolean
        empty:
          type: boolean
        "null":
          type: boolean
    BatchEditParameter:
      required:
        - value
        - xpath
      type: object
      properties:
        xpath:
          type: string
        value:
          type: string
        condition:
          type: string
      xml:
        name: edit
    IProcessingReport:
      type: object
      properties:
        uuid:
          type: string
        startIsoDateTime:
          type: string
        endIsoDateTime:
          type: string
        ellapsedTimeInSeconds:
          type: integer
          format: int64
        totalTimeInSeconds:
          type: integer
          format: int64
        running:
          type: boolean
        type:
          type: string
    SuggestionType:
      required:
        - name
        - operational
      type: object
      properties:
        name:
          type: string
        operational:
          type: string
        params:
          type: string
        process:
          type: string
          xml:
            attribute: true
        id:
          type: string
          xml:
            attribute: true
        category:
          type: string
          xml:
            attribute: true
        target:
          type: string
          xml:
            attribute: true
    PasswordUpdateParameter:
      type: object
      properties:
        password:
          type: string
        changeKey:
          type: string
      description: The new password and a valid change key
    TransferRequest:
      type: object
      properties:
        sourceUser:
          type: integer
          format: int32
        sourceGroup:
          type: integer
          format: int32
        targetUser:
          type: integer
          format: int32
        targetGroup:
          type: integer
          format: int32
    SiteInformation:
      type: object
      properties:
        catalogue:
          type: object
          additionalProperties:
            type: string
        index:
          type: object
          additionalProperties:
            type: string
        main:
          type: object
          additionalProperties:
            type: string
        database:
          type: object
          additionalProperties:
            type: string
        version:
          type: object
          additionalProperties:
            type: string
    IsoLanguage:
      type: object
      properties:
        id:
          type: integer
          format: int32
        code:
          type: string
        shortCode:
          type: string
        label:
          type: object
          additionalProperties:
            type: string
    MeResponse:
      type: object
      properties:
        id:
          type: string
        profile:
          type: string
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        hash:
          type: string
        organisation:
          type: string
        admin:
          type: boolean
        groupsWithRegisteredUser:
          type: array
          items:
            type: integer
            format: int32
        groupsWithEditor:
          type: array
          items:
            type: integer
            format: int32
        groupsWithReviewer:
          type: array
          items:
            type: integer
            format: int32
        groupsWithUserAdmin:
          type: array
          items:
            type: integer
            format: int32
    MetadataBatchApproveParameter:
      type: object
      properties:
        uuids:
          type: array
          items:
            type: string
        bucket:
          type: string
        message:
          type: string
        directApproval:
          type: boolean
    Category:
      type: object
      properties:
        id:
          type: string
          xml:
            attribute: true
        label:
          type: string
          xml:
            attribute: true
    UserDto:
      type: object
      properties:
        id:
          type: string
        profile:
          type: string
        username:
          type: string
        name:
          type: string
        surname:
          type: string
        emailAddresses:
          type: array
          items:
            type: string
        organisation:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        kind:
          type: string
        password:
          type: string
        groupsRegisteredUser:
          type: array
          items:
            type: string
        groupsEditor:
          type: array
          items:
            type: string
        groupsReviewer:
          type: array
          items:
            type: string
        groupsUserAdmin:
          type: array
          items:
            type: string
        enabled:
          type: boolean
        email:
          $ref: '#/components/schemas/UserDto'
    PublicationOption:
      type: object
      properties:
        name:
          type: string
        publicationGroup:
          type: string
          enum:
            - all
            - intranet
            - guest
        publicationOperations:
          type: array
          items:
            type: string
            enum:
              - view
              - download
              - editing
              - notify
              - dynamic
              - featured
        additionalPublications:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              enum:
                - view
                - download
                - editing
                - notify
                - dynamic
                - featured
    UserGroup:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        profile:
          type: string
          enum:
            - Administrator
            - UserAdmin
            - Reviewer
            - Editor
            - RegisteredUser
            - Guest
            - Monitor
        group:
          $ref: '#/components/schemas/Group'
        id:
          $ref: '#/components/schemas/UserGroupId'
    UserGroupId:
      type: object
      properties:
        groupId:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        profile:
          type: string
          enum:
            - Administrator
            - UserAdmin
            - Reviewer
            - Editor
            - RegisteredUser
            - Guest
            - Monitor
    RatingAverage:
      type: object
      properties:
        ratingCount:
          type: integer
          format: int32
        ratingAverages:
          type: object
          additionalProperties:
            type: integer
            format: int32
        userfeedbackCount:
          type: integer
          format: int32
        lastComment:
          type: string
    UserRegisterDto:
      type: object
      properties:
        profile:
          type: string
        username:
          type: string
        email:
          type: string
        name:
          type: string
        surname:
          type: string
        organisation:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        captcha:
          type: string
      description: User details
