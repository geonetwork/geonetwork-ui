/**
 * GeoNetwork 4.2.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.2.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core'
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
} from '@angular/common/http'
import { CustomHttpParameterCodec } from '../encoder'
import { Observable } from 'rxjs'

import { BatchEditingApiModel } from '../model/models'
import { CodelistApiModel } from '../model/models'
import { ElementApiModel } from '../model/models'

import { BASE_PATH, COLLECTION_FORMATS } from '../variables'
import { Configuration } from '../configuration'

@Injectable({
  providedIn: 'root',
})
export class StandardsApiService {
  protected basePath = 'https://demo.georchestra.org/geonetwork/srv/api'
  public defaultHeaders = new HttpHeaders()
  public configuration = new Configuration()
  public encoder: HttpParameterCodec

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath
      }
      this.configuration.basePath = basePath
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()
  }

  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string
  ): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value)
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)
    }
    return httpParams
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string
  ): HttpParams {
    if (value == null) {
      return httpParams
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        ;(value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
        )
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substr(0, 10)
          )
        } else {
          throw Error('key may not be null if value is Date')
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k
            ))
        )
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value)
    } else {
      throw Error('key may not be null if value is not object or array')
    }
    return httpParams
  }

  /**
   * Get multiple codelist translations
   * All translations are combined in the same object. No distinction by codelist. This is useful if you need lots of codelists terms to be loaded.
   * @param schema Schema identifier
   * @param codelist Codelist element name or alias
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCodelistsTranslations(
    schema: string,
    codelist: Array<string>,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<{ [key: string]: string }>
  public getCodelistsTranslations(
    schema: string,
    codelist: Array<string>,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<{ [key: string]: string }>>
  public getCodelistsTranslations(
    schema: string,
    codelist: Array<string>,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<{ [key: string]: string }>>
  public getCodelistsTranslations(
    schema: string,
    codelist: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (schema === null || schema === undefined) {
      throw new Error(
        'Required parameter schema was null or undefined when calling getCodelistsTranslations.'
      )
    }
    if (codelist === null || codelist === undefined) {
      throw new Error(
        'Required parameter codelist was null or undefined when calling getCodelistsTranslations.'
      )
    }

    let queryParameters = new HttpParams({ encoder: this.encoder })
    if (codelist) {
      codelist.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'codelist'
        )
      })
    }

    let headers = this.defaultHeaders

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json']
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts)
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    let responseType_: 'text' | 'json' = 'json'
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text'
    }

    return this.httpClient.get<{ [key: string]: string }>(
      `${this.configuration.basePath}/standards/${encodeURIComponent(
        String(schema)
      )}/codelists`,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    )
  }

  /**
   * Get batch editor configuration for a standard
   * @param schema Schema identifier
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getConfiguration(
    schema: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<{ [key: string]: BatchEditingApiModel }>
  public getConfiguration(
    schema: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<{ [key: string]: BatchEditingApiModel }>>
  public getConfiguration(
    schema: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<{ [key: string]: BatchEditingApiModel }>>
  public getConfiguration(
    schema: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (schema === null || schema === undefined) {
      throw new Error(
        'Required parameter schema was null or undefined when calling getConfiguration.'
      )
    }

    let headers = this.defaultHeaders

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json']
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts)
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    let responseType_: 'text' | 'json' = 'json'
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text'
    }

    return this.httpClient.get<{ [key: string]: BatchEditingApiModel }>(
      `${this.configuration.basePath}/standards/${encodeURIComponent(
        String(schema)
      )}/batchconfiguration`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    )
  }

  /**
   * Get batch editor configuration for standards
   * @param schema Schema identifiers
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getConfigurations(
    schema?: Array<string>,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<{ [key: string]: BatchEditingApiModel }>
  public getConfigurations(
    schema?: Array<string>,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<{ [key: string]: BatchEditingApiModel }>>
  public getConfigurations(
    schema?: Array<string>,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<{ [key: string]: BatchEditingApiModel }>>
  public getConfigurations(
    schema?: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder })
    if (schema) {
      schema.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'schema'
        )
      })
    }

    let headers = this.defaultHeaders

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json']
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts)
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    let responseType_: 'text' | 'json' = 'json'
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text'
    }

    return this.httpClient.get<{ [key: string]: BatchEditingApiModel }>(
      `${this.configuration.basePath}/standards/batchconfiguration`,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    )
  }

  /**
   * Get editor associated resources panel configuration
   * @param schema Schema identifier
   * @param name Configuration identifier
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getEditorAssociatedPanelConfiguration(
    schema: string,
    name: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<string>
  public getEditorAssociatedPanelConfiguration(
    schema: string,
    name: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<string>>
  public getEditorAssociatedPanelConfiguration(
    schema: string,
    name: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<string>>
  public getEditorAssociatedPanelConfiguration(
    schema: string,
    name: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (schema === null || schema === undefined) {
      throw new Error(
        'Required parameter schema was null or undefined when calling getEditorAssociatedPanelConfiguration.'
      )
    }
    if (name === null || name === undefined) {
      throw new Error(
        'Required parameter name was null or undefined when calling getEditorAssociatedPanelConfiguration.'
      )
    }

    let headers = this.defaultHeaders

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json']
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts)
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    let responseType_: 'text' | 'json' = 'json'
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text'
    }

    return this.httpClient.get<string>(
      `${this.configuration.basePath}/standards/${encodeURIComponent(
        String(schema)
      )}/editor/associatedpanel/config/${encodeURIComponent(
        String(name)
      )}.json`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    )
  }

  /**
   * Get descriptor details
   * @param schema Schema identifier
   * @param element Descriptor name
   * @param parent
   * @param displayIf
   * @param xpath
   * @param isoType
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getElementDetails(
    schema: string,
    element: string,
    parent?: string,
    displayIf?: string,
    xpath?: string,
    isoType?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }
  ): Observable<ElementApiModel>
  public getElementDetails(
    schema: string,
    element: string,
    parent?: string,
    displayIf?: string,
    xpath?: string,
    isoType?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }
  ): Observable<HttpResponse<ElementApiModel>>
  public getElementDetails(
    schema: string,
    element: string,
    parent?: string,
    displayIf?: string,
    xpath?: string,
    isoType?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }
  ): Observable<HttpEvent<ElementApiModel>>
  public getElementDetails(
    schema: string,
    element: string,
    parent?: string,
    displayIf?: string,
    xpath?: string,
    isoType?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }
  ): Observable<any> {
    if (schema === null || schema === undefined) {
      throw new Error(
        'Required parameter schema was null or undefined when calling getElementDetails.'
      )
    }
    if (element === null || element === undefined) {
      throw new Error(
        'Required parameter element was null or undefined when calling getElementDetails.'
      )
    }

    let queryParameters = new HttpParams({ encoder: this.encoder })
    if (parent !== undefined && parent !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>parent,
        'parent'
      )
    }
    if (displayIf !== undefined && displayIf !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>displayIf,
        'displayIf'
      )
    }
    if (xpath !== undefined && xpath !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>xpath,
        'xpath'
      )
    }
    if (isoType !== undefined && isoType !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>isoType,
        'isoType'
      )
    }

    let headers = this.defaultHeaders

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'application/json',
        'application/xml',
      ]
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts)
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    let responseType_: 'text' | 'json' = 'json'
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text'
    }

    return this.httpClient.get<ElementApiModel>(
      `${this.configuration.basePath}/standards/${encodeURIComponent(
        String(schema)
      )}/descriptors/${encodeURIComponent(String(element))}/details`,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    )
  }

  /**
   * Get codelist details
   * @param schema Schema identifier
   * @param codelist Codelist element name or alias
   * @param parent Parent name with namespace which may indicate a more precise label as defined in context attribute.
   * @param displayIf Display if condition as defined in the codelist.xml file. Allows to select a more precise codelist when more than one is defined for same name.
   * @param xpath XPath of the element to target which may indicate a more precise label as defined in context attribute.
   * @param isoType ISO type of the element to target which may indicate a more precise label as defined in context attribute. (Same as context. TODO: Deprecate ?)
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getSchemaCodelistsWithDetails(
    schema: string,
    codelist: string,
    parent?: string,
    displayIf?: string,
    xpath?: string,
    isoType?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }
  ): Observable<CodelistApiModel>
  public getSchemaCodelistsWithDetails(
    schema: string,
    codelist: string,
    parent?: string,
    displayIf?: string,
    xpath?: string,
    isoType?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }
  ): Observable<HttpResponse<CodelistApiModel>>
  public getSchemaCodelistsWithDetails(
    schema: string,
    codelist: string,
    parent?: string,
    displayIf?: string,
    xpath?: string,
    isoType?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }
  ): Observable<HttpEvent<CodelistApiModel>>
  public getSchemaCodelistsWithDetails(
    schema: string,
    codelist: string,
    parent?: string,
    displayIf?: string,
    xpath?: string,
    isoType?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }
  ): Observable<any> {
    if (schema === null || schema === undefined) {
      throw new Error(
        'Required parameter schema was null or undefined when calling getSchemaCodelistsWithDetails.'
      )
    }
    if (codelist === null || codelist === undefined) {
      throw new Error(
        'Required parameter codelist was null or undefined when calling getSchemaCodelistsWithDetails.'
      )
    }

    let queryParameters = new HttpParams({ encoder: this.encoder })
    if (parent !== undefined && parent !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>parent,
        'parent'
      )
    }
    if (displayIf !== undefined && displayIf !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>displayIf,
        'displayIf'
      )
    }
    if (xpath !== undefined && xpath !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>xpath,
        'xpath'
      )
    }
    if (isoType !== undefined && isoType !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>isoType,
        'isoType'
      )
    }

    let headers = this.defaultHeaders

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'application/json',
        'application/xml',
      ]
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts)
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    let responseType_: 'text' | 'json' = 'json'
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text'
    }

    return this.httpClient.get<CodelistApiModel>(
      `${this.configuration.basePath}/standards/${encodeURIComponent(
        String(schema)
      )}/codelists/${encodeURIComponent(String(codelist))}/details`,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    )
  }

  /**
   * Get codelist translations
   * @param schema Schema identifier
   * @param codelist Codelist element name or alias
   * @param parent
   * @param displayIf
   * @param xpath
   * @param isoType
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getSchemaTranslations(
    schema: string,
    codelist: string,
    parent?: string,
    displayIf?: string,
    xpath?: string,
    isoType?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<{ [key: string]: string }>
  public getSchemaTranslations(
    schema: string,
    codelist: string,
    parent?: string,
    displayIf?: string,
    xpath?: string,
    isoType?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<{ [key: string]: string }>>
  public getSchemaTranslations(
    schema: string,
    codelist: string,
    parent?: string,
    displayIf?: string,
    xpath?: string,
    isoType?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<{ [key: string]: string }>>
  public getSchemaTranslations(
    schema: string,
    codelist: string,
    parent?: string,
    displayIf?: string,
    xpath?: string,
    isoType?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (schema === null || schema === undefined) {
      throw new Error(
        'Required parameter schema was null or undefined when calling getSchemaTranslations.'
      )
    }
    if (codelist === null || codelist === undefined) {
      throw new Error(
        'Required parameter codelist was null or undefined when calling getSchemaTranslations.'
      )
    }

    let queryParameters = new HttpParams({ encoder: this.encoder })
    if (parent !== undefined && parent !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>parent,
        'parent'
      )
    }
    if (displayIf !== undefined && displayIf !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>displayIf,
        'displayIf'
      )
    }
    if (xpath !== undefined && xpath !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>xpath,
        'xpath'
      )
    }
    if (isoType !== undefined && isoType !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>isoType,
        'isoType'
      )
    }

    let headers = this.defaultHeaders

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json']
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts)
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    let responseType_: 'text' | 'json' = 'json'
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text'
    }

    return this.httpClient.get<{ [key: string]: string }>(
      `${this.configuration.basePath}/standards/${encodeURIComponent(
        String(schema)
      )}/codelists/${encodeURIComponent(String(codelist))}`,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    )
  }

  /**
   * Get standards
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getStandardConfigurations(
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any>
  public getStandardConfigurations(
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<any>>
  public getStandardConfigurations(
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<any>>
  public getStandardConfigurations(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    let headers = this.defaultHeaders

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json']
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts)
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    let responseType_: 'text' | 'json' = 'json'
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text'
    }

    return this.httpClient.get<any>(
      `${this.configuration.basePath}/standards`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    )
  }

  /**
   * Reload standards
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public reloadSchema(
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any>
  public reloadSchema(
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<any>>
  public reloadSchema(
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<any>>
  public reloadSchema(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    let headers = this.defaultHeaders

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json']
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts)
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    let responseType_: 'text' | 'json' = 'json'
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text'
    }

    return this.httpClient.get<any>(
      `${this.configuration.basePath}/standards/reload`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    )
  }
}
