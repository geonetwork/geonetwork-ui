/**
 * GeoNetwork 4.2.7 OpenAPI Documentation
 * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.
 *
 * The version of the OpenAPI document: 4.2.7
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core'
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
} from '@angular/common/http'
import { CustomHttpParameterCodec } from '../encoder'
import { Observable } from 'rxjs'

import { CategoryApiModel } from '../model/models'
import { ListRegionsResponseApiModel } from '../model/models'

import { BASE_PATH, COLLECTION_FORMATS } from '../variables'
import { Configuration } from '../configuration'

@Injectable({
  providedIn: 'root',
})
export class RegionsApiService {
  protected basePath = 'https://demo.georchestra.org/geonetwork/srv/api'
  public defaultHeaders = new HttpHeaders()
  public configuration = new Configuration()
  public encoder: HttpParameterCodec

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath
      }
      this.configuration.basePath = basePath
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()
  }

  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string
  ): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value)
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)
    }
    return httpParams
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string
  ): HttpParams {
    if (value == null) {
      return httpParams
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        ;(value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
        )
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substr(0, 10)
          )
        } else {
          throw Error('key may not be null if value is Date')
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k
            ))
        )
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value)
    } else {
      throw Error('key may not be null if value is not object or array')
    }
    return httpParams
  }

  /**
   * Get geometry as image
   * A rendering of the geometry as a png.
   * @param mapsrs (optional) the background map projection. If not passed uses the region/getmap/mapproj setting. If the setting is not set defaults to EPSG:4326
   * @param width (optional) width of the image that is created. Only one of width and height are permitted
   * @param height (optional) height of the image that is created. Only one of width and height are permitted
   * @param background (optional) URL for loading a background image for regions or a key that references the namedBackgrounds (configured in config-spring-geonetwork.xml). A WMS Getmap request is the typical example. The URL must be parameterized with the following parameters: minx, maxx, miny, maxy, width, height
   * @param geom (optional) a wkt or gml encoded geometry.
   * @param geomtype (optional) defines if geom is wkt or gml. Allowed values are wkt and gml. if not specified the it is assumed the geometry is wkt
   * @param geomsrs
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getGeomAsImage(
    mapsrs?: string,
    width?: number,
    height?: number,
    background?: string,
    geom?: string,
    geomtype?: string,
    geomsrs?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' | 'image/png' }
  ): Observable<Array<string>>
  public getGeomAsImage(
    mapsrs?: string,
    width?: number,
    height?: number,
    background?: string,
    geom?: string,
    geomtype?: string,
    geomsrs?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' | 'image/png' }
  ): Observable<HttpResponse<Array<string>>>
  public getGeomAsImage(
    mapsrs?: string,
    width?: number,
    height?: number,
    background?: string,
    geom?: string,
    geomtype?: string,
    geomsrs?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' | 'image/png' }
  ): Observable<HttpEvent<Array<string>>>
  public getGeomAsImage(
    mapsrs?: string,
    width?: number,
    height?: number,
    background?: string,
    geom?: string,
    geomtype?: string,
    geomsrs?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' | 'image/png' }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder })
    if (mapsrs !== undefined && mapsrs !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>mapsrs,
        'mapsrs'
      )
    }
    if (width !== undefined && width !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>width,
        'width'
      )
    }
    if (height !== undefined && height !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>height,
        'height'
      )
    }
    if (background !== undefined && background !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>background,
        'background'
      )
    }
    if (geom !== undefined && geom !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>geom, 'geom')
    }
    if (geomtype !== undefined && geomtype !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>geomtype,
        'geomtype'
      )
    }
    if (geomsrs !== undefined && geomsrs !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>geomsrs,
        'geomsrs'
      )
    }

    let headers = this.defaultHeaders

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json', 'image/png']
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts)
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    let responseType_: 'text' | 'json' = 'json'
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text'
    }

    return this.httpClient.get<Array<string>>(
      `${this.configuration.basePath}/regions/geom.png`,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    )
  }

  /**
   * Get list of region types
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRegionTypes(
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<Array<CategoryApiModel>>
  public getRegionTypes(
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<Array<CategoryApiModel>>>
  public getRegionTypes(
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<Array<CategoryApiModel>>>
  public getRegionTypes(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    let headers = this.defaultHeaders

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json']
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts)
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    let responseType_: 'text' | 'json' = 'json'
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text'
    }

    return this.httpClient.get<Array<CategoryApiModel>>(
      `${this.configuration.basePath}/regions/types`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    )
  }

  /**
   * Get list of regions
   * @param label
   * @param categoryId
   * @param maxRecords
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRegions(
    label?: string,
    categoryId?: string,
    maxRecords?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }
  ): Observable<ListRegionsResponseApiModel>
  public getRegions(
    label?: string,
    categoryId?: string,
    maxRecords?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }
  ): Observable<HttpResponse<ListRegionsResponseApiModel>>
  public getRegions(
    label?: string,
    categoryId?: string,
    maxRecords?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }
  ): Observable<HttpEvent<ListRegionsResponseApiModel>>
  public getRegions(
    label?: string,
    categoryId?: string,
    maxRecords?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder })
    if (label !== undefined && label !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>label,
        'label'
      )
    }
    if (categoryId !== undefined && categoryId !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>categoryId,
        'categoryId'
      )
    }
    if (maxRecords !== undefined && maxRecords !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>maxRecords,
        'maxRecords'
      )
    }

    let headers = this.defaultHeaders

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'application/json',
        'application/xml',
      ]
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts)
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    let responseType_: 'text' | 'json' = 'json'
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text'
    }

    return this.httpClient.get<ListRegionsResponseApiModel>(
      `${this.configuration.basePath}/regions`,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    )
  }
}
