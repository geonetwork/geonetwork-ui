import { CsvReader, parseCsv } from './csv'
import fetchMock from 'fetch-mock-jest'
import path from 'path'
import fs from 'fs/promises'
import { useCache } from '@camptocamp/ogc-client'

afterEach(() => {
  jest.clearAllMocks()
})

//todo: fix this test, to run without mocking useCache
jest.mock('@camptocamp/ogc-client', () => ({
  useCache: jest.fn(async (factory) =>
    JSON.parse(JSON.stringify(await factory()))
  ),
  sharedFetch: jest.fn((url) => global.fetch(url)),
}))

describe('CSV parsing', () => {
  describe('parseCsv', () => {
    describe('valid CSV with id', () => {
      it('returns a parsed object', () => {
        expect(
          parseCsv(`OBJID,DEP_NOM,DEP_NUM,FRANCE,FACADE,TYPE,TRANSITION,COMMUNE,POINT,LONG,LAT,QEB_2013,QEB_2014,QEB_2015,QEB_2016,QEB_2017,QEB_2018,QEB_2019,QEB_2020
"1",AIN,"01",Métropole,Métropole,douce,,ANGLEFORT,PLAN D'EAU D'ANGLEFORT,,,,,,,,,5N,5N`)
        ).toEqual({
          items: [
            {
              geometry: null,
              id: '1',
              properties: {
                COMMUNE: 'ANGLEFORT',
                DEP_NOM: 'AIN',
                DEP_NUM: 1,
                FACADE: 'Métropole',
                FRANCE: 'Métropole',
                LAT: '',
                LONG: '',
                POINT: "PLAN D'EAU D'ANGLEFORT",
                QEB_2013: '',
                QEB_2014: '',
                QEB_2015: '',
                QEB_2016: '',
                QEB_2017: '',
                QEB_2018: '',
                QEB_2019: '5N',
                QEB_2020: '5N',
                TRANSITION: '',
                TYPE: 'douce',
              },
              type: 'Feature',
            },
          ],
          properties: [
            {
              label: 'DEP_NOM',
              name: 'DEP_NOM',
              type: 'string',
            },
            {
              label: 'DEP_NUM',
              name: 'DEP_NUM',
              type: 'number',
            },
            {
              label: 'FRANCE',
              name: 'FRANCE',
              type: 'string',
            },
            {
              label: 'FACADE',
              name: 'FACADE',
              type: 'string',
            },
            {
              label: 'TYPE',
              name: 'TYPE',
              type: 'string',
            },
            {
              label: 'TRANSITION',
              name: 'TRANSITION',
              type: 'string',
            },
            {
              label: 'COMMUNE',
              name: 'COMMUNE',
              type: 'string',
            },
            {
              label: 'POINT',
              name: 'POINT',
              type: 'string',
            },
            {
              label: 'LONG',
              name: 'LONG',
              type: 'string',
            },
            {
              label: 'LAT',
              name: 'LAT',
              type: 'string',
            },
            {
              label: 'QEB_2013',
              name: 'QEB_2013',
              type: 'string',
            },
            {
              label: 'QEB_2014',
              name: 'QEB_2014',
              type: 'string',
            },
            {
              label: 'QEB_2015',
              name: 'QEB_2015',
              type: 'string',
            },
            {
              label: 'QEB_2016',
              name: 'QEB_2016',
              type: 'string',
            },
            {
              label: 'QEB_2017',
              name: 'QEB_2017',
              type: 'string',
            },
            {
              label: 'QEB_2018',
              name: 'QEB_2018',
              type: 'string',
            },
            {
              label: 'QEB_2019',
              name: 'QEB_2019',
              type: 'string',
            },
            {
              label: 'QEB_2020',
              name: 'QEB_2020',
              type: 'string',
            },
          ],
        })
      })
    })
    describe('valid CSV without id', () => {
      it('returns a parsed object', () => {
        expect(
          parseCsv(`object;code_epci;nom_epci;code_dep;nom_dep;code_region;nom_region;st_area(shape);st_perimeter(shape);geo_point_2d
25;200017341;CC Lodévois et Larzac;34;HERAULT;76;OCCITANIE;554841824.0549872;125726.64842881361;43.7929180957,3.37305747018
`)
        ).toEqual({
          items: [
            {
              geometry: null,
              properties: {
                code_dep: 34,
                code_epci: 200017341,
                code_region: 76,
                geo_point_2d: '43.7929180957,3.37305747018',
                nom_dep: 'HERAULT',
                nom_epci: 'CC Lodévois et Larzac',
                nom_region: 'OCCITANIE',
                object: 25,
                'st_area(shape)': 554841824.0549872,
                'st_perimeter(shape)': 125726.64842881361,
              },
              type: 'Feature',
            },
          ],
          properties: [
            {
              label: 'object',
              name: 'object',
              type: 'number',
            },
            {
              label: 'code_epci',
              name: 'code_epci',
              type: 'number',
            },
            {
              label: 'nom_epci',
              name: 'nom_epci',
              type: 'string',
            },
            {
              label: 'code_dep',
              name: 'code_dep',
              type: 'number',
            },
            {
              label: 'nom_dep',
              name: 'nom_dep',
              type: 'string',
            },
            {
              label: 'code_region',
              name: 'code_region',
              type: 'number',
            },
            {
              label: 'nom_region',
              name: 'nom_region',
              type: 'string',
            },
            {
              label: 'st_area(shape)',
              name: 'st_area(shape)',
              type: 'number',
            },
            {
              label: 'st_perimeter(shape)',
              name: 'st_perimeter(shape)',
              type: 'number',
            },
            {
              label: 'geo_point_2d',
              name: 'geo_point_2d',
              type: 'string',
            },
          ],
        })
      })
    })
    describe('invalid CSV', () => {
      it('throws a relevant error', () => {
        expect(() =>
          parseCsv(`Passage : Commentaire;Lieu de surveillance : Identifiant;Lieu de surveillance : Mnémonique;Lieu de surveillance : Libellé;Passage : Date;Coordonnées passage : Coordonnées minx;Coordonnées passage : Coordonnées maxx;Coordonnées passage : Coordonnées miny;Coordonnées passage : Coordonnées maxy;Coordonnées passage : Coordonnées redéfinies;Prélèvement : Commentaire;Libellé de l'engin de prélévement;Prélèvement : Niveau;Prélèvement : Immersion;Prélèvement : Immersion Min;Prélèvement : Immersion Max;Prélèvement : Symbole de l'unité d'immersion;Prélèvement : Unité d'immersion;Echantillon : Commentaire;Echantillon : Identifiant interne;Echantillon : Libellé du support;Echantillon : Libellé du taxon support;Résultat : Code paramètre;Résultat : Libellé paramètre;Résultat : Libellé support;Résultat : Libellé fraction;Résultat : Libellé méthode;Résultat : Libellé précision;Résultat : Valeur de la mesure;Résultat : Valeur qualitative;Résultat : Symbole unité de mesure associé au quadruplet;Résultat : Libellé unité de mesure associé au quadruplet;Résultat : Commentaires;Résultat : Service analyste : Libellé;Passage : Date de validation;Passage : Date de qualification;Passage : Niveau de qualité;Passage : Commentaire de qualification;Prélèvement : Date de validation;Prélèvement : Date de qualification;Prélèvement : Niveau de qualité;Prélèvement : Commentaire de qualification;Echantillon : Date de validation;Echantillon : Date de qualification;Echantillon : Niveau de qualité;Echantillon : Commentaire de qualification;Résultat : Date de validation;Résultat : Date de qualification;Résultat : Niveau de qualité;Résultat : Commentaire de qualification;Prélèvement : Service préleveur : Code;Prélèvement : Service préleveur : Libellé
;1001104;"001-P-022;Oye plage;15/04/2008;1.99866073;1.99866073;51.00247775;51.00247775;0;;Main ;Emergé;0;;;m;Mètre;;5380212;Bivalve;Mytilus edulis;ASP;Toxines ASP;Bivalve;Chair totale égouttée;CL/UV toxines amnésiantes - mg/kg;;1.1;;mg.kg-1;Milligramme par kilogramme;;Laboratoire Environnement Ressources de Bretagne Occidentale;;;Non qualifié;;;;Non qualifié;;;;Non qualifié;;;;Non qualifié;;PDG-ODE-LITTORAL-LERBL;Laboratoire Environnement Ressources de Boulogne-sur-Mer
`)
        ).toThrowError('CSV parsing failed')
      })
    })
    describe('valid CSV without id', () => {
      it('returns a parsed object', () => {
        expect(
          parseCsv(`geo_point_2d;geo_shape;id_s_inond;typ_inond;scenario;datentree;datsortie;est_ref;id_tri
50.6707388795,3.12919014364;"{""type"": ""Polygon"", ""coordinates"": [[[3.130236575335796, 50.67090491119582], [3.130196047181812, 50.670893754384174], [3.130125439956143, 50.67088756464525], [3.130060708753599, 50.67086021750229], [3.130054727309224, 50.670857038069045], [3.129984041095332, 50.67082032848472], [3.129973127038841, 50.670815458161684], [3.129913382013352, 50.670804967468996], [3.129842767795712, 50.670796013649756], [3.129772104845962, 50.67077912701344], [3.129737218571207, 50.67077082679582], [3.129701483522717, 50.670767400220804], [3.129630838418297, 50.67075738740604], [3.129560202839928, 50.67074011474696], [3.12952761792054, 50.670726176531744], [3.12948954526489, 50.67071429902424], [3.129418896435583, 50.67070279644338], [3.129354364974042, 50.67068147910331], [3.129348248238403, 50.67068057014457], [3.129277605476768, 50.670671391687776], [3.129206964156518, 50.67065179462064], [3.129169858009355, 50.6706368200518], [3.129136288853051, 50.670629945127125], [3.129065684737461, 50.670624768819], [3.128995011837286, 50.670609308579806], [3.128966316281854, 50.670592153560484], [3.128924340373513, 50.67057790187465], [3.128853691981017, 50.670566443838936], [3.128824779915709, 50.67054743143591], [3.128783029049124, 50.670538303502305], [3.128712354136129, 50.6705164717115], [3.12868056080572, 50.67050270295193], [3.128641707043342, 50.67049445140144], [3.12857109024058, 50.670495251369246], [3.128500491704133, 50.67049215665287], [3.128429889593509, 50.67048766198871], [3.12835926556623, 50.67048563509952], [3.128288709820203, 50.670499267364384], [3.128275587191795, 50.67050312169485], [3.128218178439842, 50.67053350338606], [3.128167295579174, 50.67054811136943], [3.128147653457073, 50.670559223232864], [3.128077100972724, 50.67059079397759], [3.128073096444349, 50.67059307744774], [3.128070443278575, 50.67063795810101], [3.128077229717219, 50.670641235512576], [3.128147891402413, 50.670652397839696], [3.128218487505666, 50.670654460772724], [3.128289102312713, 50.67065279055033], [3.128359682859011, 50.670648769190585], [3.128430305531155, 50.670650176889275], [3.128500899000195, 50.670651207678894], [3.128571488264486, 50.67065059622947], [3.128642121274498, 50.670656033028116], [3.128701270507386, 50.670682157290244], [3.128712786687018, 50.67068510671143], [3.128783433947726, 50.67069607126823], [3.128854051799123, 50.670706569178236], [3.12891010772934, 50.670726818716055], [3.128924729508478, 50.67072936107498], [3.128995355948543, 50.67074317022289], [3.129050063126999, 50.67077154237412], [3.129066072568328, 50.670775554976096], [3.129136689505304, 50.670785630957376], [3.129200468336664, 50.670816263980264], [3.129207394627525, 50.67081897583537], [3.129278022612412, 50.670833305298984], [3.129346609199469, 50.67086096291947], [3.129348714109228, 50.67086130173213], [3.129419329881256, 50.67087085707333], [3.129490003817872, 50.67089199747086], [3.129517575152819, 50.670905662731315], [3.129560669914921, 50.670921016819186], [3.129631330715412, 50.6709479542136], [3.129635728709819, 50.67095040844225], [3.12970200260002, 50.67096822403337], [3.129768060034338, 50.67099514820583], [3.129772666350974, 50.670996247170486], [3.129843333855963, 50.67101477599904], [3.129913942364241, 50.67102140561133], [3.1299845266682382, 50.671007781378414], [3.130016689349797, 50.67099488829572], [3.130055027756231, 50.6709729611134], [3.130125678550235, 50.67097957261391], [3.130196259176135, 50.67097546047528], [3.130230775074116, 50.67094978620116], [3.130236575335796, 50.67090491119582]]]}";SIN_1;01;01For;2014/04/28;;T;FRA_TRI_LILL
50.62676423,3.22032921693;"{""type"": ""Polygon"", ""coordinates"": [[[3.220553721733843, 50.626804308841145], [3.220518307774779, 50.626784771678196], [3.220471497511888, 50.626759600876525], [3.220447481267372, 50.62671706899665], [3.220446793933482, 50.62671476379758], [3.220376755571148, 50.62667873031385], [3.220356302263413, 50.62667005248379], [3.220376605234684, 50.62664446633574], [3.220405386489849, 50.6266250843874], [3.220379794317599, 50.626580275787354], [3.220376318698206, 50.62657916015791], [3.220374489511747, 50.626580285204874], [3.220305911730075, 50.6266069980681], [3.220260125797882, 50.62658048817754], [3.220235138801034, 50.62655782728486], [3.2201646297817392, 50.626562394684385], [3.220125064874805, 50.62658072774791], [3.220130552151913, 50.626625572053534], [3.22016498704772, 50.62664389952417], [3.2201881001123, 50.62667035094719], [3.220235744640529, 50.626695996021496], [3.220258797317717, 50.62671509750667], [3.220261124525784, 50.626759974328], [3.220237012123514, 50.62680487113365], [3.220241949407639, 50.62684974331872], [3.220261474968678, 50.62689458064257], [3.220284175045041, 50.626939421301635], [3.220307450795679, 50.62695788519345], [3.220333766111096, 50.62698418730413], [3.220378191141141, 50.6270059162177], [3.2204131413177, 50.62698404639438], [3.220432273303225, 50.626939158410124], [3.220430707799113, 50.626894280251], [3.220421566018032, 50.62684942451619], [3.220447922575939, 50.62681761733344], [3.220518497136688, 50.626827902281335], [3.220553721733843, 50.626804308841145]]]}";SIN_2;01;02Moy;2014/04/28;;T;FRA_TRI_LILL
50.6234919689,3.19678130029;"{""type"": ""Polygon"", ""coordinates"": [[[3.1970807516990982, 50.62433096091547], [3.197077810564207, 50.624286111431935], [3.197024137391598, 50.62424131555621], [3.197017315068881, 50.624232037858576], [3.197009754726229, 50.62419645730184], [3.197017083662431, 50.624173040377116], [3.197031333044299, 50.62415155094177], [3.197016955956153, 50.624140481375406], [3.196993884181366, 50.62410675621375], [3.196952188822855, 50.62406194128614], [3.196946089802039, 50.624053622697915], [3.196937834488735, 50.62401708296684], [3.196930167385246, 50.62397224095719], [3.1969253358913, 50.62392737649676], [3.196919474502895, 50.62388250469259], [3.196880502195942, 50.623837685406606], [3.19688450228388, 50.623792824876595], [3.196877865057031, 50.62374796326666], [3.196908937766874, 50.623703032864455], [3.1969050232841782, 50.62365815795639], [3.196913396724134, 50.623613290476015], [3.196911584290455, 50.6235684122276], [3.196900206889022, 50.623523558123544], [3.196924070422687, 50.623478639137886], [3.196935392315284, 50.62343376696646], [3.196929220607395, 50.62338889562255], [3.196901478382039, 50.62334406746853], [3.196918683034689, 50.62329915903457], [3.196924404173219, 50.623254295737254], [3.196919332889255, 50.62320942263526], [3.196902778081125, 50.62316457672132], [3.19692750200343, 50.623119656346155], [3.196940192244658, 50.62307478197955], [3.196932341779321, 50.62302991327564], [3.19691671811555, 50.622985065874474], [3.196926121175895, 50.62294016979185], [3.196941560402744, 50.6228983962078], [3.196943890073823, 50.62289528735558], [3.196966808068146, 50.622850369819844], [3.1969836457340852, 50.622805470900644], [3.196994628737005, 50.622760572293494], [3.197003439278306, 50.62271570405368], [3.197009710359219, 50.6226708129175], [3.197009619014738, 50.622625940850924], [3.197010966020741, 50.62261328474877], [3.197039872682651, 50.622581011640364], [3.197010781442478, 50.62256622306217], [3.197002340338565, 50.622536216945655], [3.1969910194842432, 50.6224913537178], [3.196972560352978, 50.62244651078823], [3.197010189801782, 50.62241537256536], [3.19704278010692, 50.62240151813703], [3.197046469573845, 50.62235665799962], [3.197011307318762, 50.62231183260725], [3.197009780523237, 50.622311018355916], [3.196939197632672, 50.62229574816213], [3.196868596488965, 50.622283008750976], [3.196798048805259, 50.62227670389337], [3.196727550775543, 50.62229027731726], [3.196690788587918, 50.62231234092027], [3.196696663696172, 50.622357212816624], [3.196727965337202, 50.62239613025394], [3.196731670415797, 50.622402011617915], [3.196736741450603, 50.622446884780935], [3.196738045786454, 50.62249175493659], [3.196733354514094, 50.62253664356662], [3.196728597076998, 50.622557435918154], [3.196717222014968, 50.622581523402964], [3.196722631633234, 50.62262639601812], [3.196711972852495, 50.62267128512148], [3.1967111751968362, 50.62271616756817], [3.196729301119825, 50.62273720185499], [3.196734839778004, 50.62276098431941], [3.196735043772236, 50.622805865172786], [3.196729610702031, 50.622816248236596], [3.196659070930143, 50.62281215100351], [3.196600224945896, 50.62285095098058], [3.196588759947812, 50.62287371934289], [3.196583979472225, 50.62289585788074], [3.19658893306812, 50.62291795407816], [3.196611114473288, 50.6229406691474], [3.1966596981322652, 50.622972352720254], [3.196662726188752, 50.622985468550866], [3.19665977521962, 50.62299204251465], [3.196631724205133, 50.6230303898528], [3.196632957959692, 50.62307526905714], [3.196638945860648, 50.623120113803886], [3.196613022535927, 50.623165036020964], [3.19664237267032, 50.62320986170346], [3.196660778204003, 50.62324822517508], [3.196661875785118, 50.62325471195209], [3.196662192471682, 50.623299565671026], [3.196661040318192, 50.623315174036314], [3.19665300072259, 50.62334446137464], [3.196630477201045, 50.623389369219645], [3.196634278556291, 50.62343424433293], [3.196637952843937, 50.6234790927211], [3.1965912672893, 50.623514373362056], [3.196585676188702, 50.62352405665324], [3.196582621140873, 50.623568933643185], [3.196588397545545, 50.62361380561805], [3.196521249458787, 50.62364393141121], [3.196509809708451, 50.62365878425316], [3.196508123069514, 50.62370366804033], [3.196521656083032, 50.62374786362196], [3.19659210709985, 50.62372895063734], [3.196662673452897, 50.62373230298535], [3.196666051420799, 50.6237482990382], [3.196662833851518, 50.62377327099331], [3.1966340049955, 50.62379322194426], [3.196663065367098, 50.62383240312576], [3.196663482415306, 50.62383802943043], [3.196663094144076, 50.62383975313546], [3.196652167986044, 50.62383804735587], [3.1965924726356922, 50.6238223469233], [3.19657351718391, 50.623838171933755], [3.196592669436228, 50.623872630322445], [3.196597055306213, 50.623883015761386], [3.19665896666583, 50.62392779879269], [3.196663450185215, 50.62393069042871], [3.196673997864891, 50.62397264710285], [3.196666188463892, 50.62401751364925], [3.196663836023812, 50.62402923797414], [3.196593271747367, 50.624026522808414], [3.196580342393789, 50.624017649630666], [3.196522616700432, 50.623993393422666], [3.196478625028285, 50.624017810675596], [3.196481481070795, 50.62406268724816], [3.196462145481457, 50.62410759894267], [3.196479306774568, 50.62415242594414], [3.196452769941746, 50.62416690779043], [3.196434788568957, 50.62419736851169], [3.196453045542481, 50.624237374512816], [3.196456478603348, 50.624242215266904], [3.19645311202092, 50.62425437196107], [3.196447272389996, 50.62428711091527], [3.196452808816646, 50.62433195630544], [3.196453419071864, 50.62433287970488], [3.196524040386469, 50.62435727705733], [3.19654537710793, 50.62437669084211], [3.196524287506786, 50.624420438628235], [3.196523981661794, 50.62442159681246], [3.196524293370547, 50.624421937346874], [3.196594870868331, 50.6244350987535], [3.19666541699052, 50.62443303058124], [3.196736002238759, 50.62444815729284], [3.196780399838278, 50.624466071653146], [3.196806637476016, 50.62446883007523], [3.196836196754711, 50.6244659831877], [3.196877113421535, 50.62445604643864], [3.196947562864939, 50.62442931655717], [3.196970878589556, 50.62442088848034], [3.1970180225973, 50.6244124225815], [3.197074170100212, 50.62437585243825], [3.1970807516990982, 50.62433096091547]]]}";SIN_1;01;01For;2014/04/28;;T;FRA_TRI_LILL
;;SIN_3;01;04Fai;2014/04/28;;T;FRA_TRI_LILL
`)
        ).toEqual({
          items: [
            {
              geometry: null,
              properties: {
                datentree: '2014/04/28',
                datsortie: '',
                est_ref: 'T',
                geo_point_2d: '50.6707388795,3.12919014364',
                geo_shape:
                  '{"type": "Polygon", "coordinates": [[[3.130236575335796, 50.67090491119582], [3.130196047181812, 50.670893754384174], [3.130125439956143, 50.67088756464525], [3.130060708753599, 50.67086021750229], [3.130054727309224, 50.670857038069045], [3.129984041095332, 50.67082032848472], [3.129973127038841, 50.670815458161684], [3.129913382013352, 50.670804967468996], [3.129842767795712, 50.670796013649756], [3.129772104845962, 50.67077912701344], [3.129737218571207, 50.67077082679582], [3.129701483522717, 50.670767400220804], [3.129630838418297, 50.67075738740604], [3.129560202839928, 50.67074011474696], [3.12952761792054, 50.670726176531744], [3.12948954526489, 50.67071429902424], [3.129418896435583, 50.67070279644338], [3.129354364974042, 50.67068147910331], [3.129348248238403, 50.67068057014457], [3.129277605476768, 50.670671391687776], [3.129206964156518, 50.67065179462064], [3.129169858009355, 50.6706368200518], [3.129136288853051, 50.670629945127125], [3.129065684737461, 50.670624768819], [3.128995011837286, 50.670609308579806], [3.128966316281854, 50.670592153560484], [3.128924340373513, 50.67057790187465], [3.128853691981017, 50.670566443838936], [3.128824779915709, 50.67054743143591], [3.128783029049124, 50.670538303502305], [3.128712354136129, 50.6705164717115], [3.12868056080572, 50.67050270295193], [3.128641707043342, 50.67049445140144], [3.12857109024058, 50.670495251369246], [3.128500491704133, 50.67049215665287], [3.128429889593509, 50.67048766198871], [3.12835926556623, 50.67048563509952], [3.128288709820203, 50.670499267364384], [3.128275587191795, 50.67050312169485], [3.128218178439842, 50.67053350338606], [3.128167295579174, 50.67054811136943], [3.128147653457073, 50.670559223232864], [3.128077100972724, 50.67059079397759], [3.128073096444349, 50.67059307744774], [3.128070443278575, 50.67063795810101], [3.128077229717219, 50.670641235512576], [3.128147891402413, 50.670652397839696], [3.128218487505666, 50.670654460772724], [3.128289102312713, 50.67065279055033], [3.128359682859011, 50.670648769190585], [3.128430305531155, 50.670650176889275], [3.128500899000195, 50.670651207678894], [3.128571488264486, 50.67065059622947], [3.128642121274498, 50.670656033028116], [3.128701270507386, 50.670682157290244], [3.128712786687018, 50.67068510671143], [3.128783433947726, 50.67069607126823], [3.128854051799123, 50.670706569178236], [3.12891010772934, 50.670726818716055], [3.128924729508478, 50.67072936107498], [3.128995355948543, 50.67074317022289], [3.129050063126999, 50.67077154237412], [3.129066072568328, 50.670775554976096], [3.129136689505304, 50.670785630957376], [3.129200468336664, 50.670816263980264], [3.129207394627525, 50.67081897583537], [3.129278022612412, 50.670833305298984], [3.129346609199469, 50.67086096291947], [3.129348714109228, 50.67086130173213], [3.129419329881256, 50.67087085707333], [3.129490003817872, 50.67089199747086], [3.129517575152819, 50.670905662731315], [3.129560669914921, 50.670921016819186], [3.129631330715412, 50.6709479542136], [3.129635728709819, 50.67095040844225], [3.12970200260002, 50.67096822403337], [3.129768060034338, 50.67099514820583], [3.129772666350974, 50.670996247170486], [3.129843333855963, 50.67101477599904], [3.129913942364241, 50.67102140561133], [3.1299845266682382, 50.671007781378414], [3.130016689349797, 50.67099488829572], [3.130055027756231, 50.6709729611134], [3.130125678550235, 50.67097957261391], [3.130196259176135, 50.67097546047528], [3.130230775074116, 50.67094978620116], [3.130236575335796, 50.67090491119582]]]}',
                id_s_inond: 'SIN_1',
                id_tri: 'FRA_TRI_LILL',
                scenario: '01For',
                typ_inond: 1,
              },
              type: 'Feature',
            },
            {
              geometry: null,
              properties: {
                datentree: '2014/04/28',
                datsortie: '',
                est_ref: 'T',
                geo_point_2d: '50.62676423,3.22032921693',
                geo_shape:
                  '{"type": "Polygon", "coordinates": [[[3.220553721733843, 50.626804308841145], [3.220518307774779, 50.626784771678196], [3.220471497511888, 50.626759600876525], [3.220447481267372, 50.62671706899665], [3.220446793933482, 50.62671476379758], [3.220376755571148, 50.62667873031385], [3.220356302263413, 50.62667005248379], [3.220376605234684, 50.62664446633574], [3.220405386489849, 50.6266250843874], [3.220379794317599, 50.626580275787354], [3.220376318698206, 50.62657916015791], [3.220374489511747, 50.626580285204874], [3.220305911730075, 50.6266069980681], [3.220260125797882, 50.62658048817754], [3.220235138801034, 50.62655782728486], [3.2201646297817392, 50.626562394684385], [3.220125064874805, 50.62658072774791], [3.220130552151913, 50.626625572053534], [3.22016498704772, 50.62664389952417], [3.2201881001123, 50.62667035094719], [3.220235744640529, 50.626695996021496], [3.220258797317717, 50.62671509750667], [3.220261124525784, 50.626759974328], [3.220237012123514, 50.62680487113365], [3.220241949407639, 50.62684974331872], [3.220261474968678, 50.62689458064257], [3.220284175045041, 50.626939421301635], [3.220307450795679, 50.62695788519345], [3.220333766111096, 50.62698418730413], [3.220378191141141, 50.6270059162177], [3.2204131413177, 50.62698404639438], [3.220432273303225, 50.626939158410124], [3.220430707799113, 50.626894280251], [3.220421566018032, 50.62684942451619], [3.220447922575939, 50.62681761733344], [3.220518497136688, 50.626827902281335], [3.220553721733843, 50.626804308841145]]]}',
                id_s_inond: 'SIN_2',
                id_tri: 'FRA_TRI_LILL',
                scenario: '02Moy',
                typ_inond: 1,
              },
              type: 'Feature',
            },
            {
              geometry: null,
              properties: {
                datentree: '2014/04/28',
                datsortie: '',
                est_ref: 'T',
                geo_point_2d: '50.6234919689,3.19678130029',
                geo_shape:
                  '{"type": "Polygon", "coordinates": [[[3.1970807516990982, 50.62433096091547], [3.197077810564207, 50.624286111431935], [3.197024137391598, 50.62424131555621], [3.197017315068881, 50.624232037858576], [3.197009754726229, 50.62419645730184], [3.197017083662431, 50.624173040377116], [3.197031333044299, 50.62415155094177], [3.197016955956153, 50.624140481375406], [3.196993884181366, 50.62410675621375], [3.196952188822855, 50.62406194128614], [3.196946089802039, 50.624053622697915], [3.196937834488735, 50.62401708296684], [3.196930167385246, 50.62397224095719], [3.1969253358913, 50.62392737649676], [3.196919474502895, 50.62388250469259], [3.196880502195942, 50.623837685406606], [3.19688450228388, 50.623792824876595], [3.196877865057031, 50.62374796326666], [3.196908937766874, 50.623703032864455], [3.1969050232841782, 50.62365815795639], [3.196913396724134, 50.623613290476015], [3.196911584290455, 50.6235684122276], [3.196900206889022, 50.623523558123544], [3.196924070422687, 50.623478639137886], [3.196935392315284, 50.62343376696646], [3.196929220607395, 50.62338889562255], [3.196901478382039, 50.62334406746853], [3.196918683034689, 50.62329915903457], [3.196924404173219, 50.623254295737254], [3.196919332889255, 50.62320942263526], [3.196902778081125, 50.62316457672132], [3.19692750200343, 50.623119656346155], [3.196940192244658, 50.62307478197955], [3.196932341779321, 50.62302991327564], [3.19691671811555, 50.622985065874474], [3.196926121175895, 50.62294016979185], [3.196941560402744, 50.6228983962078], [3.196943890073823, 50.62289528735558], [3.196966808068146, 50.622850369819844], [3.1969836457340852, 50.622805470900644], [3.196994628737005, 50.622760572293494], [3.197003439278306, 50.62271570405368], [3.197009710359219, 50.6226708129175], [3.197009619014738, 50.622625940850924], [3.197010966020741, 50.62261328474877], [3.197039872682651, 50.622581011640364], [3.197010781442478, 50.62256622306217], [3.197002340338565, 50.622536216945655], [3.1969910194842432, 50.6224913537178], [3.196972560352978, 50.62244651078823], [3.197010189801782, 50.62241537256536], [3.19704278010692, 50.62240151813703], [3.197046469573845, 50.62235665799962], [3.197011307318762, 50.62231183260725], [3.197009780523237, 50.622311018355916], [3.196939197632672, 50.62229574816213], [3.196868596488965, 50.622283008750976], [3.196798048805259, 50.62227670389337], [3.196727550775543, 50.62229027731726], [3.196690788587918, 50.62231234092027], [3.196696663696172, 50.622357212816624], [3.196727965337202, 50.62239613025394], [3.196731670415797, 50.622402011617915], [3.196736741450603, 50.622446884780935], [3.196738045786454, 50.62249175493659], [3.196733354514094, 50.62253664356662], [3.196728597076998, 50.622557435918154], [3.196717222014968, 50.622581523402964], [3.196722631633234, 50.62262639601812], [3.196711972852495, 50.62267128512148], [3.1967111751968362, 50.62271616756817], [3.196729301119825, 50.62273720185499], [3.196734839778004, 50.62276098431941], [3.196735043772236, 50.622805865172786], [3.196729610702031, 50.622816248236596], [3.196659070930143, 50.62281215100351], [3.196600224945896, 50.62285095098058], [3.196588759947812, 50.62287371934289], [3.196583979472225, 50.62289585788074], [3.19658893306812, 50.62291795407816], [3.196611114473288, 50.6229406691474], [3.1966596981322652, 50.622972352720254], [3.196662726188752, 50.622985468550866], [3.19665977521962, 50.62299204251465], [3.196631724205133, 50.6230303898528], [3.196632957959692, 50.62307526905714], [3.196638945860648, 50.623120113803886], [3.196613022535927, 50.623165036020964], [3.19664237267032, 50.62320986170346], [3.196660778204003, 50.62324822517508], [3.196661875785118, 50.62325471195209], [3.196662192471682, 50.623299565671026], [3.196661040318192, 50.623315174036314], [3.19665300072259, 50.62334446137464], [3.196630477201045, 50.623389369219645], [3.196634278556291, 50.62343424433293], [3.196637952843937, 50.6234790927211], [3.1965912672893, 50.623514373362056], [3.196585676188702, 50.62352405665324], [3.196582621140873, 50.623568933643185], [3.196588397545545, 50.62361380561805], [3.196521249458787, 50.62364393141121], [3.196509809708451, 50.62365878425316], [3.196508123069514, 50.62370366804033], [3.196521656083032, 50.62374786362196], [3.19659210709985, 50.62372895063734], [3.196662673452897, 50.62373230298535], [3.196666051420799, 50.6237482990382], [3.196662833851518, 50.62377327099331], [3.1966340049955, 50.62379322194426], [3.196663065367098, 50.62383240312576], [3.196663482415306, 50.62383802943043], [3.196663094144076, 50.62383975313546], [3.196652167986044, 50.62383804735587], [3.1965924726356922, 50.6238223469233], [3.19657351718391, 50.623838171933755], [3.196592669436228, 50.623872630322445], [3.196597055306213, 50.623883015761386], [3.19665896666583, 50.62392779879269], [3.196663450185215, 50.62393069042871], [3.196673997864891, 50.62397264710285], [3.196666188463892, 50.62401751364925], [3.196663836023812, 50.62402923797414], [3.196593271747367, 50.624026522808414], [3.196580342393789, 50.624017649630666], [3.196522616700432, 50.623993393422666], [3.196478625028285, 50.624017810675596], [3.196481481070795, 50.62406268724816], [3.196462145481457, 50.62410759894267], [3.196479306774568, 50.62415242594414], [3.196452769941746, 50.62416690779043], [3.196434788568957, 50.62419736851169], [3.196453045542481, 50.624237374512816], [3.196456478603348, 50.624242215266904], [3.19645311202092, 50.62425437196107], [3.196447272389996, 50.62428711091527], [3.196452808816646, 50.62433195630544], [3.196453419071864, 50.62433287970488], [3.196524040386469, 50.62435727705733], [3.19654537710793, 50.62437669084211], [3.196524287506786, 50.624420438628235], [3.196523981661794, 50.62442159681246], [3.196524293370547, 50.624421937346874], [3.196594870868331, 50.6244350987535], [3.19666541699052, 50.62443303058124], [3.196736002238759, 50.62444815729284], [3.196780399838278, 50.624466071653146], [3.196806637476016, 50.62446883007523], [3.196836196754711, 50.6244659831877], [3.196877113421535, 50.62445604643864], [3.196947562864939, 50.62442931655717], [3.196970878589556, 50.62442088848034], [3.1970180225973, 50.6244124225815], [3.197074170100212, 50.62437585243825], [3.1970807516990982, 50.62433096091547]]]}',
                id_s_inond: 'SIN_1',
                id_tri: 'FRA_TRI_LILL',
                scenario: '01For',
                typ_inond: 1,
              },
              type: 'Feature',
            },
            {
              geometry: null,
              properties: {
                datentree: '2014/04/28',
                datsortie: '',
                est_ref: 'T',
                geo_point_2d: '',
                geo_shape: '',
                id_s_inond: 'SIN_3',
                id_tri: 'FRA_TRI_LILL',
                scenario: '04Fai',
                typ_inond: 1,
              },
              type: 'Feature',
            },
          ],
          properties: [
            {
              label: 'geo_point_2d',
              name: 'geo_point_2d',
              type: 'string',
            },
            {
              label: 'geo_shape',
              name: 'geo_shape',
              type: 'string',
            },
            {
              label: 'id_s_inond',
              name: 'id_s_inond',
              type: 'string',
            },
            {
              label: 'typ_inond',
              name: 'typ_inond',
              type: 'number',
            },
            {
              label: 'scenario',
              name: 'scenario',
              type: 'string',
            },
            {
              label: 'datentree',
              name: 'datentree',
              type: 'string',
            },
            {
              label: 'datsortie',
              name: 'datsortie',
              type: 'string',
            },
            {
              label: 'est_ref',
              name: 'est_ref',
              type: 'string',
            },
            {
              label: 'id_tri',
              name: 'id_tri',
              type: 'string',
            },
          ],
        })
      })
    })
  })

  describe('CsvReader', () => {
    let reader: CsvReader
    let cacheActive = true
    beforeEach(() => {
      fetchMock.get(
        (url) => new URL(url).hostname === 'localfile',
        async (url) => {
          const filePath = path.join(__dirname, '../..', new URL(url).pathname)
          return {
            body: await fs.readFile(filePath, 'utf8'),
            status: 200,
            headers: {
              'Content-Type': 'text/csv',
            },
          }
        },
        {
          sendAsJson: false,
        }
      )
      reader = new CsvReader(
        'http://localfile/fixtures/rephytox.csv',
        cacheActive
      )
      reader.load()
    })
    afterEach(() => {
      fetchMock.reset()
      cacheActive = true
    })
    describe('#info', () => {
      it('returns dataset info', async () => {
        await expect(reader.info).resolves.toEqual({
          itemsCount: 279,
        })
      })
    })
    describe('#properties', () => {
      it('returns properties info', async () => {
        await expect(reader.properties).resolves.toEqual([
          {
            name: 'Passage : Commentaire',
            label: 'Passage : Commentaire',
            type: 'string',
          },
          {
            name: 'Lieu de surveillance : Identifiant',
            label: 'Lieu de surveillance : Identifiant',
            type: 'number',
          },
          {
            name: 'Lieu de surveillance : Mnémonique',
            label: 'Lieu de surveillance : Mnémonique',
            type: 'string',
          },
          {
            name: 'Lieu de surveillance : Libellé',
            label: 'Lieu de surveillance : Libellé',
            type: 'string',
          },
          { name: 'Passage : Date', label: 'Passage : Date', type: 'date' },
          {
            name: 'Coordonnées passage : Coordonnées minx',
            label: 'Coordonnées passage : Coordonnées minx',
            type: 'number',
          },
          {
            name: 'Coordonnées passage : Coordonnées maxx',
            label: 'Coordonnées passage : Coordonnées maxx',
            type: 'number',
          },
          {
            name: 'Coordonnées passage : Coordonnées miny',
            label: 'Coordonnées passage : Coordonnées miny',
            type: 'number',
          },
          {
            name: 'Coordonnées passage : Coordonnées maxy',
            label: 'Coordonnées passage : Coordonnées maxy',
            type: 'number',
          },
          {
            name: 'Coordonnées passage : Coordonnées redéfinies',
            label: 'Coordonnées passage : Coordonnées redéfinies',
            type: 'number',
          },
          {
            name: 'Prélèvement : Commentaire',
            label: 'Prélèvement : Commentaire',
            type: 'string',
          },
          {
            name: "Libellé de l'engin de prélévement",
            label: "Libellé de l'engin de prélévement",
            type: 'string',
          },
          {
            name: 'Prélèvement : Niveau',
            label: 'Prélèvement : Niveau',
            type: 'string',
          },
          {
            name: 'Prélèvement : Immersion',
            label: 'Prélèvement : Immersion',
            type: 'number',
          },
          {
            name: 'Prélèvement : Immersion Min',
            label: 'Prélèvement : Immersion Min',
            type: 'string',
          },
          {
            name: 'Prélèvement : Immersion Max',
            label: 'Prélèvement : Immersion Max',
            type: 'string',
          },
          {
            name: "Prélèvement : Symbole de l'unité d'immersion",
            label: "Prélèvement : Symbole de l'unité d'immersion",
            type: 'string',
          },
          {
            name: "Prélèvement : Unité d'immersion",
            label: "Prélèvement : Unité d'immersion",
            type: 'string',
          },
          {
            name: 'Echantillon : Commentaire',
            label: 'Echantillon : Commentaire',
            type: 'string',
          },
          {
            name: 'Echantillon : Identifiant interne',
            label: 'Echantillon : Identifiant interne',
            type: 'number',
          },
          {
            name: 'Echantillon : Libellé du support',
            label: 'Echantillon : Libellé du support',
            type: 'string',
          },
          {
            name: 'Echantillon : Libellé du taxon support',
            label: 'Echantillon : Libellé du taxon support',
            type: 'string',
          },
          {
            name: 'Résultat : Code paramètre',
            label: 'Résultat : Code paramètre',
            type: 'string',
          },
          {
            name: 'Résultat : Libellé paramètre',
            label: 'Résultat : Libellé paramètre',
            type: 'string',
          },
          {
            name: 'Résultat : Libellé support',
            label: 'Résultat : Libellé support',
            type: 'string',
          },
          {
            name: 'Résultat : Libellé fraction',
            label: 'Résultat : Libellé fraction',
            type: 'string',
          },
          {
            name: 'Résultat : Libellé méthode',
            label: 'Résultat : Libellé méthode',
            type: 'string',
          },
          {
            name: 'Résultat : Libellé précision',
            label: 'Résultat : Libellé précision',
            type: 'string',
          },
          {
            name: 'Résultat : Valeur de la mesure',
            label: 'Résultat : Valeur de la mesure',
            type: 'number',
          },
          {
            name: 'Résultat : Valeur qualitative',
            label: 'Résultat : Valeur qualitative',
            type: 'string',
          },
          {
            name: 'Résultat : Symbole unité de mesure associé au quadruplet',
            label: 'Résultat : Symbole unité de mesure associé au quadruplet',
            type: 'string',
          },
          {
            name: 'Résultat : Libellé unité de mesure associé au quadruplet',
            label: 'Résultat : Libellé unité de mesure associé au quadruplet',
            type: 'string',
          },
          {
            name: 'Résultat : Commentaires',
            label: 'Résultat : Commentaires',
            type: 'string',
          },
          {
            name: 'Résultat : Service analyste : Libellé',
            label: 'Résultat : Service analyste : Libellé',
            type: 'string',
          },
          {
            name: 'Passage : Date de validation',
            label: 'Passage : Date de validation',
            type: 'date',
          },
          {
            name: 'Passage : Date de qualification',
            label: 'Passage : Date de qualification',
            type: 'string',
          },
          {
            name: 'Passage : Niveau de qualité',
            label: 'Passage : Niveau de qualité',
            type: 'string',
          },
          {
            name: 'Passage : Commentaire de qualification',
            label: 'Passage : Commentaire de qualification',
            type: 'string',
          },
          {
            name: 'Prélèvement : Date de validation',
            label: 'Prélèvement : Date de validation',
            type: 'date',
          },
          {
            name: 'Prélèvement : Date de qualification',
            label: 'Prélèvement : Date de qualification',
            type: 'string',
          },
          {
            name: 'Prélèvement : Niveau de qualité',
            label: 'Prélèvement : Niveau de qualité',
            type: 'string',
          },
          {
            name: 'Prélèvement : Commentaire de qualification',
            label: 'Prélèvement : Commentaire de qualification',
            type: 'string',
          },
          {
            name: 'Echantillon : Date de validation',
            label: 'Echantillon : Date de validation',
            type: 'date',
          },
          {
            name: 'Echantillon : Date de qualification',
            label: 'Echantillon : Date de qualification',
            type: 'string',
          },
          {
            name: 'Echantillon : Niveau de qualité',
            label: 'Echantillon : Niveau de qualité',
            type: 'string',
          },
          {
            name: 'Echantillon : Commentaire de qualification',
            label: 'Echantillon : Commentaire de qualification',
            type: 'string',
          },
          {
            name: 'Résultat : Date de validation',
            label: 'Résultat : Date de validation',
            type: 'date',
          },
          {
            name: 'Résultat : Date de qualification',
            label: 'Résultat : Date de qualification',
            type: 'string',
          },
          {
            name: 'Résultat : Niveau de qualité',
            label: 'Résultat : Niveau de qualité',
            type: 'string',
          },
          {
            name: 'Résultat : Commentaire de qualification',
            label: 'Résultat : Commentaire de qualification',
            type: 'string',
          },
          {
            name: 'Prélèvement : Service préleveur : Code',
            label: 'Prélèvement : Service préleveur : Code',
            type: 'string',
          },
          {
            name: 'Prélèvement : Service préleveur : Libellé',
            label: 'Prélèvement : Service préleveur : Libellé',
            type: 'string',
          },
        ])
      })
    })
    describe('#read', () => {
      let start
      beforeEach(() => {
        start = performance.now()
      })
      afterEach(() => {
        console.log(
          `"${expect.getState().currentTestName}" took ${(
            performance.now() - start
          ).toFixed(1)}ms`
        )
      })
      describe('#selectAll', () => {
        it('reads all data items', async () => {
          const items = await reader.selectAll().read()
          expect(items.length).toEqual(279)
          expect(items[0]).toEqual({
            geometry: null,
            properties: {
              'Coordonnées passage : Coordonnées maxx': 1.99866073,
              'Coordonnées passage : Coordonnées maxy': 51.00247775,
              'Coordonnées passage : Coordonnées minx': 1.99866073,
              'Coordonnées passage : Coordonnées miny': 51.00247775,
              'Coordonnées passage : Coordonnées redéfinies': 0,
              'Echantillon : Commentaire': '',
              'Echantillon : Commentaire de qualification': '',
              'Echantillon : Date de qualification': '',
              'Echantillon : Date de validation': null,
              'Echantillon : Identifiant interne': 5380212,
              'Echantillon : Libellé du support': 'Bivalve',
              'Echantillon : Libellé du taxon support': 'Mytilus edulis',
              'Echantillon : Niveau de qualité': 'Non qualifié',
              "Libellé de l'engin de prélévement": 'Main ',
              'Lieu de surveillance : Identifiant': 1001104,
              'Lieu de surveillance : Libellé': 'Oye plage',
              'Lieu de surveillance : Mnémonique': '001-P-022',
              'Passage : Commentaire': '',
              'Passage : Commentaire de qualification': '',
              'Passage : Date': new Date('2008-04-15T00:00'),
              'Passage : Date de qualification': '',
              'Passage : Date de validation': null,
              'Passage : Niveau de qualité': 'Non qualifié',
              'Prélèvement : Commentaire': '',
              'Prélèvement : Commentaire de qualification': '',
              'Prélèvement : Date de qualification': '',
              'Prélèvement : Date de validation': null,
              'Prélèvement : Immersion': 0,
              'Prélèvement : Immersion Max': '',
              'Prélèvement : Immersion Min': '',
              'Prélèvement : Niveau': 'Emergé',
              'Prélèvement : Niveau de qualité': 'Non qualifié',
              'Prélèvement : Service préleveur : Code':
                'PDG-ODE-LITTORAL-LERBL',
              'Prélèvement : Service préleveur : Libellé':
                'Laboratoire Environnement Ressources de Boulogne-sur-Mer',
              "Prélèvement : Symbole de l'unité d'immersion": 'm',
              "Prélèvement : Unité d'immersion": 'Mètre',
              'Résultat : Code paramètre': 'ASP',
              'Résultat : Commentaire de qualification': '',
              'Résultat : Commentaires': '',
              'Résultat : Date de qualification': '',
              'Résultat : Date de validation': null,
              'Résultat : Libellé fraction': 'Chair totale égouttée',
              'Résultat : Libellé méthode': 'CL/UV toxines amnésiantes - mg/kg',
              'Résultat : Libellé paramètre': 'Toxines ASP',
              'Résultat : Libellé précision': '',
              'Résultat : Libellé support': 'Bivalve',
              'Résultat : Libellé unité de mesure associé au quadruplet':
                'Milligramme par kilogramme',
              'Résultat : Niveau de qualité': 'Non qualifié',
              'Résultat : Service analyste : Libellé':
                'Laboratoire Environnement Ressources de Bretagne Occidentale',
              'Résultat : Symbole unité de mesure associé au quadruplet':
                'mg.kg-1',
              'Résultat : Valeur de la mesure': 1.1,
              'Résultat : Valeur qualitative': '',
            },
            type: 'Feature',
          })
        })
      })
      describe('#select', () => {
        it('reads only certain fields', async () => {
          const items = await reader
            .select(
              'Echantillon : Commentaire',
              'Résultat : Valeur de la mesure'
            )
            .read()
          expect(items.length).toEqual(279)
          expect(items[0]).toEqual({
            geometry: null,
            properties: {
              'Echantillon : Commentaire': '',
              'Résultat : Valeur de la mesure': 1.1,
            },
            type: 'Feature',
          })
        })
      })
      describe('#limit', () => {
        it('reads only a certain range of items', async () => {
          const items = await reader.limit(12, 5).read()
          expect(items.length).toEqual(5)
          expect(items[0]).toEqual({
            geometry: null,
            properties: expect.objectContaining({
              'Echantillon : Identifiant interne': 60577361,
            }),
            type: 'Feature',
          })
        })
      })
      describe('#orderBy', () => {
        it('reads only a certain range of items', async () => {
          const items = await reader
            .orderBy(
              ['desc', 'Lieu de surveillance : Mnémonique'],
              ['asc', 'Prélèvement : Date de validation'],
              ['desc', 'Echantillon : Identifiant interne']
            )
            .read()
          expect(items.length).toEqual(279)
          expect(items.slice(0, 3)).toEqual([
            {
              geometry: null,
              properties: expect.objectContaining({
                'Lieu de surveillance : Mnémonique': '003-S-032',
                'Prélèvement : Date de validation': new Date(
                  '2013-01-31T00:00'
                ),
                'Echantillon : Identifiant interne': 60362233,
              }),
              type: 'Feature',
            },
            {
              geometry: null,
              properties: expect.objectContaining({
                'Lieu de surveillance : Mnémonique': '003-S-032',
                'Prélèvement : Date de validation': new Date(
                  '2016-01-05T00:00'
                ),
                'Echantillon : Identifiant interne': 60539259,
              }),
              type: 'Feature',
            },
            {
              geometry: null,
              properties: expect.objectContaining({
                'Lieu de surveillance : Mnémonique': '003-S-032',
                'Prélèvement : Date de validation': new Date(
                  '2016-01-05T00:00'
                ),
                'Echantillon : Identifiant interne': 60528877,
              }),
              type: 'Feature',
            },
          ])
        })
      })
      describe('#aggregate', () => {
        it('aggregates all records', async () => {
          const items = await reader
            .groupBy(['all'])
            .aggregate(
              ['count'],
              ['max', 'Résultat : Valeur de la mesure'],
              ['min', 'Résultat : Valeur de la mesure'],
              ['sum', 'Résultat : Valeur de la mesure'],
              ['average', 'Résultat : Valeur de la mesure']
            )
            .read()
          expect(items).toEqual([
            {
              geometry: null,
              properties: {
                'average(Résultat : Valeur de la mesure)': 2.0777777777777775,
                'count()': 279,
                'max(Résultat : Valeur de la mesure)': 17.9,
                'min(Résultat : Valeur de la mesure)': 0.15,
                'sum(Résultat : Valeur de la mesure)': 579.6999999999999,
              },
              type: 'Feature',
            },
          ])
        })
        it('aggregates by distinct values', async () => {
          const items = await reader
            .groupBy(['distinct', 'Echantillon : Libellé du taxon support'])
            .aggregate(
              ['count'],
              ['max', 'Résultat : Valeur de la mesure'],
              ['min', 'Résultat : Valeur de la mesure'],
              ['sum', 'Résultat : Valeur de la mesure'],
              ['average', 'Résultat : Valeur de la mesure']
            )
            .read()
          expect(items).toEqual([
            {
              geometry: null,
              properties: {
                'average(Résultat : Valeur de la mesure)': 1.972368421052632,
                'count()': 38,
                'distinct(Echantillon : Libellé du taxon support)':
                  'Mytilus edulis',
                'max(Résultat : Valeur de la mesure)': 15,
                'min(Résultat : Valeur de la mesure)': 0.15,
                'sum(Résultat : Valeur de la mesure)': 74.95000000000002,
              },
              type: 'Feature',
            },
            {
              geometry: null,
              properties: {
                'average(Résultat : Valeur de la mesure)': 2.094398340248963,
                'count()': 241,
                'distinct(Echantillon : Libellé du taxon support)':
                  'Pecten maximus',
                'max(Résultat : Valeur de la mesure)': 17.9,
                'min(Résultat : Valeur de la mesure)': 0.15,
                'sum(Résultat : Valeur de la mesure)': 504.7500000000001,
              },
              type: 'Feature',
            },
          ])
        })
        // FIXME: unsxkip when buckets are implemented
        it.skip('aggregates by ranges', async () => {
          const items = await reader
            .groupBy(['rangeBuckets', 'Passage : Date', 4])
            .aggregate(
              ['count'],
              ['max', 'Prélèvement : Immersion'],
              ['min', 'Prélèvement : Immersion'],
              ['sum', 'Prélèvement : Immersion'],
              ['average', 'Prélèvement : Immersion']
            )
            .read()
          expect(items).toEqual([
            {
              geometry: null,
              properties: {
                'rangeMin(Passage : Date)': '',
                'rangeMax(Passage : Date)': '',
                'max(Prélèvement : Immersion)': 1.1,
                'min(Prélèvement : Immersion)': 1.1,
                'sum(Prélèvement : Immersion)': 1.1,
                'average(Prélèvement : Immersion)': 1.1,
              },
              type: 'Feature',
            },
          ])
        })
      })
      describe('#where', () => {
        it('filters records', async () => {
          const items = await reader
            .where([
              'or',
              ['>', 'Résultat : Valeur de la mesure', 2],
              ['=', 'Résultat : Libellé précision', 'Inf. LQ'],
            ])
            .read()
          expect(items.length).toEqual(90)
          expect(items[0]).toEqual({
            geometry: null,
            properties: expect.objectContaining({
              'Echantillon : Identifiant interne': 60034460,
            }),
            type: 'Feature',
          })
        })
      })
    })
    describe('When cache should be used', () => {
      it('uses the cache', async () => {
        const useCacheSpy = jest.spyOn({ useCache }, 'useCache')
        await reader.read()
        expect(useCacheSpy).toHaveBeenCalledTimes(1)
      })
    })
    describe('When cache should not be used', () => {
      beforeAll(() => {
        cacheActive = false
      })
      it('does not use the cache', async () => {
        const useCacheSpy = jest.spyOn({ useCache }, 'useCache')
        await reader.read()
        expect(useCacheSpy).not.toHaveBeenCalled()
      })
    })
  })
})
